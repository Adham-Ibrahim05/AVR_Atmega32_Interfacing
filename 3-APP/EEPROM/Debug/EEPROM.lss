
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000094e  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000094e  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000097d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  0000098b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003045  00000000  00000000  00000acb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099e  00000000  00000000  00003b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ddc  00000000  00000000  000044ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000028c  00000000  00000000  0000528c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000320  00000000  00000000  00005518  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001417  00000000  00000000  00005838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00006c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000008cc  000008cc  00000940  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.DIO_VoidInit 0000001a  0000088e  0000088e  00000902  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.DIO_voidSetPinValue 000000e6  00000456  00000456  000004ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.DIO_voidSetPortValue 00000020  00000850  00000850  000008c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.EEPROM_u8SendData 00000034  00000736  00000736  000007aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.EEPROM_u8ReadData 00000042  000006f4  000006f4  00000768  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.I2C_voidMasterInit 00000022  000007ea  000007ea  0000085e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.I2C_u8SendStartCondition 00000022  0000080c  0000080c  00000880  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.I2C_u8SendStopCondition 0000000e  000008be  000008be  00000932  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.I2C_u8SendReapeatedStart 00000022  0000082e  0000082e  000008a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.I2C_u8SendSlaveAddressWithWrite 0000002c  0000076a  0000076a  000007de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.I2C_u8SendSlaveAddressWithRead 0000002c  00000796  00000796  0000080a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.I2C_u8MasterWriteDataByte 0000001e  00000870  00000870  000008e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.I2C_u8MasterReadDataByte 00000028  000007c2  000007c2  00000836  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.LCD_voidInit 000002ee  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.LCD_voidSendData 000000da  0000053c  0000053c  000005b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.LCD_voidGoToXY 000000fc  0000035a  0000035a  000003ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.LCD_voidWriteNumber 00000088  00000616  00000616  0000068a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.main    00000056  0000069e  0000069e  00000712  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__dummy_fini 00000002  000008d4  000008d4  00000948  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__dummy_funcs_on_exit 00000002  000008d6  000008d6  0000094a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__dummy_simulator_exit 00000002  000008d8  000008d8  0000094c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.exit    00000016  000008a8  000008a8  0000091c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text._Exit   00000004  000008d0  000008d0  00000944  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>
   8:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>
   c:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>
  10:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>
  14:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>
  18:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>
  1c:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>
  20:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>
  24:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>
  28:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>
  2c:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>
  30:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>
  34:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>
  38:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>
  3c:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>
  40:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>
  44:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>
  48:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>
  4c:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>
  50:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4f 03 	call	0x69e	; 0x69e <main>
  64:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000008cc <__bad_interrupt>:
 8cc:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.DIO_VoidInit:

0000088e <DIO_VoidInit>:
#include "DIO_register.h"
#include "DIO_private.h"

void DIO_VoidInit(void)
{
	DDRA = PORTA_DIR;
 88e:	8c e0       	ldi	r24, 0x0C	; 12
 890:	8a bb       	out	0x1a, r24	; 26
	DDRB = PORTB_DIR;
 892:	8f e0       	ldi	r24, 0x0F	; 15
 894:	87 bb       	out	0x17, r24	; 23
	DDRC = PORTC_DIR;
 896:	83 e0       	ldi	r24, 0x03	; 3
 898:	84 bb       	out	0x14, r24	; 20
	DDRD = PORTD_DIR;
 89a:	8f ef       	ldi	r24, 0xFF	; 255
 89c:	81 bb       	out	0x11, r24	; 17
	
	PORTA = PORTA_INITIAL_VALUE;
 89e:	1b ba       	out	0x1b, r1	; 27
	PORTB = PORTB_INITIAL_VALUE;
 8a0:	18 ba       	out	0x18, r1	; 24
	PORTC = PORTC_INITIAL_VALUE;
 8a2:	15 ba       	out	0x15, r1	; 21
	PORTD = PORTD_INITIAL_VALUE;
 8a4:	12 ba       	out	0x12, r1	; 18
 8a6:	08 95       	ret

Disassembly of section .text.DIO_voidSetPinValue:

00000456 <DIO_voidSetPinValue>:
}


void DIO_voidSetPinValue(u8 PORT_ID,u8 PIN_ID,u8 Value)
{
	if(PIN_ID <= DIO_PIN7)
 456:	68 30       	cpi	r22, 0x08	; 8
 458:	08 f0       	brcs	.+2      	; 0x45c <DIO_voidSetPinValue+0x6>
 45a:	6f c0       	rjmp	.+222    	; 0x53a <DIO_voidSetPinValue+0xe4>
	{
		if(Value == PIN_LOW)
 45c:	41 11       	cpse	r20, r1
 45e:	38 c0       	rjmp	.+112    	; 0x4d0 <DIO_voidSetPinValue+0x7a>
		{
			switch(PORT_ID)
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	91 f0       	breq	.+36     	; 0x488 <DIO_voidSetPinValue+0x32>
 464:	28 f0       	brcs	.+10     	; 0x470 <DIO_voidSetPinValue+0x1a>
 466:	82 30       	cpi	r24, 0x02	; 2
 468:	d9 f0       	breq	.+54     	; 0x4a0 <DIO_voidSetPinValue+0x4a>
 46a:	83 30       	cpi	r24, 0x03	; 3
 46c:	29 f1       	breq	.+74     	; 0x4b8 <DIO_voidSetPinValue+0x62>
 46e:	08 95       	ret
			{
				case DIO_PORTA: CLR_BIT(PORTA,PIN_ID);break;
 470:	2b b3       	in	r18, 0x1b	; 27
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_voidSetPinValue+0x26>
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	6a 95       	dec	r22
 47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_voidSetPinValue+0x22>
 480:	80 95       	com	r24
 482:	82 23       	and	r24, r18
 484:	8b bb       	out	0x1b, r24	; 27
 486:	08 95       	ret
				case DIO_PORTB: CLR_BIT(PORTB,PIN_ID);break;
 488:	28 b3       	in	r18, 0x18	; 24
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_voidSetPinValue+0x3e>
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_voidSetPinValue+0x3a>
 498:	80 95       	com	r24
 49a:	82 23       	and	r24, r18
 49c:	88 bb       	out	0x18, r24	; 24
 49e:	08 95       	ret
				case DIO_PORTC: CLR_BIT(PORTC,PIN_ID);break;
 4a0:	25 b3       	in	r18, 0x15	; 21
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_voidSetPinValue+0x56>
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	6a 95       	dec	r22
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_voidSetPinValue+0x52>
 4b0:	80 95       	com	r24
 4b2:	82 23       	and	r24, r18
 4b4:	85 bb       	out	0x15, r24	; 21
 4b6:	08 95       	ret
				case DIO_PORTD: CLR_BIT(PORTD,PIN_ID);break;
 4b8:	22 b3       	in	r18, 0x12	; 18
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_voidSetPinValue+0x6e>
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	6a 95       	dec	r22
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_voidSetPinValue+0x6a>
 4c8:	80 95       	com	r24
 4ca:	82 23       	and	r24, r18
 4cc:	82 bb       	out	0x12, r24	; 18
 4ce:	08 95       	ret
			}
		}
		else if(Value == PIN_HIGH)
 4d0:	41 30       	cpi	r20, 0x01	; 1
 4d2:	99 f5       	brne	.+102    	; 0x53a <DIO_voidSetPinValue+0xe4>
		{
			switch(PORT_ID)
 4d4:	81 30       	cpi	r24, 0x01	; 1
 4d6:	89 f0       	breq	.+34     	; 0x4fa <DIO_voidSetPinValue+0xa4>
 4d8:	28 f0       	brcs	.+10     	; 0x4e4 <DIO_voidSetPinValue+0x8e>
 4da:	82 30       	cpi	r24, 0x02	; 2
 4dc:	c9 f0       	breq	.+50     	; 0x510 <DIO_voidSetPinValue+0xba>
 4de:	83 30       	cpi	r24, 0x03	; 3
 4e0:	11 f1       	breq	.+68     	; 0x526 <DIO_voidSetPinValue+0xd0>
 4e2:	08 95       	ret
			{
				case DIO_PORTA: SET_BIT(PORTA,PIN_ID);break;
 4e4:	2b b3       	in	r18, 0x1b	; 27
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_voidSetPinValue+0x9a>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	6a 95       	dec	r22
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_voidSetPinValue+0x96>
 4f4:	82 2b       	or	r24, r18
 4f6:	8b bb       	out	0x1b, r24	; 27
 4f8:	08 95       	ret
				case DIO_PORTB: SET_BIT(PORTB,PIN_ID);break;
 4fa:	28 b3       	in	r18, 0x18	; 24
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_voidSetPinValue+0xb0>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	6a 95       	dec	r22
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_voidSetPinValue+0xac>
 50a:	82 2b       	or	r24, r18
 50c:	88 bb       	out	0x18, r24	; 24
 50e:	08 95       	ret
				case DIO_PORTC: SET_BIT(PORTC,PIN_ID);break;
 510:	25 b3       	in	r18, 0x15	; 21
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_voidSetPinValue+0xc6>
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	6a 95       	dec	r22
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_voidSetPinValue+0xc2>
 520:	82 2b       	or	r24, r18
 522:	85 bb       	out	0x15, r24	; 21
 524:	08 95       	ret
				case DIO_PORTD: SET_BIT(PORTD,PIN_ID);break;
 526:	22 b3       	in	r18, 0x12	; 18
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_voidSetPinValue+0xdc>
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	6a 95       	dec	r22
 534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_voidSetPinValue+0xd8>
 536:	82 2b       	or	r24, r18
 538:	82 bb       	out	0x12, r24	; 18
 53a:	08 95       	ret

Disassembly of section .text.DIO_voidSetPortValue:

00000850 <DIO_voidSetPortValue>:
}


void DIO_voidSetPortValue(u8 PORT_ID,u8 Value)
{
	switch(PORT_ID)
 850:	81 30       	cpi	r24, 0x01	; 1
 852:	41 f0       	breq	.+16     	; 0x864 <__stack+0x5>
 854:	28 f0       	brcs	.+10     	; 0x860 <__stack+0x1>
 856:	82 30       	cpi	r24, 0x02	; 2
 858:	39 f0       	breq	.+14     	; 0x868 <__stack+0x9>
 85a:	83 30       	cpi	r24, 0x03	; 3
 85c:	39 f0       	breq	.+14     	; 0x86c <__stack+0xd>
 85e:	08 95       	ret
	{
		case DIO_PORTA: PORTA= Value;break;
 860:	6b bb       	out	0x1b, r22	; 27
 862:	08 95       	ret
		case DIO_PORTB: PORTB= Value;break;
 864:	68 bb       	out	0x18, r22	; 24
 866:	08 95       	ret
		case DIO_PORTC: PORTC= Value;break;
 868:	65 bb       	out	0x15, r22	; 21
 86a:	08 95       	ret
		case DIO_PORTD: PORTD= Value;break;
 86c:	62 bb       	out	0x12, r22	; 18
 86e:	08 95       	ret

Disassembly of section .text.EEPROM_u8SendData:

00000736 <EEPROM_u8SendData>:
#include "EEPROM_register.h"
#include "I2C_interface.h"


u8 EEPROM_u8SendData(u16 Address , u8 Data)
{
 736:	1f 93       	push	r17
 738:	cf 93       	push	r28
 73a:	df 93       	push	r29
 73c:	d8 2f       	mov	r29, r24
 73e:	19 2f       	mov	r17, r25
 740:	c6 2f       	mov	r28, r22
	u8 Local_StateErr =0;
	
	/*Send Start Condition*/
	Local_StateErr=	I2C_u8SendStartCondition();
 742:	0e 94 06 04 	call	0x80c	; 0x80c <I2C_u8SendStartCondition>

	
	/*Send Slave Address with Write*/
	/*A2 for device Address , the 2MSB of Address for block number*/
	Local_StateErr=I2C_u8SendSlaveAddressWithWrite(EEPROM_ADD | A2<<2 | A1<<1 | Address>>8);
 746:	81 2f       	mov	r24, r17
 748:	80 65       	ori	r24, 0x50	; 80
 74a:	0e 94 b5 03 	call	0x76a	; 0x76a <I2C_u8SendSlaveAddressWithWrite>

	
	/*Master Send Location Address*/
	Local_StateErr=	I2C_u8MasterWriteDataByte((u8) Address);
 74e:	8d 2f       	mov	r24, r29
 750:	0e 94 38 04 	call	0x870	; 0x870 <I2C_u8MasterWriteDataByte>

	
	/*Master Send Data*/
	Local_StateErr=	I2C_u8MasterWriteDataByte(Data);
 754:	8c 2f       	mov	r24, r28
 756:	0e 94 38 04 	call	0x870	; 0x870 <I2C_u8MasterWriteDataByte>
 75a:	c8 2f       	mov	r28, r24

	
	/*Send Stop Condition*/
	I2C_u8SendStopCondition();
 75c:	0e 94 5f 04 	call	0x8be	; 0x8be <I2C_u8SendStopCondition>
	
	return Local_StateErr;
}
 760:	8c 2f       	mov	r24, r28
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	1f 91       	pop	r17
 768:	08 95       	ret

Disassembly of section .text.EEPROM_u8ReadData:

000006f4 <EEPROM_u8ReadData>:

u8 EEPROM_u8ReadData(u16 Address , u8* Data)
{
 6f4:	0f 93       	push	r16
 6f6:	1f 93       	push	r17
 6f8:	cf 93       	push	r28
 6fa:	df 93       	push	r29
 6fc:	d8 2f       	mov	r29, r24
 6fe:	c9 2f       	mov	r28, r25
 700:	8b 01       	movw	r16, r22
	u8 Local_StateErr =0;
	
	/*Send Start Condition*/
	Local_StateErr=I2C_u8SendStartCondition();
 702:	0e 94 06 04 	call	0x80c	; 0x80c <I2C_u8SendStartCondition>

		
	/*Send Slave Address with Write*/
	/*A2 for device Address , the 2MSB of Address for block number*/
	Local_StateErr=I2C_u8SendSlaveAddressWithWrite(EEPROM_ADD | A2<<2 | A1<<1 | Address>>8);
 706:	c0 65       	ori	r28, 0x50	; 80
 708:	8c 2f       	mov	r24, r28
 70a:	0e 94 b5 03 	call	0x76a	; 0x76a <I2C_u8SendSlaveAddressWithWrite>

	
	/*Master Send Location Address*/
	Local_StateErr=I2C_u8MasterWriteDataByte((u8)Address);
 70e:	8d 2f       	mov	r24, r29
 710:	0e 94 38 04 	call	0x870	; 0x870 <I2C_u8MasterWriteDataByte>

	
	/*Send Repeated Start To Read the data Form previous Address*/
	Local_StateErr=I2C_u8SendReapeatedStart();
 714:	0e 94 17 04 	call	0x82e	; 0x82e <I2C_u8SendReapeatedStart>

	/*Send Slave Address with Read*/
	/*A2 for device Address , the 2MSB of Address for block number*/
	Local_StateErr=	I2C_u8SendSlaveAddressWithRead(EEPROM_ADD | A2<<2 | A1<<1 | Address>>8);
 718:	8c 2f       	mov	r24, r28
 71a:	0e 94 cb 03 	call	0x796	; 0x796 <I2C_u8SendSlaveAddressWithRead>
	

	/* Master Read Data */
	Local_StateErr=	I2C_u8MasterReadDataByte(Data);
 71e:	c8 01       	movw	r24, r16
 720:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <I2C_u8MasterReadDataByte>
 724:	c8 2f       	mov	r28, r24

		
	/*Send Stop Condition*/
	I2C_u8SendStopCondition();
 726:	0e 94 5f 04 	call	0x8be	; 0x8be <I2C_u8SendStopCondition>

	return Local_StateErr;
 72a:	8c 2f       	mov	r24, r28
 72c:	df 91       	pop	r29
 72e:	cf 91       	pop	r28
 730:	1f 91       	pop	r17
 732:	0f 91       	pop	r16
 734:	08 95       	ret

Disassembly of section .text.I2C_voidMasterInit:

000007ea <I2C_voidMasterInit>:
	
	/*Enable TWI Interrupt*/
	SET_BIT(TWCR,TWCR_TWEN);
	
	/*Set ACknowlege*/
	SET_BIT(TWCR,TWCR_TWEA);
 7ea:	92 e0       	ldi	r25, 0x02	; 2
 7ec:	90 b9       	out	0x00, r25	; 0
 7ee:	91 b1       	in	r25, 0x01	; 1
 7f0:	9e 7f       	andi	r25, 0xFE	; 254
 7f2:	91 b9       	out	0x01, r25	; 1
 7f4:	91 b1       	in	r25, 0x01	; 1
 7f6:	9d 7f       	andi	r25, 0xFD	; 253
 7f8:	91 b9       	out	0x01, r25	; 1
 7fa:	88 0f       	add	r24, r24
 7fc:	82 b9       	out	0x02, r24	; 2
 7fe:	86 b7       	in	r24, 0x36	; 54
 800:	84 60       	ori	r24, 0x04	; 4
 802:	86 bf       	out	0x36, r24	; 54
 804:	86 b7       	in	r24, 0x36	; 54
 806:	80 64       	ori	r24, 0x40	; 64
 808:	86 bf       	out	0x36, r24	; 54
 80a:	08 95       	ret

Disassembly of section .text.I2C_u8SendStartCondition:

0000080c <I2C_u8SendStartCondition>:
Error_Status I2C_u8SendStartCondition(void)
{
	Error_Status Local_State_Error = NoError;
	
	/*Set Start Condition*/
	SET_BIT(TWCR,TWCR_TWSTA);
 80c:	86 b7       	in	r24, 0x36	; 54
 80e:	80 62       	ori	r24, 0x20	; 32
 810:	86 bf       	out	0x36, r24	; 54
	
	/*Clear flag to do the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
 812:	86 b7       	in	r24, 0x36	; 54
 814:	80 68       	ori	r24, 0x80	; 128
 816:	86 bf       	out	0x36, r24	; 54
	
	/*Wait for flag to be set and the previous operation finished*/
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
 818:	06 b6       	in	r0, 0x36	; 54
 81a:	07 fe       	sbrs	r0, 7
 81c:	fd cf       	rjmp	.-6      	; 0x818 <I2C_u8SendStartCondition+0xc>
	
	/*Check if there is no error in operation*/
	if ((TWSR & 0XF8) !=START_ACK)
 81e:	81 b1       	in	r24, 0x01	; 1
 820:	88 7f       	andi	r24, 0xF8	; 248
 822:	88 30       	cpi	r24, 0x08	; 8
 824:	11 f4       	brne	.+4      	; 0x82a <I2C_u8SendStartCondition+0x1e>
	SET_BIT(TWCR,TWCR_TWEA);
}

Error_Status I2C_u8SendStartCondition(void)
{
	Error_Status Local_State_Error = NoError;
 826:	80 e0       	ldi	r24, 0x00	; 0
 828:	08 95       	ret
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
	
	/*Check if there is no error in operation*/
	if ((TWSR & 0XF8) !=START_ACK)
	{
		Local_State_Error = StartConditionErr;
 82a:	81 e0       	ldi	r24, 0x01	; 1
	else
	{/*do nothing*/}
		
	return Local_State_Error;	
		
}
 82c:	08 95       	ret

Disassembly of section .text.I2C_u8SendStopCondition:

000008be <I2C_u8SendStopCondition>:

void I2C_u8SendStopCondition(void)
{
	/*Enable Stop Bit*/
	SET_BIT(TWCR,TWCR_TWSTO);
 8be:	86 b7       	in	r24, 0x36	; 54
 8c0:	80 61       	ori	r24, 0x10	; 16
 8c2:	86 bf       	out	0x36, r24	; 54
	/*Clear flag to do the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
 8c4:	86 b7       	in	r24, 0x36	; 54
 8c6:	80 68       	ori	r24, 0x80	; 128
 8c8:	86 bf       	out	0x36, r24	; 54
 8ca:	08 95       	ret

Disassembly of section .text.I2C_u8SendReapeatedStart:

0000082e <I2C_u8SendReapeatedStart>:
Error_Status I2C_u8SendReapeatedStart(void)
{
	Error_Status Local_State_Error = NoError;
	
	/*Set Start Condition*/
	SET_BIT(TWCR,TWCR_TWSTA);
 82e:	86 b7       	in	r24, 0x36	; 54
 830:	80 62       	ori	r24, 0x20	; 32
 832:	86 bf       	out	0x36, r24	; 54
	
	/*Clear flag to do the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
 834:	86 b7       	in	r24, 0x36	; 54
 836:	80 68       	ori	r24, 0x80	; 128
 838:	86 bf       	out	0x36, r24	; 54
	
	/*Wait for flag to be set and the previous operation finished*/
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
 83a:	06 b6       	in	r0, 0x36	; 54
 83c:	07 fe       	sbrs	r0, 7
 83e:	fd cf       	rjmp	.-6      	; 0x83a <I2C_u8SendReapeatedStart+0xc>
	
	/*Check if there is no error in operation*/
	if ((TWSR & 0XF8) !=REP_START_ACK)
 840:	81 b1       	in	r24, 0x01	; 1
 842:	88 7f       	andi	r24, 0xF8	; 248
 844:	80 31       	cpi	r24, 0x10	; 16
 846:	11 f4       	brne	.+4      	; 0x84c <I2C_u8SendReapeatedStart+0x1e>
	SET_BIT(TWCR,TWCR_TWINT);
}

Error_Status I2C_u8SendReapeatedStart(void)
{
	Error_Status Local_State_Error = NoError;
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	08 95       	ret
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
	
	/*Check if there is no error in operation*/
	if ((TWSR & 0XF8) !=REP_START_ACK)
	{
		Local_State_Error = RepeatedStartErr;
 84c:	82 e0       	ldi	r24, 0x02	; 2
	}
	else
	{/*Do Nothing*/}
	
	return Local_State_Error;
}
 84e:	08 95       	ret

Disassembly of section .text.I2C_u8SendSlaveAddressWithWrite:

0000076a <I2C_u8SendSlaveAddressWithWrite>:
	
	/*Enable TWI Interrupt*/
	SET_BIT(TWCR,TWCR_TWEN);
	
	/*Set ACknowlege*/
	SET_BIT(TWCR,TWCR_TWEA);
 76a:	88 0f       	add	r24, r24
 76c:	83 b9       	out	0x03, r24	; 3
 76e:	83 b1       	in	r24, 0x03	; 3
 770:	8e 7f       	andi	r24, 0xFE	; 254
 772:	83 b9       	out	0x03, r24	; 3
 774:	86 b7       	in	r24, 0x36	; 54
 776:	8f 7d       	andi	r24, 0xDF	; 223
 778:	86 bf       	out	0x36, r24	; 54
 77a:	86 b7       	in	r24, 0x36	; 54
 77c:	80 68       	ori	r24, 0x80	; 128
 77e:	86 bf       	out	0x36, r24	; 54
 780:	06 b6       	in	r0, 0x36	; 54
 782:	07 fe       	sbrs	r0, 7
 784:	fd cf       	rjmp	.-6      	; 0x780 <I2C_u8SendSlaveAddressWithWrite+0x16>
 786:	81 b1       	in	r24, 0x01	; 1
 788:	88 7f       	andi	r24, 0xF8	; 248
 78a:	88 31       	cpi	r24, 0x18	; 24
 78c:	11 f4       	brne	.+4      	; 0x792 <I2C_u8SendSlaveAddressWithWrite+0x28>
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	08 95       	ret
 792:	83 e0       	ldi	r24, 0x03	; 3
 794:	08 95       	ret

Disassembly of section .text.I2C_u8SendSlaveAddressWithRead:

00000796 <I2C_u8SendSlaveAddressWithRead>:
 796:	88 0f       	add	r24, r24
 798:	83 b9       	out	0x03, r24	; 3
 79a:	83 b1       	in	r24, 0x03	; 3
 79c:	81 60       	ori	r24, 0x01	; 1
 79e:	83 b9       	out	0x03, r24	; 3
 7a0:	86 b7       	in	r24, 0x36	; 54
 7a2:	8f 7d       	andi	r24, 0xDF	; 223
 7a4:	86 bf       	out	0x36, r24	; 54
 7a6:	86 b7       	in	r24, 0x36	; 54
 7a8:	80 68       	ori	r24, 0x80	; 128
 7aa:	86 bf       	out	0x36, r24	; 54
 7ac:	06 b6       	in	r0, 0x36	; 54
 7ae:	07 fe       	sbrs	r0, 7
 7b0:	fd cf       	rjmp	.-6      	; 0x7ac <I2C_u8SendSlaveAddressWithRead+0x16>
 7b2:	81 b1       	in	r24, 0x01	; 1
 7b4:	88 7f       	andi	r24, 0xF8	; 248
 7b6:	80 34       	cpi	r24, 0x40	; 64
 7b8:	11 f4       	brne	.+4      	; 0x7be <I2C_u8SendSlaveAddressWithRead+0x28>
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	08 95       	ret
 7be:	84 e0       	ldi	r24, 0x04	; 4
 7c0:	08 95       	ret

Disassembly of section .text.I2C_u8MasterWriteDataByte:

00000870 <I2C_u8MasterWriteDataByte>:
Error_Status I2C_u8MasterWriteDataByte(u8 Data)
{
	Error_Status Local_State_Error = NoError;
	
	/*Write Data Byte*/
	TWDR = Data;
 870:	83 b9       	out	0x03, r24	; 3
	
	/*Clear flag to do the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
 872:	86 b7       	in	r24, 0x36	; 54
 874:	80 68       	ori	r24, 0x80	; 128
 876:	86 bf       	out	0x36, r24	; 54
	
	/*Wait for flag to be set and the previous operation finished*/
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
 878:	06 b6       	in	r0, 0x36	; 54
 87a:	07 fe       	sbrs	r0, 7
 87c:	fd cf       	rjmp	.-6      	; 0x878 <I2C_u8MasterWriteDataByte+0x8>
	
	/*Check if there is no error in operation*/
	if ((TWSR & 0XF8) !=MSTR_WR_BYTE_ACK)
 87e:	81 b1       	in	r24, 0x01	; 1
 880:	88 7f       	andi	r24, 0xF8	; 248
 882:	88 32       	cpi	r24, 0x28	; 40
 884:	11 f4       	brne	.+4      	; 0x88a <I2C_u8MasterWriteDataByte+0x1a>
	return Local_State_Error;
}

Error_Status I2C_u8MasterWriteDataByte(u8 Data)
{
	Error_Status Local_State_Error = NoError;
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	08 95       	ret
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
	
	/*Check if there is no error in operation*/
	if ((TWSR & 0XF8) !=MSTR_WR_BYTE_ACK)
	{
		Local_State_Error = MasterWriteByteErr;
 88a:	85 e0       	ldi	r24, 0x05	; 5
	}
	else
	{/*Do Nothing*/}
	
	return Local_State_Error;
}
 88c:	08 95       	ret

Disassembly of section .text.I2C_u8MasterReadDataByte:

000007c2 <I2C_u8MasterReadDataByte>:
	
	/*Enable TWI Interrupt*/
	SET_BIT(TWCR,TWCR_TWEN);
	
	/*Set ACknowlege*/
	SET_BIT(TWCR,TWCR_TWEA);
 7c2:	fc 01       	movw	r30, r24
 7c4:	96 b7       	in	r25, 0x36	; 54
 7c6:	90 64       	ori	r25, 0x40	; 64
 7c8:	96 bf       	out	0x36, r25	; 54
 7ca:	96 b7       	in	r25, 0x36	; 54
 7cc:	90 68       	ori	r25, 0x80	; 128
 7ce:	96 bf       	out	0x36, r25	; 54
 7d0:	06 b6       	in	r0, 0x36	; 54
 7d2:	07 fe       	sbrs	r0, 7
 7d4:	fd cf       	rjmp	.-6      	; 0x7d0 <I2C_u8MasterReadDataByte+0xe>
 7d6:	91 b1       	in	r25, 0x01	; 1
 7d8:	98 7f       	andi	r25, 0xF8	; 248
 7da:	90 35       	cpi	r25, 0x50	; 80
 7dc:	21 f4       	brne	.+8      	; 0x7e6 <I2C_u8MasterReadDataByte+0x24>
 7de:	83 b1       	in	r24, 0x03	; 3
 7e0:	80 83       	st	Z, r24
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	08 95       	ret
 7e6:	86 e0       	ldi	r24, 0x06	; 6
 7e8:	08 95       	ret

Disassembly of section .text.LCD_voidInit:

0000006c <LCD_voidInit>:
	while(String[Counter]!='\0')
	{
		LCD_voidSendData(String[Counter]);
		Counter++;
	}
}
  6c:	85 e4       	ldi	r24, 0x45	; 69
  6e:	9e e1       	ldi	r25, 0x1E	; 30
  70:	01 97       	sbiw	r24, 0x01	; 1
  72:	f1 f7       	brne	.-4      	; 0x70 <LCD_voidInit+0x4>
  74:	00 c0       	rjmp	.+0      	; 0x76 <LCD_voidInit+0xa>
  76:	00 00       	nop
  78:	40 e0       	ldi	r20, 0x00	; 0
  7a:	60 e0       	ldi	r22, 0x00	; 0
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	62 e0       	ldi	r22, 0x02	; 2
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	63 e0       	ldi	r22, 0x03	; 3
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
  aa:	83 ef       	ldi	r24, 0xF3	; 243
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LCD_voidInit+0x42>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <LCD_voidInit+0x48>
  b4:	00 00       	nop
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	62 e0       	ldi	r22, 0x02	; 2
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
  c0:	83 ef       	ldi	r24, 0xF3	; 243
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LCD_voidInit+0x58>
  c8:	00 c0       	rjmp	.+0      	; 0xca <LCD_voidInit+0x5e>
  ca:	00 00       	nop
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
  d6:	41 e0       	ldi	r20, 0x01	; 1
  d8:	61 e0       	ldi	r22, 0x01	; 1
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	62 e0       	ldi	r22, 0x02	; 2
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	63 e0       	ldi	r22, 0x03	; 3
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
  f4:	41 e0       	ldi	r20, 0x01	; 1
  f6:	62 e0       	ldi	r22, 0x02	; 2
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
  fe:	83 ef       	ldi	r24, 0xF3	; 243
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <LCD_voidInit+0x96>
 106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_voidInit+0x9c>
 108:	00 00       	nop
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 114:	83 ef       	ldi	r24, 0xF3	; 243
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_voidInit+0xac>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCD_voidInit+0xb2>
 11e:	00 00       	nop
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	62 e0       	ldi	r22, 0x02	; 2
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 12a:	41 e0       	ldi	r20, 0x01	; 1
 12c:	63 e0       	ldi	r22, 0x03	; 3
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 134:	41 e0       	ldi	r20, 0x01	; 1
 136:	62 e0       	ldi	r22, 0x02	; 2
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 13e:	83 ef       	ldi	r24, 0xF3	; 243
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_voidInit+0xd6>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_voidInit+0xdc>
 148:	00 00       	nop
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	62 e0       	ldi	r22, 0x02	; 2
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 154:	83 ef       	ldi	r24, 0xF3	; 243
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCD_voidInit+0xec>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCD_voidInit+0xf2>
 15e:	00 00       	nop
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	62 e0       	ldi	r22, 0x02	; 2
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	63 e0       	ldi	r22, 0x03	; 3
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 192:	83 ef       	ldi	r24, 0xF3	; 243
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCD_voidInit+0x12a>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_voidInit+0x130>
 19c:	00 00       	nop
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 1a8:	83 ef       	ldi	r24, 0xF3	; 243
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_voidInit+0x140>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_voidInit+0x146>
 1b2:	00 00       	nop
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	62 e0       	ldi	r22, 0x02	; 2
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	63 e0       	ldi	r22, 0x03	; 3
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	62 e0       	ldi	r22, 0x02	; 2
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 1e6:	83 ef       	ldi	r24, 0xF3	; 243
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCD_voidInit+0x17e>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LCD_voidInit+0x184>
 1f0:	00 00       	nop
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	62 e0       	ldi	r22, 0x02	; 2
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 1fc:	83 ef       	ldi	r24, 0xF3	; 243
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <LCD_voidInit+0x194>
 204:	00 c0       	rjmp	.+0      	; 0x206 <LCD_voidInit+0x19a>
 206:	00 00       	nop
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	62 e0       	ldi	r22, 0x02	; 2
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	63 e0       	ldi	r22, 0x03	; 3
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	62 e0       	ldi	r22, 0x02	; 2
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 23a:	83 ef       	ldi	r24, 0xF3	; 243
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <LCD_voidInit+0x1d2>
 242:	00 c0       	rjmp	.+0      	; 0x244 <LCD_voidInit+0x1d8>
 244:	00 00       	nop
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	62 e0       	ldi	r22, 0x02	; 2
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 250:	83 ef       	ldi	r24, 0xF3	; 243
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <LCD_voidInit+0x1e8>
 258:	00 c0       	rjmp	.+0      	; 0x25a <LCD_voidInit+0x1ee>
 25a:	00 00       	nop
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	62 e0       	ldi	r22, 0x02	; 2
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	63 e0       	ldi	r22, 0x03	; 3
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	62 e0       	ldi	r22, 0x02	; 2
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 28e:	83 ef       	ldi	r24, 0xF3	; 243
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_voidInit+0x226>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_voidInit+0x22c>
 298:	00 00       	nop
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	62 e0       	ldi	r22, 0x02	; 2
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 2a4:	83 ef       	ldi	r24, 0xF3	; 243
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LCD_voidInit+0x23c>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <LCD_voidInit+0x242>
 2ae:	00 00       	nop
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	62 e0       	ldi	r22, 0x02	; 2
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	63 e0       	ldi	r22, 0x03	; 3
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 2d8:	41 e0       	ldi	r20, 0x01	; 1
 2da:	62 e0       	ldi	r22, 0x02	; 2
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 2e2:	83 ef       	ldi	r24, 0xF3	; 243
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LCD_voidInit+0x27a>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <LCD_voidInit+0x280>
 2ec:	00 00       	nop
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	62 e0       	ldi	r22, 0x02	; 2
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 2f8:	83 ef       	ldi	r24, 0xF3	; 243
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCD_voidInit+0x290>
 300:	00 c0       	rjmp	.+0      	; 0x302 <LCD_voidInit+0x296>
 302:	00 00       	nop
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	62 e0       	ldi	r22, 0x02	; 2
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	63 e0       	ldi	r22, 0x03	; 3
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	62 e0       	ldi	r22, 0x02	; 2
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 336:	83 ef       	ldi	r24, 0xF3	; 243
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <LCD_voidInit+0x2ce>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <LCD_voidInit+0x2d4>
 340:	00 00       	nop
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	62 e0       	ldi	r22, 0x02	; 2
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 34c:	83 ef       	ldi	r24, 0xF3	; 243
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <LCD_voidInit+0x2e4>
 354:	00 c0       	rjmp	.+0      	; 0x356 <LCD_voidInit+0x2ea>
 356:	00 00       	nop
 358:	08 95       	ret

Disassembly of section .text.LCD_voidSendData:

0000053c <LCD_voidSendData>:
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
	_delay_ms(2);
}

void LCD_voidSendData(u8 Data)
{
 53c:	cf 93       	push	r28
 53e:	c8 2f       	mov	r28, r24
	/*Set RS pin to high for Data*/
	DIO_voidSetPinValue(CTRL_PORT,RS,PIN_HIGH);
 540:	41 e0       	ldi	r20, 0x01	; 1
 542:	63 e0       	ldi	r22, 0x03	; 3
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
	
	/*Send Data*/
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Data,4));
 54a:	c4 fb       	bst	r28, 4
 54c:	44 27       	eor	r20, r20
 54e:	40 f9       	bld	r20, 0
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Data,5));
 558:	c5 fb       	bst	r28, 5
 55a:	44 27       	eor	r20, r20
 55c:	40 f9       	bld	r20, 0
 55e:	61 e0       	ldi	r22, 0x01	; 1
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Data,6));
 566:	c6 fb       	bst	r28, 6
 568:	44 27       	eor	r20, r20
 56a:	40 f9       	bld	r20, 0
 56c:	62 e0       	ldi	r22, 0x02	; 2
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,GET_BIT(Data,7));
 574:	4c 2f       	mov	r20, r28
 576:	44 1f       	adc	r20, r20
 578:	44 27       	eor	r20, r20
 57a:	44 1f       	adc	r20, r20
 57c:	63 e0       	ldi	r22, 0x03	; 3
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 584:	41 e0       	ldi	r20, 0x01	; 1
 586:	62 e0       	ldi	r22, 0x02	; 2
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 58e:	89 ef       	ldi	r24, 0xF9	; 249
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	01 97       	sbiw	r24, 0x01	; 1
 594:	f1 f7       	brne	.-4      	; 0x592 <LCD_voidSendData+0x56>
 596:	00 c0       	rjmp	.+0      	; 0x598 <LCD_voidSendData+0x5c>
 598:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 59a:	40 e0       	ldi	r20, 0x00	; 0
 59c:	62 e0       	ldi	r22, 0x02	; 2
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 5a4:	89 ef       	ldi	r24, 0xF9	; 249
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <LCD_voidSendData+0x6c>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <LCD_voidSendData+0x72>
 5ae:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Data,0));
 5b0:	4c 2f       	mov	r20, r28
 5b2:	41 70       	andi	r20, 0x01	; 1
 5b4:	60 e0       	ldi	r22, 0x00	; 0
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Data,1));
 5bc:	c1 fb       	bst	r28, 1
 5be:	44 27       	eor	r20, r20
 5c0:	40 f9       	bld	r20, 0
 5c2:	61 e0       	ldi	r22, 0x01	; 1
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Data,2));
 5ca:	c2 fb       	bst	r28, 2
 5cc:	44 27       	eor	r20, r20
 5ce:	40 f9       	bld	r20, 0
 5d0:	62 e0       	ldi	r22, 0x02	; 2
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,GET_BIT(Data,3));
 5d8:	c3 fb       	bst	r28, 3
 5da:	44 27       	eor	r20, r20
 5dc:	40 f9       	bld	r20, 0
 5de:	63 e0       	ldi	r22, 0x03	; 3
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 5e6:	41 e0       	ldi	r20, 0x01	; 1
 5e8:	62 e0       	ldi	r22, 0x02	; 2
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 5f0:	89 ef       	ldi	r24, 0xF9	; 249
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	f1 f7       	brne	.-4      	; 0x5f4 <LCD_voidSendData+0xb8>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <LCD_voidSendData+0xbe>
 5fa:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 5fc:	40 e0       	ldi	r20, 0x00	; 0
 5fe:	62 e0       	ldi	r22, 0x02	; 2
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 606:	89 ef       	ldi	r24, 0xF9	; 249
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	f1 f7       	brne	.-4      	; 0x60a <LCD_voidSendData+0xce>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <LCD_voidSendData+0xd4>
 610:	00 00       	nop
	_delay_ms(1);
}
 612:	cf 91       	pop	r28
 614:	08 95       	ret

Disassembly of section .text.LCD_voidGoToXY:

0000035a <LCD_voidGoToXY>:
		Counter++;
	}
}

void LCD_voidGoToXY(u8 X_Pos, u8 Y_Pos)
{
 35a:	cf 93       	push	r28
	u8 Address=0;
	/*Location at First line*/
	if(X_Pos==0)
 35c:	81 11       	cpse	r24, r1
 35e:	03 c0       	rjmp	.+6      	; 0x366 <LCD_voidGoToXY+0xc>
	{
		Address = Y_Pos + 0x80;
 360:	c0 e8       	ldi	r28, 0x80	; 128
 362:	c6 0f       	add	r28, r22
 364:	10 c0       	rjmp	.+32     	; 0x386 <LCD_voidGoToXY+0x2c>
	}
	/*Location at Second line*/
	else if(X_Pos==1)
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	19 f4       	brne	.+6      	; 0x370 <LCD_voidGoToXY+0x16>
	{
		Address = Y_Pos + 0xC0;
 36a:	c0 ec       	ldi	r28, 0xC0	; 192
 36c:	c6 0f       	add	r28, r22
 36e:	0b c0       	rjmp	.+22     	; 0x386 <LCD_voidGoToXY+0x2c>
	}
	/*Location at third line*/
	else if(X_Pos==2)
 370:	82 30       	cpi	r24, 0x02	; 2
 372:	19 f4       	brne	.+6      	; 0x37a <LCD_voidGoToXY+0x20>
	{
		Address = Y_Pos + 0x94;
 374:	c4 e9       	ldi	r28, 0x94	; 148
 376:	c6 0f       	add	r28, r22
 378:	06 c0       	rjmp	.+12     	; 0x386 <LCD_voidGoToXY+0x2c>
	}
	/*Location at fourth line*/
	else if(X_Pos==3)
 37a:	83 30       	cpi	r24, 0x03	; 3
 37c:	19 f4       	brne	.+6      	; 0x384 <LCD_voidGoToXY+0x2a>
	{
		Address = Y_Pos + 0xd4;
 37e:	c4 ed       	ldi	r28, 0xD4	; 212
 380:	c6 0f       	add	r28, r22
 382:	01 c0       	rjmp	.+2      	; 0x386 <LCD_voidGoToXY+0x2c>
	}
}

void LCD_voidGoToXY(u8 X_Pos, u8 Y_Pos)
{
	u8 Address=0;
 384:	c0 e0       	ldi	r28, 0x00	; 0
	}
	
	///Set DDRAM Address Command////
	
	/*Set RS pin to low for command*/
	DIO_voidSetPinValue(CTRL_PORT,RS,PIN_LOW);
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	63 e0       	ldi	r22, 0x03	; 3
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
	
	/*Send Address to Data pins*/
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Address,4));
 390:	c4 fb       	bst	r28, 4
 392:	44 27       	eor	r20, r20
 394:	40 f9       	bld	r20, 0
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Address,5));
 39e:	c5 fb       	bst	r28, 5
 3a0:	44 27       	eor	r20, r20
 3a2:	40 f9       	bld	r20, 0
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Address,6));
 3ac:	c6 fb       	bst	r28, 6
 3ae:	44 27       	eor	r20, r20
 3b0:	40 f9       	bld	r20, 0
 3b2:	62 e0       	ldi	r22, 0x02	; 2
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
	/*Set D7 high*/
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_HIGH);
 3ba:	41 e0       	ldi	r20, 0x01	; 1
 3bc:	63 e0       	ldi	r22, 0x03	; 3
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	62 e0       	ldi	r22, 0x02	; 2
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 3ce:	89 ef       	ldi	r24, 0xF9	; 249
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <LCD_voidGoToXY+0x78>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <LCD_voidGoToXY+0x7e>
 3d8:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	62 e0       	ldi	r22, 0x02	; 2
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 3e4:	89 ef       	ldi	r24, 0xF9	; 249
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <LCD_voidGoToXY+0x8e>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <LCD_voidGoToXY+0x94>
 3ee:	00 00       	nop
	_delay_ms(1);
	
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Address,0));
 3f0:	4c 2f       	mov	r20, r28
 3f2:	41 70       	andi	r20, 0x01	; 1
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Address,1));
 3fc:	c1 fb       	bst	r28, 1
 3fe:	44 27       	eor	r20, r20
 400:	40 f9       	bld	r20, 0
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Address,2));
 40a:	c2 fb       	bst	r28, 2
 40c:	44 27       	eor	r20, r20
 40e:	40 f9       	bld	r20, 0
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,GET_BIT(Address,3));
 418:	c3 fb       	bst	r28, 3
 41a:	44 27       	eor	r20, r20
 41c:	40 f9       	bld	r20, 0
 41e:	63 e0       	ldi	r22, 0x03	; 3
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 426:	41 e0       	ldi	r20, 0x01	; 1
 428:	62 e0       	ldi	r22, 0x02	; 2
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 430:	89 ef       	ldi	r24, 0xF9	; 249
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 43a:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	62 e0       	ldi	r22, 0x02	; 2
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	0e 94 2b 02 	call	0x456	; 0x456 <DIO_voidSetPinValue>
 446:	89 ef       	ldi	r24, 0xF9	; 249
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 450:	00 00       	nop
	_delay_ms(1);
}
 452:	cf 91       	pop	r28
 454:	08 95       	ret

Disassembly of section .text.LCD_voidWriteNumber:

00000616 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u8 Number)
{
 616:	1f 93       	push	r17
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	00 d0       	rcall	.+0      	; 0x61e <LCD_voidWriteNumber+0x8>
 61e:	00 d0       	rcall	.+0      	; 0x620 <LCD_voidWriteNumber+0xa>
 620:	cd b7       	in	r28, 0x3d	; 61
 622:	de b7       	in	r29, 0x3e	; 62
	u16 temp;
	u8 Idx,Arr[SIZE_ARRAY_NUMBERS],Counter=0;
	if(Number==0)
 624:	81 11       	cpse	r24, r1
 626:	1f c0       	rjmp	.+62     	; 0x666 <LCD_voidWriteNumber+0x50>
	{
		LCD_voidSendData('0');
 628:	80 e3       	ldi	r24, 0x30	; 48
 62a:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_voidSendData>
 62e:	2f c0       	rjmp	.+94     	; 0x68e <LCD_voidWriteNumber+0x78>
	}
	else
	{
	while(Number!=0)
	{
		temp = Number%10;
 630:	2d ec       	ldi	r18, 0xCD	; 205
 632:	82 9f       	mul	r24, r18
 634:	21 2d       	mov	r18, r1
 636:	11 24       	eor	r1, r1
 638:	92 2f       	mov	r25, r18
 63a:	96 95       	lsr	r25
 63c:	96 95       	lsr	r25
 63e:	96 95       	lsr	r25
 640:	99 0f       	add	r25, r25
 642:	39 2f       	mov	r19, r25
 644:	33 0f       	add	r19, r19
 646:	33 0f       	add	r19, r19
 648:	93 0f       	add	r25, r19
 64a:	89 1b       	sub	r24, r25
		Arr[Counter] = temp;
 64c:	e1 e0       	ldi	r30, 0x01	; 1
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	ec 0f       	add	r30, r28
 652:	fd 1f       	adc	r31, r29
 654:	e1 0f       	add	r30, r17
 656:	f1 1d       	adc	r31, r1
 658:	80 83       	st	Z, r24
		Number/=10;
 65a:	82 2f       	mov	r24, r18
 65c:	86 95       	lsr	r24
 65e:	86 95       	lsr	r24
 660:	86 95       	lsr	r24
		Counter++;
 662:	1f 5f       	subi	r17, 0xFF	; 255
 664:	01 c0       	rjmp	.+2      	; 0x668 <LCD_voidWriteNumber+0x52>
 666:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCD_voidSendData('0');
	}
	else
	{
	while(Number!=0)
 668:	81 11       	cpse	r24, r1
 66a:	e2 cf       	rjmp	.-60     	; 0x630 <LCD_voidWriteNumber+0x1a>
 66c:	0e c0       	rjmp	.+28     	; 0x68a <LCD_voidWriteNumber+0x74>
		Counter++;
	}
	
			for(Idx=Counter; Idx>0;Idx--)
			{
				LCD_voidSendData(Arr[Idx-1] + 48);//+ 48 for  represented integer for characters.
 66e:	e1 2f       	mov	r30, r17
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	31 97       	sbiw	r30, 0x01	; 1
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	8c 0f       	add	r24, r28
 67a:	9d 1f       	adc	r25, r29
 67c:	e8 0f       	add	r30, r24
 67e:	f9 1f       	adc	r31, r25
 680:	80 81       	ld	r24, Z
 682:	80 5d       	subi	r24, 0xD0	; 208
 684:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_voidSendData>
		Arr[Counter] = temp;
		Number/=10;
		Counter++;
	}
	
			for(Idx=Counter; Idx>0;Idx--)
 688:	11 50       	subi	r17, 0x01	; 1
 68a:	11 11       	cpse	r17, r1
 68c:	f0 cf       	rjmp	.-32     	; 0x66e <LCD_voidWriteNumber+0x58>
			{
				LCD_voidSendData(Arr[Idx-1] + 48);//+ 48 for  represented integer for characters.
			}
	}	
}
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	0f 90       	pop	r0
 694:	0f 90       	pop	r0
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	1f 91       	pop	r17
 69c:	08 95       	ret

Disassembly of section .text.main:

0000069e <main>:
#include "DIO_config.h"
#include "LCD_interface.h"
#include "util/delay.h"

void main(void)
{	
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	0f 92       	push	r0
 6a4:	cd b7       	in	r28, 0x3d	; 61
 6a6:	de b7       	in	r29, 0x3e	; 62
	u8 Return_Data = 0;
 6a8:	19 82       	std	Y+1, r1	; 0x01
	I2C_voidMasterInit(0);
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	0e 94 f5 03 	call	0x7ea	; 0x7ea <I2C_voidMasterInit>
	DIO_VoidInit();
 6b0:	0e 94 47 04 	call	0x88e	; 0x88e <DIO_VoidInit>
	LCD_voidInit();
 6b4:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>

	EEPROM_u8SendData(0 , 0X55);
 6b8:	65 e5       	ldi	r22, 0x55	; 85
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 9b 03 	call	0x736	; 0x736 <EEPROM_u8SendData>
 6c2:	8f e1       	ldi	r24, 0x1F	; 31
 6c4:	9e e4       	ldi	r25, 0x4E	; 78
 6c6:	01 97       	sbiw	r24, 0x01	; 1
 6c8:	f1 f7       	brne	.-4      	; 0x6c6 <main+0x28>
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <main+0x2e>
 6cc:	00 00       	nop
	_delay_ms(10);	
	EEPROM_u8ReadData(0 , &Return_Data);
 6ce:	be 01       	movw	r22, r28
 6d0:	6f 5f       	subi	r22, 0xFF	; 255
 6d2:	7f 4f       	sbci	r23, 0xFF	; 255
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <EEPROM_u8ReadData>
	LCD_voidGoToXY(0,0);
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_voidGoToXY>
	LCD_voidWriteNumber(Return_Data);
 6e4:	89 81       	ldd	r24, Y+1	; 0x01
 6e6:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidWriteNumber>
	DIO_voidSetPortValue(DIO_PORTD,Return_Data);
 6ea:	69 81       	ldd	r22, Y+1	; 0x01
 6ec:	83 e0       	ldi	r24, 0x03	; 3
 6ee:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPortValue>
 6f2:	ff cf       	rjmp	.-2      	; 0x6f2 <main+0x54>

Disassembly of section .text.__dummy_fini:

000008d4 <_fini>:
 8d4:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000008d6 <__funcs_on_exit>:
 8d6:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000008d8 <__simulator_exit>:
 8d8:	08 95       	ret

Disassembly of section .text.exit:

000008a8 <exit>:
 8a8:	ec 01       	movw	r28, r24
 8aa:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__funcs_on_exit>
 8ae:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <_fini>
 8b2:	ce 01       	movw	r24, r28
 8b4:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__simulator_exit>
 8b8:	ce 01       	movw	r24, r28
 8ba:	0e 94 68 04 	call	0x8d0	; 0x8d0 <_Exit>

Disassembly of section .text._Exit:

000008d0 <_Exit>:
 8d0:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
