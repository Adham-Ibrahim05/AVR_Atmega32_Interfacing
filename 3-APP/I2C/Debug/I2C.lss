
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000086c  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000089b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  000008a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002df1  00000000  00000000  000009c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090d  00000000  00000000  000037b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d5d  00000000  00000000  000040bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000224  00000000  00000000  00004e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000286  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012f7  00000000  00000000  000052c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  000065bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000007ea  000007ea  0000085e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006698  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.DIO_VoidInit 0000001a  000007ac  000007ac  00000820  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.DIO_voidSetPinValue 000000e6  00000476  00000476  000004ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.I2C_voidMasterInit 00000022  0000074a  0000074a  000007be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.I2C_u8SendStartCondition 00000022  0000076c  0000076c  000007e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.I2C_u8SendStopCondition 0000000e  000007dc  000007dc  00000850  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.I2C_u8SendSlaveAddressWithWrite 0000002c  0000071e  0000071e  00000792  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.I2C_u8MasterWriteDataByte 0000001e  0000078e  0000078e  00000802  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data 00000020  0000006c  0000006c  000000e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .text.main    000000b2  00000636  00000636  000006aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCD_voidInit 000002ee  0000008c  0000008c  00000100  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.LCD_voidSendData 000000da  0000055c  0000055c  000005d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.LCD_voidSendString 00000036  000006e8  000006e8  0000075c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.LCD_voidGoToXY 000000fc  0000037a  0000037a  000003ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_fini 00000002  000007f2  000007f2  00000866  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_funcs_on_exit 00000002  000007f4  000007f4  00000868  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_simulator_exit 00000002  000007f6  000007f6  0000086a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.exit    00000016  000007c6  000007c6  0000083a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text._Exit   00000004  000007ee  000007ee  00000862  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>
   8:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>
   c:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>
  10:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>
  14:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>
  18:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>
  1c:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>
  20:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>
  24:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>
  28:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>
  2c:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>
  30:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>
  34:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>
  38:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>
  3c:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>
  40:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>
  44:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>
  48:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>
  4c:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>
  50:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 1b 03 	call	0x636	; 0x636 <main>
  64:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000007ea <__bad_interrupt>:
 7ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.DIO_VoidInit:

000007ac <DIO_VoidInit>:
#include "DIO_register.h"
#include "DIO_private.h"

void DIO_VoidInit(void)
{
	DDRA = PORTA_DIR;
 7ac:	8c e0       	ldi	r24, 0x0C	; 12
 7ae:	8a bb       	out	0x1a, r24	; 26
	DDRB = PORTB_DIR;
 7b0:	8f e0       	ldi	r24, 0x0F	; 15
 7b2:	87 bb       	out	0x17, r24	; 23
	DDRC = PORTC_DIR;
 7b4:	83 e0       	ldi	r24, 0x03	; 3
 7b6:	84 bb       	out	0x14, r24	; 20
	DDRD = PORTD_DIR;
 7b8:	11 ba       	out	0x11, r1	; 17
	
	PORTA = PORTA_INITIAL_VALUE;
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	8b bb       	out	0x1b, r24	; 27
	PORTB = PORTB_INITIAL_VALUE;
 7be:	18 ba       	out	0x18, r1	; 24
	PORTC = PORTC_INITIAL_VALUE;
 7c0:	15 ba       	out	0x15, r1	; 21
	PORTD = PORTD_INITIAL_VALUE;
 7c2:	12 ba       	out	0x12, r1	; 18
 7c4:	08 95       	ret

Disassembly of section .text.DIO_voidSetPinValue:

00000476 <DIO_voidSetPinValue>:
}


void DIO_voidSetPinValue(u8 PORT_ID,u8 PIN_ID,u8 Value)
{
	if(PIN_ID <= DIO_PIN7)
 476:	68 30       	cpi	r22, 0x08	; 8
 478:	08 f0       	brcs	.+2      	; 0x47c <DIO_voidSetPinValue+0x6>
 47a:	6f c0       	rjmp	.+222    	; 0x55a <DIO_voidSetPinValue+0xe4>
	{
		if(Value == PIN_LOW)
 47c:	41 11       	cpse	r20, r1
 47e:	38 c0       	rjmp	.+112    	; 0x4f0 <DIO_voidSetPinValue+0x7a>
		{
			switch(PORT_ID)
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	91 f0       	breq	.+36     	; 0x4a8 <DIO_voidSetPinValue+0x32>
 484:	28 f0       	brcs	.+10     	; 0x490 <DIO_voidSetPinValue+0x1a>
 486:	82 30       	cpi	r24, 0x02	; 2
 488:	d9 f0       	breq	.+54     	; 0x4c0 <DIO_voidSetPinValue+0x4a>
 48a:	83 30       	cpi	r24, 0x03	; 3
 48c:	29 f1       	breq	.+74     	; 0x4d8 <DIO_voidSetPinValue+0x62>
 48e:	08 95       	ret
			{
				case DIO_PORTA: CLR_BIT(PORTA,PIN_ID);break;
 490:	2b b3       	in	r18, 0x1b	; 27
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <DIO_voidSetPinValue+0x26>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	6a 95       	dec	r22
 49e:	e2 f7       	brpl	.-8      	; 0x498 <DIO_voidSetPinValue+0x22>
 4a0:	80 95       	com	r24
 4a2:	82 23       	and	r24, r18
 4a4:	8b bb       	out	0x1b, r24	; 27
 4a6:	08 95       	ret
				case DIO_PORTB: CLR_BIT(PORTB,PIN_ID);break;
 4a8:	28 b3       	in	r18, 0x18	; 24
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_voidSetPinValue+0x3e>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_voidSetPinValue+0x3a>
 4b8:	80 95       	com	r24
 4ba:	82 23       	and	r24, r18
 4bc:	88 bb       	out	0x18, r24	; 24
 4be:	08 95       	ret
				case DIO_PORTC: CLR_BIT(PORTC,PIN_ID);break;
 4c0:	25 b3       	in	r18, 0x15	; 21
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_voidSetPinValue+0x56>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	6a 95       	dec	r22
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_voidSetPinValue+0x52>
 4d0:	80 95       	com	r24
 4d2:	82 23       	and	r24, r18
 4d4:	85 bb       	out	0x15, r24	; 21
 4d6:	08 95       	ret
				case DIO_PORTD: CLR_BIT(PORTD,PIN_ID);break;
 4d8:	22 b3       	in	r18, 0x12	; 18
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <DIO_voidSetPinValue+0x6e>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	6a 95       	dec	r22
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <DIO_voidSetPinValue+0x6a>
 4e8:	80 95       	com	r24
 4ea:	82 23       	and	r24, r18
 4ec:	82 bb       	out	0x12, r24	; 18
 4ee:	08 95       	ret
			}
		}
		else if(Value == PIN_HIGH)
 4f0:	41 30       	cpi	r20, 0x01	; 1
 4f2:	99 f5       	brne	.+102    	; 0x55a <DIO_voidSetPinValue+0xe4>
		{
			switch(PORT_ID)
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	89 f0       	breq	.+34     	; 0x51a <DIO_voidSetPinValue+0xa4>
 4f8:	28 f0       	brcs	.+10     	; 0x504 <DIO_voidSetPinValue+0x8e>
 4fa:	82 30       	cpi	r24, 0x02	; 2
 4fc:	c9 f0       	breq	.+50     	; 0x530 <DIO_voidSetPinValue+0xba>
 4fe:	83 30       	cpi	r24, 0x03	; 3
 500:	11 f1       	breq	.+68     	; 0x546 <DIO_voidSetPinValue+0xd0>
 502:	08 95       	ret
			{
				case DIO_PORTA: SET_BIT(PORTA,PIN_ID);break;
 504:	2b b3       	in	r18, 0x1b	; 27
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	02 c0       	rjmp	.+4      	; 0x510 <DIO_voidSetPinValue+0x9a>
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	6a 95       	dec	r22
 512:	e2 f7       	brpl	.-8      	; 0x50c <DIO_voidSetPinValue+0x96>
 514:	82 2b       	or	r24, r18
 516:	8b bb       	out	0x1b, r24	; 27
 518:	08 95       	ret
				case DIO_PORTB: SET_BIT(PORTB,PIN_ID);break;
 51a:	28 b3       	in	r18, 0x18	; 24
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_voidSetPinValue+0xb0>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	6a 95       	dec	r22
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_voidSetPinValue+0xac>
 52a:	82 2b       	or	r24, r18
 52c:	88 bb       	out	0x18, r24	; 24
 52e:	08 95       	ret
				case DIO_PORTC: SET_BIT(PORTC,PIN_ID);break;
 530:	25 b3       	in	r18, 0x15	; 21
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_voidSetPinValue+0xc6>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	6a 95       	dec	r22
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_voidSetPinValue+0xc2>
 540:	82 2b       	or	r24, r18
 542:	85 bb       	out	0x15, r24	; 21
 544:	08 95       	ret
				case DIO_PORTD: SET_BIT(PORTD,PIN_ID);break;
 546:	22 b3       	in	r18, 0x12	; 18
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_voidSetPinValue+0xdc>
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	6a 95       	dec	r22
 554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_voidSetPinValue+0xd8>
 556:	82 2b       	or	r24, r18
 558:	82 bb       	out	0x12, r24	; 18
 55a:	08 95       	ret

Disassembly of section .text.I2C_voidMasterInit:

0000074a <I2C_voidMasterInit>:
	}
	else
	{/*Do Nothing*/}
	
	return Local_State_Error;
}
 74a:	92 e0       	ldi	r25, 0x02	; 2
 74c:	90 b9       	out	0x00, r25	; 0
 74e:	91 b1       	in	r25, 0x01	; 1
 750:	9e 7f       	andi	r25, 0xFE	; 254
 752:	91 b9       	out	0x01, r25	; 1
 754:	91 b1       	in	r25, 0x01	; 1
 756:	9d 7f       	andi	r25, 0xFD	; 253
 758:	91 b9       	out	0x01, r25	; 1
 75a:	88 0f       	add	r24, r24
 75c:	82 b9       	out	0x02, r24	; 2
 75e:	86 b7       	in	r24, 0x36	; 54
 760:	84 60       	ori	r24, 0x04	; 4
 762:	86 bf       	out	0x36, r24	; 54
 764:	86 b7       	in	r24, 0x36	; 54
 766:	80 64       	ori	r24, 0x40	; 64
 768:	86 bf       	out	0x36, r24	; 54
 76a:	08 95       	ret

Disassembly of section .text.I2C_u8SendStartCondition:

0000076c <I2C_u8SendStartCondition>:
 76c:	86 b7       	in	r24, 0x36	; 54
 76e:	80 62       	ori	r24, 0x20	; 32
 770:	86 bf       	out	0x36, r24	; 54
 772:	86 b7       	in	r24, 0x36	; 54
 774:	80 68       	ori	r24, 0x80	; 128
 776:	86 bf       	out	0x36, r24	; 54
 778:	06 b6       	in	r0, 0x36	; 54
 77a:	07 fe       	sbrs	r0, 7
 77c:	fd cf       	rjmp	.-6      	; 0x778 <I2C_u8SendStartCondition+0xc>
 77e:	81 b1       	in	r24, 0x01	; 1
 780:	88 7f       	andi	r24, 0xF8	; 248
 782:	88 30       	cpi	r24, 0x08	; 8
 784:	11 f4       	brne	.+4      	; 0x78a <I2C_u8SendStartCondition+0x1e>
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	08 95       	ret
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	08 95       	ret

Disassembly of section .text.I2C_u8SendStopCondition:

000007dc <I2C_u8SendStopCondition>:
}

void I2C_u8SendStopCondition(void)
{
	/*Enable Stop Bit*/
	SET_BIT(TWCR,TWCR_TWSTO);
 7dc:	86 b7       	in	r24, 0x36	; 54
 7de:	80 61       	ori	r24, 0x10	; 16
 7e0:	86 bf       	out	0x36, r24	; 54
	/*Clear flag to do the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
 7e2:	86 b7       	in	r24, 0x36	; 54
 7e4:	80 68       	ori	r24, 0x80	; 128
 7e6:	86 bf       	out	0x36, r24	; 54
 7e8:	08 95       	ret

Disassembly of section .text.I2C_u8SendSlaveAddressWithWrite:

0000071e <I2C_u8SendSlaveAddressWithWrite>:
	}
	else
	{/*Do Nothing*/}
	
	return Local_State_Error;
}
 71e:	88 0f       	add	r24, r24
 720:	83 b9       	out	0x03, r24	; 3
 722:	83 b1       	in	r24, 0x03	; 3
 724:	8e 7f       	andi	r24, 0xFE	; 254
 726:	83 b9       	out	0x03, r24	; 3
 728:	86 b7       	in	r24, 0x36	; 54
 72a:	8f 7d       	andi	r24, 0xDF	; 223
 72c:	86 bf       	out	0x36, r24	; 54
 72e:	86 b7       	in	r24, 0x36	; 54
 730:	80 68       	ori	r24, 0x80	; 128
 732:	86 bf       	out	0x36, r24	; 54
 734:	06 b6       	in	r0, 0x36	; 54
 736:	07 fe       	sbrs	r0, 7
 738:	fd cf       	rjmp	.-6      	; 0x734 <I2C_u8SendSlaveAddressWithWrite+0x16>
 73a:	81 b1       	in	r24, 0x01	; 1
 73c:	88 7f       	andi	r24, 0xF8	; 248
 73e:	88 31       	cpi	r24, 0x18	; 24
 740:	11 f4       	brne	.+4      	; 0x746 <I2C_u8SendSlaveAddressWithWrite+0x28>
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	08 95       	ret
 746:	83 e0       	ldi	r24, 0x03	; 3
 748:	08 95       	ret

Disassembly of section .text.I2C_u8MasterWriteDataByte:

0000078e <I2C_u8MasterWriteDataByte>:
Error_Status I2C_u8MasterWriteDataByte(u8 Data)
{
	Error_Status Local_State_Error = NoError;
	
	/*Write Data Byte*/
	TWDR = Data;
 78e:	83 b9       	out	0x03, r24	; 3
	
	/*Clear flag to do the previous operation */
	SET_BIT(TWCR,TWCR_TWINT);
 790:	86 b7       	in	r24, 0x36	; 54
 792:	80 68       	ori	r24, 0x80	; 128
 794:	86 bf       	out	0x36, r24	; 54
	
	/*Wait for flag to be set and the previous operation finished*/
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
 796:	06 b6       	in	r0, 0x36	; 54
 798:	07 fe       	sbrs	r0, 7
 79a:	fd cf       	rjmp	.-6      	; 0x796 <I2C_u8MasterWriteDataByte+0x8>
	
	/*Check if there is no error in operation*/
	if ((TWSR & 0XF8) !=MSTR_WR_BYTE_ACK)
 79c:	81 b1       	in	r24, 0x01	; 1
 79e:	88 7f       	andi	r24, 0xF8	; 248
 7a0:	88 32       	cpi	r24, 0x28	; 40
 7a2:	11 f4       	brne	.+4      	; 0x7a8 <I2C_u8MasterWriteDataByte+0x1a>
	return Local_State_Error;
}

Error_Status I2C_u8MasterWriteDataByte(u8 Data)
{
	Error_Status Local_State_Error = NoError;
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	08 95       	ret
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
	
	/*Check if there is no error in operation*/
	if ((TWSR & 0XF8) !=MSTR_WR_BYTE_ACK)
	{
		Local_State_Error = MasterWriteByteErr;
 7a8:	85 e0       	ldi	r24, 0x05	; 5
	}
	else
	{/*Do Nothing*/}
	
	return Local_State_Error;
}
 7aa:	08 95       	ret

Disassembly of section .text.main:

00000636 <main>:
#include "util/delay.h"

void main()
{	
	Error_Status Error=NoError;
	DIO_VoidInit();
 636:	0e 94 d6 03 	call	0x7ac	; 0x7ac <DIO_VoidInit>
	LCD_voidInit();
 63a:	0e 94 46 00 	call	0x8c	; 0x8c <LCD_voidInit>
	I2C_voidMasterInit(0);
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	0e 94 a5 03 	call	0x74a	; 0x74a <I2C_voidMasterInit>
	
	Error =I2C_u8SendStartCondition();
 644:	0e 94 b6 03 	call	0x76c	; 0x76c <I2C_u8SendStartCondition>
	if (Error == NoError)
 648:	81 11       	cpse	r24, r1
 64a:	11 c0       	rjmp	.+34     	; 0x66e <main+0x38>
	{
		LCD_voidGoToXY(0,0);
 64c:	60 e0       	ldi	r22, 0x00	; 0
 64e:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_voidGoToXY>
		LCD_voidSendString("Start OK");
 652:	6c e6       	ldi	r22, 0x6C	; 108
 654:	70 e0       	ldi	r23, 0x00	; 0
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_voidSendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 65c:	2f ef       	ldi	r18, 0xFF	; 255
 65e:	89 e6       	ldi	r24, 0x69	; 105
 660:	98 e1       	ldi	r25, 0x18	; 24
 662:	21 50       	subi	r18, 0x01	; 1
 664:	80 40       	sbci	r24, 0x00	; 0
 666:	90 40       	sbci	r25, 0x00	; 0
 668:	e1 f7       	brne	.-8      	; 0x662 <main+0x2c>
 66a:	00 c0       	rjmp	.+0      	; 0x66c <main+0x36>
 66c:	00 00       	nop
		_delay_ms(1000);
	}
	
	Error=I2C_u8SendSlaveAddressWithWrite(2);
 66e:	82 e0       	ldi	r24, 0x02	; 2
 670:	0e 94 8f 03 	call	0x71e	; 0x71e <I2C_u8SendSlaveAddressWithWrite>
 674:	c8 2f       	mov	r28, r24
	if (Error == NoError)
 676:	81 11       	cpse	r24, r1
 678:	12 c0       	rjmp	.+36     	; 0x69e <main+0x68>
	{
		LCD_voidGoToXY(1,0);
 67a:	60 e0       	ldi	r22, 0x00	; 0
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_voidGoToXY>
		LCD_voidSendString("SLA OK");
 682:	65 e7       	ldi	r22, 0x75	; 117
 684:	70 e0       	ldi	r23, 0x00	; 0
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_voidSendString>
 68c:	2f ef       	ldi	r18, 0xFF	; 255
 68e:	84 e3       	ldi	r24, 0x34	; 52
 690:	9c e0       	ldi	r25, 0x0C	; 12
 692:	21 50       	subi	r18, 0x01	; 1
 694:	80 40       	sbci	r24, 0x00	; 0
 696:	90 40       	sbci	r25, 0x00	; 0
 698:	e1 f7       	brne	.-8      	; 0x692 <main+0x5c>
 69a:	00 c0       	rjmp	.+0      	; 0x69c <main+0x66>
 69c:	00 00       	nop
		_delay_ms(500);
	}
	
	if((Error==NoError) && (GET_BIT(PINA,DIO_PIN0)==0))
 69e:	c1 11       	cpse	r28, r1
 6a0:	17 c0       	rjmp	.+46     	; 0x6d0 <main+0x9a>
 6a2:	c8 99       	sbic	0x19, 0	; 25
 6a4:	15 c0       	rjmp	.+42     	; 0x6d0 <main+0x9a>
	{
		Error=I2C_u8MasterWriteDataByte(5);
 6a6:	85 e0       	ldi	r24, 0x05	; 5
 6a8:	0e 94 c7 03 	call	0x78e	; 0x78e <I2C_u8MasterWriteDataByte>
		LCD_voidGoToXY(2,0);
 6ac:	60 e0       	ldi	r22, 0x00	; 0
 6ae:	82 e0       	ldi	r24, 0x02	; 2
 6b0:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_voidGoToXY>
		LCD_voidSendString("Data OK");
 6b4:	6c e7       	ldi	r22, 0x7C	; 124
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_voidSendString>
 6be:	2f ef       	ldi	r18, 0xFF	; 255
 6c0:	84 e3       	ldi	r24, 0x34	; 52
 6c2:	9c e0       	ldi	r25, 0x0C	; 12
 6c4:	21 50       	subi	r18, 0x01	; 1
 6c6:	80 40       	sbci	r24, 0x00	; 0
 6c8:	90 40       	sbci	r25, 0x00	; 0
 6ca:	e1 f7       	brne	.-8      	; 0x6c4 <main+0x8e>
 6cc:	00 c0       	rjmp	.+0      	; 0x6ce <main+0x98>
 6ce:	00 00       	nop
		_delay_ms(500);
	}
	
	I2C_u8SendStopCondition();
 6d0:	0e 94 ee 03 	call	0x7dc	; 0x7dc <I2C_u8SendStopCondition>
	LCD_voidGoToXY(3,0);
 6d4:	60 e0       	ldi	r22, 0x00	; 0
 6d6:	83 e0       	ldi	r24, 0x03	; 3
 6d8:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_voidGoToXY>
	LCD_voidSendString("Stop OK");
 6dc:	64 e8       	ldi	r22, 0x84	; 132
 6de:	70 e0       	ldi	r23, 0x00	; 0
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_voidSendString>
 6e6:	ff cf       	rjmp	.-2      	; 0x6e6 <main+0xb0>

Disassembly of section .text.LCD_voidInit:

0000008c <LCD_voidInit>:
  8c:	85 e4       	ldi	r24, 0x45	; 69
  8e:	9e e1       	ldi	r25, 0x1E	; 30
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <LCD_voidInit+0x4>
  94:	00 c0       	rjmp	.+0      	; 0x96 <LCD_voidInit+0xa>
  96:	00 00       	nop

void LCD_voidInit()
{
	_delay_ms(31);	
	/*1/Function Set*/
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_LOW);
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_HIGH);
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	62 e0       	ldi	r22, 0x02	; 2
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	63 e0       	ldi	r22, 0x03	; 3
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
  ca:	83 ef       	ldi	r24, 0xF3	; 243
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_voidInit+0x42>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_voidInit+0x48>
  d4:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	62 e0       	ldi	r22, 0x02	; 2
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
  e0:	83 ef       	ldi	r24, 0xF3	; 243
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_voidInit+0x58>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_voidInit+0x5e>
  ea:	00 00       	nop
	_delay_ms(2);
	
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_LOW);
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_HIGH);
  f6:	41 e0       	ldi	r20, 0x01	; 1
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	63 e0       	ldi	r22, 0x03	; 3
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 114:	41 e0       	ldi	r20, 0x01	; 1
 116:	62 e0       	ldi	r22, 0x02	; 2
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 11e:	83 ef       	ldi	r24, 0xF3	; 243
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_voidInit+0x96>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_voidInit+0x9c>
 128:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 134:	83 ef       	ldi	r24, 0xF3	; 243
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_voidInit+0xac>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_voidInit+0xb2>
 13e:	00 00       	nop
	_delay_ms(2);
	
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);// fONT 5*8
 140:	40 e0       	ldi	r20, 0x00	; 0
 142:	62 e0       	ldi	r22, 0x02	; 2
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_HIGH);// 2 lines
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	63 e0       	ldi	r22, 0x03	; 3
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,DIO_PIN2,PIN_HIGH);
 154:	41 e0       	ldi	r20, 0x01	; 1
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 15e:	83 ef       	ldi	r24, 0xF3	; 243
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_voidInit+0xd6>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_voidInit+0xdc>
 168:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,DIO_PIN2,PIN_LOW);
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	62 e0       	ldi	r22, 0x02	; 2
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 174:	83 ef       	ldi	r24, 0xF3	; 243
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_voidInit+0xec>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_voidInit+0xf2>
 17e:	00 00       	nop
	_delay_ms(2);
	
	/*2/Display on off control: display enable, disable cursor, no blink cursor*/
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_LOW);
 180:	40 e0       	ldi	r20, 0x00	; 0
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_LOW);
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	62 e0       	ldi	r22, 0x02	; 2
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	63 e0       	ldi	r22, 0x03	; 3
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	62 e0       	ldi	r22, 0x02	; 2
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 1b2:	83 ef       	ldi	r24, 0xF3	; 243
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_voidInit+0x12a>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_voidInit+0x130>
 1bc:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 1c8:	83 ef       	ldi	r24, 0xF3	; 243
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <LCD_voidInit+0x140>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <LCD_voidInit+0x146>
 1d2:	00 00       	nop
	_delay_ms(2);
	
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_LOW);
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_LOW);
 1de:	40 e0       	ldi	r20, 0x00	; 0
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_HIGH);
 1e8:	41 e0       	ldi	r20, 0x01	; 1
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_HIGH);
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	63 e0       	ldi	r22, 0x03	; 3
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 1fc:	41 e0       	ldi	r20, 0x01	; 1
 1fe:	62 e0       	ldi	r22, 0x02	; 2
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 206:	83 ef       	ldi	r24, 0xF3	; 243
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <LCD_voidInit+0x17e>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <LCD_voidInit+0x184>
 210:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	62 e0       	ldi	r22, 0x02	; 2
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 21c:	83 ef       	ldi	r24, 0xF3	; 243
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <LCD_voidInit+0x194>
 224:	00 c0       	rjmp	.+0      	; 0x226 <LCD_voidInit+0x19a>
 226:	00 00       	nop
	_delay_ms(2);
	
	/*3/Clear display*/
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_LOW);
 228:	40 e0       	ldi	r20, 0x00	; 0
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_LOW);
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	62 e0       	ldi	r22, 0x02	; 2
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	63 e0       	ldi	r22, 0x03	; 3
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 250:	41 e0       	ldi	r20, 0x01	; 1
 252:	62 e0       	ldi	r22, 0x02	; 2
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 25a:	83 ef       	ldi	r24, 0xF3	; 243
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <LCD_voidInit+0x1d2>
 262:	00 c0       	rjmp	.+0      	; 0x264 <LCD_voidInit+0x1d8>
 264:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	62 e0       	ldi	r22, 0x02	; 2
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 270:	83 ef       	ldi	r24, 0xF3	; 243
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <LCD_voidInit+0x1e8>
 278:	00 c0       	rjmp	.+0      	; 0x27a <LCD_voidInit+0x1ee>
 27a:	00 00       	nop
	_delay_ms(2);
	
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_HIGH);
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_LOW);
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	62 e0       	ldi	r22, 0x02	; 2
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	63 e0       	ldi	r22, 0x03	; 3
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	62 e0       	ldi	r22, 0x02	; 2
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 2ae:	83 ef       	ldi	r24, 0xF3	; 243
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCD_voidInit+0x226>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCD_voidInit+0x22c>
 2b8:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	62 e0       	ldi	r22, 0x02	; 2
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 2c4:	83 ef       	ldi	r24, 0xF3	; 243
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCD_voidInit+0x23c>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <LCD_voidInit+0x242>
 2ce:	00 00       	nop
	_delay_ms(2);

	/*4/Entry Mode*/
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_LOW);
 2d0:	40 e0       	ldi	r20, 0x00	; 0
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_LOW);
 2da:	40 e0       	ldi	r20, 0x00	; 0
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	62 e0       	ldi	r22, 0x02	; 2
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	63 e0       	ldi	r22, 0x03	; 3
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	62 e0       	ldi	r22, 0x02	; 2
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 302:	83 ef       	ldi	r24, 0xF3	; 243
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <LCD_voidInit+0x27a>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_voidInit+0x280>
 30c:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	62 e0       	ldi	r22, 0x02	; 2
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 318:	83 ef       	ldi	r24, 0xF3	; 243
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <LCD_voidInit+0x290>
 320:	00 c0       	rjmp	.+0      	; 0x322 <LCD_voidInit+0x296>
 322:	00 00       	nop
	_delay_ms(2);
	
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_HIGH);
 324:	41 e0       	ldi	r20, 0x01	; 1
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_HIGH);
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_HIGH);
 338:	41 e0       	ldi	r20, 0x01	; 1
 33a:	62 e0       	ldi	r22, 0x02	; 2
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	63 e0       	ldi	r22, 0x03	; 3
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 34c:	41 e0       	ldi	r20, 0x01	; 1
 34e:	62 e0       	ldi	r22, 0x02	; 2
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 356:	83 ef       	ldi	r24, 0xF3	; 243
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <LCD_voidInit+0x2ce>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <LCD_voidInit+0x2d4>
 360:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	62 e0       	ldi	r22, 0x02	; 2
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 36c:	83 ef       	ldi	r24, 0xF3	; 243
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <LCD_voidInit+0x2e4>
 374:	00 c0       	rjmp	.+0      	; 0x376 <LCD_voidInit+0x2ea>
 376:	00 00       	nop
 378:	08 95       	ret

Disassembly of section .text.LCD_voidSendData:

0000055c <LCD_voidSendData>:
	_delay_ms(2);
}

void LCD_voidSendData(u8 Data)
{
 55c:	cf 93       	push	r28
 55e:	c8 2f       	mov	r28, r24
	/*Set RS pin to high for Data*/
	DIO_voidSetPinValue(CTRL_PORT,RS,PIN_HIGH);
 560:	41 e0       	ldi	r20, 0x01	; 1
 562:	63 e0       	ldi	r22, 0x03	; 3
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	
	/*Send Data*/
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Data,4));
 56a:	c4 fb       	bst	r28, 4
 56c:	44 27       	eor	r20, r20
 56e:	40 f9       	bld	r20, 0
 570:	60 e0       	ldi	r22, 0x00	; 0
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Data,5));
 578:	c5 fb       	bst	r28, 5
 57a:	44 27       	eor	r20, r20
 57c:	40 f9       	bld	r20, 0
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Data,6));
 586:	c6 fb       	bst	r28, 6
 588:	44 27       	eor	r20, r20
 58a:	40 f9       	bld	r20, 0
 58c:	62 e0       	ldi	r22, 0x02	; 2
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,GET_BIT(Data,7));
 594:	4c 2f       	mov	r20, r28
 596:	44 1f       	adc	r20, r20
 598:	44 27       	eor	r20, r20
 59a:	44 1f       	adc	r20, r20
 59c:	63 e0       	ldi	r22, 0x03	; 3
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 5a4:	41 e0       	ldi	r20, 0x01	; 1
 5a6:	62 e0       	ldi	r22, 0x02	; 2
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 5ae:	89 ef       	ldi	r24, 0xF9	; 249
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	01 97       	sbiw	r24, 0x01	; 1
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <LCD_voidSendData+0x56>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <LCD_voidSendData+0x5c>
 5b8:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 5ba:	40 e0       	ldi	r20, 0x00	; 0
 5bc:	62 e0       	ldi	r22, 0x02	; 2
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 5c4:	89 ef       	ldi	r24, 0xF9	; 249
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	01 97       	sbiw	r24, 0x01	; 1
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <LCD_voidSendData+0x6c>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <LCD_voidSendData+0x72>
 5ce:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Data,0));
 5d0:	4c 2f       	mov	r20, r28
 5d2:	41 70       	andi	r20, 0x01	; 1
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Data,1));
 5dc:	c1 fb       	bst	r28, 1
 5de:	44 27       	eor	r20, r20
 5e0:	40 f9       	bld	r20, 0
 5e2:	61 e0       	ldi	r22, 0x01	; 1
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Data,2));
 5ea:	c2 fb       	bst	r28, 2
 5ec:	44 27       	eor	r20, r20
 5ee:	40 f9       	bld	r20, 0
 5f0:	62 e0       	ldi	r22, 0x02	; 2
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,GET_BIT(Data,3));
 5f8:	c3 fb       	bst	r28, 3
 5fa:	44 27       	eor	r20, r20
 5fc:	40 f9       	bld	r20, 0
 5fe:	63 e0       	ldi	r22, 0x03	; 3
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 606:	41 e0       	ldi	r20, 0x01	; 1
 608:	62 e0       	ldi	r22, 0x02	; 2
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 610:	89 ef       	ldi	r24, 0xF9	; 249
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <LCD_voidSendData+0xb8>
 618:	00 c0       	rjmp	.+0      	; 0x61a <LCD_voidSendData+0xbe>
 61a:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	62 e0       	ldi	r22, 0x02	; 2
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 626:	89 ef       	ldi	r24, 0xF9	; 249
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	01 97       	sbiw	r24, 0x01	; 1
 62c:	f1 f7       	brne	.-4      	; 0x62a <LCD_voidSendData+0xce>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <LCD_voidSendData+0xd4>
 630:	00 00       	nop
	_delay_ms(1);
}
 632:	cf 91       	pop	r28
 634:	08 95       	ret

Disassembly of section .text.LCD_voidSendString:

000006e8 <LCD_voidSendString>:

void LCD_voidSendString(const char *String)
{
 6e8:	cf 92       	push	r12
 6ea:	df 92       	push	r13
 6ec:	ef 92       	push	r14
 6ee:	cf 93       	push	r28
 6f0:	6b 01       	movw	r12, r22
 6f2:	e8 2e       	mov	r14, r24
	u8 Counter=0;
 6f4:	c0 e0       	ldi	r28, 0x00	; 0
	while(String[Counter]!='\0')
 6f6:	03 c0       	rjmp	.+6      	; 0x6fe <LCD_voidSendString+0x16>
	{
		LCD_voidSendData(String[Counter]);
 6f8:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_voidSendData>
		Counter++;
 6fc:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_voidSendString(const char *String)
{
	u8 Counter=0;
	while(String[Counter]!='\0')
 6fe:	ae 2d       	mov	r26, r14
 700:	c6 01       	movw	r24, r12
 702:	8c 0f       	add	r24, r28
 704:	91 1d       	adc	r25, r1
 706:	a1 1d       	adc	r26, r1
 708:	fc 01       	movw	r30, r24
 70a:	84 91       	lpm	r24, Z
 70c:	a7 fd       	sbrc	r26, 7
 70e:	80 81       	ld	r24, Z
 710:	81 11       	cpse	r24, r1
 712:	f2 cf       	rjmp	.-28     	; 0x6f8 <LCD_voidSendString+0x10>
	{
		LCD_voidSendData(String[Counter]);
		Counter++;
	}
}
 714:	cf 91       	pop	r28
 716:	ef 90       	pop	r14
 718:	df 90       	pop	r13
 71a:	cf 90       	pop	r12
 71c:	08 95       	ret

Disassembly of section .text.LCD_voidGoToXY:

0000037a <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 X_Pos, u8 Y_Pos)
{
 37a:	cf 93       	push	r28
	u8 Address=0;
	/*Location at First line*/
	if(X_Pos==0)
 37c:	81 11       	cpse	r24, r1
 37e:	03 c0       	rjmp	.+6      	; 0x386 <LCD_voidGoToXY+0xc>
	{
		Address = Y_Pos + 0x80;
 380:	c0 e8       	ldi	r28, 0x80	; 128
 382:	c6 0f       	add	r28, r22
 384:	10 c0       	rjmp	.+32     	; 0x3a6 <LCD_voidGoToXY+0x2c>
	}
	/*Location at Second line*/
	else if(X_Pos==1)
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	19 f4       	brne	.+6      	; 0x390 <LCD_voidGoToXY+0x16>
	{
		Address = Y_Pos + 0xC0;
 38a:	c0 ec       	ldi	r28, 0xC0	; 192
 38c:	c6 0f       	add	r28, r22
 38e:	0b c0       	rjmp	.+22     	; 0x3a6 <LCD_voidGoToXY+0x2c>
	}
	/*Location at third line*/
	else if(X_Pos==2)
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	19 f4       	brne	.+6      	; 0x39a <LCD_voidGoToXY+0x20>
	{
		Address = Y_Pos + 0x94;
 394:	c4 e9       	ldi	r28, 0x94	; 148
 396:	c6 0f       	add	r28, r22
 398:	06 c0       	rjmp	.+12     	; 0x3a6 <LCD_voidGoToXY+0x2c>
	}
	/*Location at fourth line*/
	else if(X_Pos==3)
 39a:	83 30       	cpi	r24, 0x03	; 3
 39c:	19 f4       	brne	.+6      	; 0x3a4 <LCD_voidGoToXY+0x2a>
	{
		Address = Y_Pos + 0xd4;
 39e:	c4 ed       	ldi	r28, 0xD4	; 212
 3a0:	c6 0f       	add	r28, r22
 3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <LCD_voidGoToXY+0x2c>
	}
}

void LCD_voidGoToXY(u8 X_Pos, u8 Y_Pos)
{
	u8 Address=0;
 3a4:	c0 e0       	ldi	r28, 0x00	; 0
	}
	
	///Set DDRAM Address Command////
	
	/*Set RS pin to low for command*/
	DIO_voidSetPinValue(CTRL_PORT,RS,PIN_LOW);
 3a6:	40 e0       	ldi	r20, 0x00	; 0
 3a8:	63 e0       	ldi	r22, 0x03	; 3
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	
	/*Send Address to Data pins*/
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Address,4));
 3b0:	c4 fb       	bst	r28, 4
 3b2:	44 27       	eor	r20, r20
 3b4:	40 f9       	bld	r20, 0
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Address,5));
 3be:	c5 fb       	bst	r28, 5
 3c0:	44 27       	eor	r20, r20
 3c2:	40 f9       	bld	r20, 0
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Address,6));
 3cc:	c6 fb       	bst	r28, 6
 3ce:	44 27       	eor	r20, r20
 3d0:	40 f9       	bld	r20, 0
 3d2:	62 e0       	ldi	r22, 0x02	; 2
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	/*Set D7 high*/
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_HIGH);
 3da:	41 e0       	ldi	r20, 0x01	; 1
 3dc:	63 e0       	ldi	r22, 0x03	; 3
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 3e4:	41 e0       	ldi	r20, 0x01	; 1
 3e6:	62 e0       	ldi	r22, 0x02	; 2
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 3ee:	89 ef       	ldi	r24, 0xF9	; 249
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <LCD_voidGoToXY+0x78>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <LCD_voidGoToXY+0x7e>
 3f8:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 3fa:	40 e0       	ldi	r20, 0x00	; 0
 3fc:	62 e0       	ldi	r22, 0x02	; 2
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 404:	89 ef       	ldi	r24, 0xF9	; 249
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
	_delay_ms(1);
	
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Address,0));
 410:	4c 2f       	mov	r20, r28
 412:	41 70       	andi	r20, 0x01	; 1
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Address,1));
 41c:	c1 fb       	bst	r28, 1
 41e:	44 27       	eor	r20, r20
 420:	40 f9       	bld	r20, 0
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Address,2));
 42a:	c2 fb       	bst	r28, 2
 42c:	44 27       	eor	r20, r20
 42e:	40 f9       	bld	r20, 0
 430:	62 e0       	ldi	r22, 0x02	; 2
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,GET_BIT(Address,3));
 438:	c3 fb       	bst	r28, 3
 43a:	44 27       	eor	r20, r20
 43c:	40 f9       	bld	r20, 0
 43e:	63 e0       	ldi	r22, 0x03	; 3
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 446:	41 e0       	ldi	r20, 0x01	; 1
 448:	62 e0       	ldi	r22, 0x02	; 2
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 450:	89 ef       	ldi	r24, 0xF9	; 249
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 45a:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	62 e0       	ldi	r22, 0x02	; 2
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPinValue>
 466:	89 ef       	ldi	r24, 0xF9	; 249
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 470:	00 00       	nop
	_delay_ms(1);
}
 472:	cf 91       	pop	r28
 474:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000007f2 <_fini>:
 7f2:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000007f4 <__funcs_on_exit>:
 7f4:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000007f6 <__simulator_exit>:
 7f6:	08 95       	ret

Disassembly of section .text.exit:

000007c6 <exit>:
 7c6:	ec 01       	movw	r28, r24
 7c8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__funcs_on_exit>
 7cc:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_fini>
 7d0:	ce 01       	movw	r24, r28
 7d2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__simulator_exit>
 7d6:	ce 01       	movw	r24, r28
 7d8:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_Exit>

Disassembly of section .text._Exit:

000007ee <_Exit>:
 7ee:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
