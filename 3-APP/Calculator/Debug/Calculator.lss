
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00001030  000010e4  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000002a  00000000  00000000  00001113  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  0000113d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ffc  00000000  00000000  00001215  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000094b  00000000  00000000  00004211  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e39  00000000  00000000  00004b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  00005998  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ac  00000000  00000000  00005b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000154e  00000000  00000000  00005e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00007376  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000100a  0000100a  000010be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007410  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.DIO_voidSetPinDirection 000000e6  00000968  00000968  00000a1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.DIO_voidSetPinValue 000000e6  00000a4e  00000a4e  00000b02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.DIO_u8GetPinValue 00000086  00000ef2  00000ef2  00000fa6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.KPD_u8Init 000000a2  00000e50  00000e50  00000f04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.KPD_u8GetPressedKey 000000ba  00000ce8  00000ce8  00000d9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .rodata.KPD_Arr.1602 00000010  00800060  00001018  000010cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 20 .rodata.Row_Arr.1604 00000004  00800070  00001028  000010dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .rodata.Coloumn_Arr.1603 00000004  00800074  0000102c  000010e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .text.LCD_voidSendCommand 000000da  00000b34  00000b34  00000be8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCD_voidInit 0000032a  00000542  00000542  000005f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.LCD_voidSendData 000000da  00000c0e  00000c0e  00000cc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.LCD_voidSendString 00000036  00000f78  00000f78  0000102c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.LCD_voidGoToXY 000000fc  0000086c  0000086c  00000920  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.LCD_voidWriteNumber 000000ae  00000da2  00000da2  00000e56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .progmemx.data 0000000b  000000b0  000000b0  00000164  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 29 .text.main    00000486  000000bc  000000bc  00000170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.libgcc.div 00000028  00000fae  00000fae  00001062  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.libgcc.mul 0000001e  00000fd6  00000fd6  0000108a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__dummy_fini 00000002  00001012  00001012  000010c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__dummy_funcs_on_exit 00000002  00001014  00001014  000010c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__dummy_simulator_exit 00000002  00001016  00001016  000010ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.exit    00000016  00000ff4  00000ff4  000010a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text._Exit   00000004  0000100e  0000100e  000010c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>
   8:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>
   c:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>
  10:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>
  14:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>
  18:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>
  1c:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>
  20:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>
  24:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>
  28:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>
  2c:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>
  30:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>
  34:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>
  38:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>
  3c:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>
  40:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>
  44:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>
  48:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>
  4c:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>
  50:	0c 94 05 08 	jmp	0x100a	; 0x100a <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 78       	andi	r16, 0x80	; 128
  58:	00 10       	cpse	r0, r0
  5a:	18 00       	.word	0x0018	; ????

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d8 e0       	ldi	r29, 0x08	; 8
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	e4 e5       	ldi	r30, 0x54	; 84
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	17 c0       	rjmp	.+46     	; 0x9e <__do_clear_bss+0x8>
  70:	b5 91       	lpm	r27, Z+
  72:	a5 91       	lpm	r26, Z+
  74:	35 91       	lpm	r19, Z+
  76:	25 91       	lpm	r18, Z+
  78:	05 91       	lpm	r16, Z+
  7a:	07 fd       	sbrc	r16, 7
  7c:	0c c0       	rjmp	.+24     	; 0x96 <__do_clear_bss>
  7e:	95 91       	lpm	r25, Z+
  80:	85 91       	lpm	r24, Z+
  82:	ef 01       	movw	r28, r30
  84:	f9 2f       	mov	r31, r25
  86:	e8 2f       	mov	r30, r24
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 17       	cp	r26, r18
  8e:	b3 07       	cpc	r27, r19
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0x20>
  92:	fe 01       	movw	r30, r28
  94:	04 c0       	rjmp	.+8      	; 0x9e <__do_clear_bss+0x8>

00000096 <__do_clear_bss>:
  96:	1d 92       	st	X+, r1
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	e1 f7       	brne	.-8      	; 0x96 <__do_clear_bss>
  9e:	eb 35       	cpi	r30, 0x5B	; 91
  a0:	f4 07       	cpc	r31, r20
  a2:	31 f7       	brne	.-52     	; 0x70 <__do_copy_data+0x8>
  a4:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  a8:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <exit>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

Disassembly of section .text:

0000100a <__bad_interrupt>:
    100a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.DIO_voidSetPinDirection:

00000968 <DIO_voidSetPinDirection>:
	switch(PORT_ID)
	{
		case DIO_PORTA: PORTA= Value;break;
		case DIO_PORTB: PORTB= Value;break;
		case DIO_PORTC: PORTC= Value;break;
		case DIO_PORTD: PORTD= Value;break;
 968:	68 30       	cpi	r22, 0x08	; 8
 96a:	08 f0       	brcs	.+2      	; 0x96e <DIO_voidSetPinDirection+0x6>
 96c:	6f c0       	rjmp	.+222    	; 0xa4c <DIO_voidSetPinDirection+0xe4>
 96e:	41 11       	cpse	r20, r1
 970:	38 c0       	rjmp	.+112    	; 0x9e2 <DIO_voidSetPinDirection+0x7a>
 972:	81 30       	cpi	r24, 0x01	; 1
 974:	91 f0       	breq	.+36     	; 0x99a <DIO_voidSetPinDirection+0x32>
 976:	28 f0       	brcs	.+10     	; 0x982 <DIO_voidSetPinDirection+0x1a>
 978:	82 30       	cpi	r24, 0x02	; 2
 97a:	d9 f0       	breq	.+54     	; 0x9b2 <DIO_voidSetPinDirection+0x4a>
 97c:	83 30       	cpi	r24, 0x03	; 3
 97e:	29 f1       	breq	.+74     	; 0x9ca <DIO_voidSetPinDirection+0x62>
 980:	08 95       	ret
 982:	2a b3       	in	r18, 0x1a	; 26
 984:	81 e0       	ldi	r24, 0x01	; 1
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	02 c0       	rjmp	.+4      	; 0x98e <DIO_voidSetPinDirection+0x26>
 98a:	88 0f       	add	r24, r24
 98c:	99 1f       	adc	r25, r25
 98e:	6a 95       	dec	r22
 990:	e2 f7       	brpl	.-8      	; 0x98a <DIO_voidSetPinDirection+0x22>
 992:	80 95       	com	r24
 994:	82 23       	and	r24, r18
 996:	8a bb       	out	0x1a, r24	; 26
 998:	08 95       	ret
 99a:	27 b3       	in	r18, 0x17	; 23
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <DIO_voidSetPinDirection+0x3e>
 9a2:	88 0f       	add	r24, r24
 9a4:	99 1f       	adc	r25, r25
 9a6:	6a 95       	dec	r22
 9a8:	e2 f7       	brpl	.-8      	; 0x9a2 <DIO_voidSetPinDirection+0x3a>
 9aa:	80 95       	com	r24
 9ac:	82 23       	and	r24, r18
 9ae:	87 bb       	out	0x17, r24	; 23
 9b0:	08 95       	ret
 9b2:	24 b3       	in	r18, 0x14	; 20
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	02 c0       	rjmp	.+4      	; 0x9be <DIO_voidSetPinDirection+0x56>
 9ba:	88 0f       	add	r24, r24
 9bc:	99 1f       	adc	r25, r25
 9be:	6a 95       	dec	r22
 9c0:	e2 f7       	brpl	.-8      	; 0x9ba <DIO_voidSetPinDirection+0x52>
 9c2:	80 95       	com	r24
 9c4:	82 23       	and	r24, r18
 9c6:	84 bb       	out	0x14, r24	; 20
 9c8:	08 95       	ret
 9ca:	21 b3       	in	r18, 0x11	; 17
 9cc:	81 e0       	ldi	r24, 0x01	; 1
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <DIO_voidSetPinDirection+0x6e>
 9d2:	88 0f       	add	r24, r24
 9d4:	99 1f       	adc	r25, r25
 9d6:	6a 95       	dec	r22
 9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <DIO_voidSetPinDirection+0x6a>
 9da:	80 95       	com	r24
 9dc:	82 23       	and	r24, r18
 9de:	81 bb       	out	0x11, r24	; 17
 9e0:	08 95       	ret
 9e2:	41 30       	cpi	r20, 0x01	; 1
 9e4:	99 f5       	brne	.+102    	; 0xa4c <DIO_voidSetPinDirection+0xe4>
 9e6:	81 30       	cpi	r24, 0x01	; 1
 9e8:	89 f0       	breq	.+34     	; 0xa0c <DIO_voidSetPinDirection+0xa4>
 9ea:	28 f0       	brcs	.+10     	; 0x9f6 <DIO_voidSetPinDirection+0x8e>
 9ec:	82 30       	cpi	r24, 0x02	; 2
 9ee:	c9 f0       	breq	.+50     	; 0xa22 <DIO_voidSetPinDirection+0xba>
 9f0:	83 30       	cpi	r24, 0x03	; 3
 9f2:	11 f1       	breq	.+68     	; 0xa38 <DIO_voidSetPinDirection+0xd0>
 9f4:	08 95       	ret
 9f6:	2a b3       	in	r18, 0x1a	; 26
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	02 c0       	rjmp	.+4      	; 0xa02 <DIO_voidSetPinDirection+0x9a>
 9fe:	88 0f       	add	r24, r24
 a00:	99 1f       	adc	r25, r25
 a02:	6a 95       	dec	r22
 a04:	e2 f7       	brpl	.-8      	; 0x9fe <DIO_voidSetPinDirection+0x96>
 a06:	82 2b       	or	r24, r18
 a08:	8a bb       	out	0x1a, r24	; 26
 a0a:	08 95       	ret
 a0c:	27 b3       	in	r18, 0x17	; 23
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	02 c0       	rjmp	.+4      	; 0xa18 <DIO_voidSetPinDirection+0xb0>
 a14:	88 0f       	add	r24, r24
 a16:	99 1f       	adc	r25, r25
 a18:	6a 95       	dec	r22
 a1a:	e2 f7       	brpl	.-8      	; 0xa14 <DIO_voidSetPinDirection+0xac>
 a1c:	82 2b       	or	r24, r18
 a1e:	87 bb       	out	0x17, r24	; 23
 a20:	08 95       	ret
 a22:	24 b3       	in	r18, 0x14	; 20
 a24:	81 e0       	ldi	r24, 0x01	; 1
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <DIO_voidSetPinDirection+0xc6>
 a2a:	88 0f       	add	r24, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	6a 95       	dec	r22
 a30:	e2 f7       	brpl	.-8      	; 0xa2a <DIO_voidSetPinDirection+0xc2>
 a32:	82 2b       	or	r24, r18
 a34:	84 bb       	out	0x14, r24	; 20
 a36:	08 95       	ret
 a38:	21 b3       	in	r18, 0x11	; 17
 a3a:	81 e0       	ldi	r24, 0x01	; 1
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <DIO_voidSetPinDirection+0xdc>
 a40:	88 0f       	add	r24, r24
 a42:	99 1f       	adc	r25, r25
 a44:	6a 95       	dec	r22
 a46:	e2 f7       	brpl	.-8      	; 0xa40 <DIO_voidSetPinDirection+0xd8>
 a48:	82 2b       	or	r24, r18
 a4a:	81 bb       	out	0x11, r24	; 17
 a4c:	08 95       	ret

Disassembly of section .text.DIO_voidSetPinValue:

00000a4e <DIO_voidSetPinValue>:
 a4e:	68 30       	cpi	r22, 0x08	; 8
 a50:	08 f0       	brcs	.+2      	; 0xa54 <DIO_voidSetPinValue+0x6>
 a52:	6f c0       	rjmp	.+222    	; 0xb32 <DIO_voidSetPinValue+0xe4>
 a54:	41 11       	cpse	r20, r1
 a56:	38 c0       	rjmp	.+112    	; 0xac8 <DIO_voidSetPinValue+0x7a>
 a58:	81 30       	cpi	r24, 0x01	; 1
 a5a:	91 f0       	breq	.+36     	; 0xa80 <DIO_voidSetPinValue+0x32>
 a5c:	28 f0       	brcs	.+10     	; 0xa68 <DIO_voidSetPinValue+0x1a>
 a5e:	82 30       	cpi	r24, 0x02	; 2
 a60:	d9 f0       	breq	.+54     	; 0xa98 <DIO_voidSetPinValue+0x4a>
 a62:	83 30       	cpi	r24, 0x03	; 3
 a64:	29 f1       	breq	.+74     	; 0xab0 <DIO_voidSetPinValue+0x62>
 a66:	08 95       	ret
 a68:	2b b3       	in	r18, 0x1b	; 27
 a6a:	81 e0       	ldi	r24, 0x01	; 1
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	02 c0       	rjmp	.+4      	; 0xa74 <DIO_voidSetPinValue+0x26>
 a70:	88 0f       	add	r24, r24
 a72:	99 1f       	adc	r25, r25
 a74:	6a 95       	dec	r22
 a76:	e2 f7       	brpl	.-8      	; 0xa70 <DIO_voidSetPinValue+0x22>
 a78:	80 95       	com	r24
 a7a:	82 23       	and	r24, r18
 a7c:	8b bb       	out	0x1b, r24	; 27
 a7e:	08 95       	ret
 a80:	28 b3       	in	r18, 0x18	; 24
 a82:	81 e0       	ldi	r24, 0x01	; 1
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	02 c0       	rjmp	.+4      	; 0xa8c <DIO_voidSetPinValue+0x3e>
 a88:	88 0f       	add	r24, r24
 a8a:	99 1f       	adc	r25, r25
 a8c:	6a 95       	dec	r22
 a8e:	e2 f7       	brpl	.-8      	; 0xa88 <DIO_voidSetPinValue+0x3a>
 a90:	80 95       	com	r24
 a92:	82 23       	and	r24, r18
 a94:	88 bb       	out	0x18, r24	; 24
 a96:	08 95       	ret
 a98:	25 b3       	in	r18, 0x15	; 21
 a9a:	81 e0       	ldi	r24, 0x01	; 1
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <DIO_voidSetPinValue+0x56>
 aa0:	88 0f       	add	r24, r24
 aa2:	99 1f       	adc	r25, r25
 aa4:	6a 95       	dec	r22
 aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <DIO_voidSetPinValue+0x52>
 aa8:	80 95       	com	r24
 aaa:	82 23       	and	r24, r18
 aac:	85 bb       	out	0x15, r24	; 21
 aae:	08 95       	ret
 ab0:	22 b3       	in	r18, 0x12	; 18
 ab2:	81 e0       	ldi	r24, 0x01	; 1
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	02 c0       	rjmp	.+4      	; 0xabc <DIO_voidSetPinValue+0x6e>
 ab8:	88 0f       	add	r24, r24
 aba:	99 1f       	adc	r25, r25
 abc:	6a 95       	dec	r22
 abe:	e2 f7       	brpl	.-8      	; 0xab8 <DIO_voidSetPinValue+0x6a>
 ac0:	80 95       	com	r24
 ac2:	82 23       	and	r24, r18
 ac4:	82 bb       	out	0x12, r24	; 18
 ac6:	08 95       	ret
 ac8:	41 30       	cpi	r20, 0x01	; 1
 aca:	99 f5       	brne	.+102    	; 0xb32 <DIO_voidSetPinValue+0xe4>
 acc:	81 30       	cpi	r24, 0x01	; 1
 ace:	89 f0       	breq	.+34     	; 0xaf2 <DIO_voidSetPinValue+0xa4>
 ad0:	28 f0       	brcs	.+10     	; 0xadc <DIO_voidSetPinValue+0x8e>
 ad2:	82 30       	cpi	r24, 0x02	; 2
 ad4:	c9 f0       	breq	.+50     	; 0xb08 <DIO_voidSetPinValue+0xba>
 ad6:	83 30       	cpi	r24, 0x03	; 3
 ad8:	11 f1       	breq	.+68     	; 0xb1e <DIO_voidSetPinValue+0xd0>
 ada:	08 95       	ret
 adc:	2b b3       	in	r18, 0x1b	; 27
 ade:	81 e0       	ldi	r24, 0x01	; 1
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	02 c0       	rjmp	.+4      	; 0xae8 <DIO_voidSetPinValue+0x9a>
 ae4:	88 0f       	add	r24, r24
 ae6:	99 1f       	adc	r25, r25
 ae8:	6a 95       	dec	r22
 aea:	e2 f7       	brpl	.-8      	; 0xae4 <DIO_voidSetPinValue+0x96>
 aec:	82 2b       	or	r24, r18
 aee:	8b bb       	out	0x1b, r24	; 27
 af0:	08 95       	ret
 af2:	28 b3       	in	r18, 0x18	; 24
 af4:	81 e0       	ldi	r24, 0x01	; 1
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	02 c0       	rjmp	.+4      	; 0xafe <DIO_voidSetPinValue+0xb0>
 afa:	88 0f       	add	r24, r24
 afc:	99 1f       	adc	r25, r25
 afe:	6a 95       	dec	r22
 b00:	e2 f7       	brpl	.-8      	; 0xafa <DIO_voidSetPinValue+0xac>
 b02:	82 2b       	or	r24, r18
 b04:	88 bb       	out	0x18, r24	; 24
 b06:	08 95       	ret
 b08:	25 b3       	in	r18, 0x15	; 21
 b0a:	81 e0       	ldi	r24, 0x01	; 1
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	02 c0       	rjmp	.+4      	; 0xb14 <DIO_voidSetPinValue+0xc6>
 b10:	88 0f       	add	r24, r24
 b12:	99 1f       	adc	r25, r25
 b14:	6a 95       	dec	r22
 b16:	e2 f7       	brpl	.-8      	; 0xb10 <DIO_voidSetPinValue+0xc2>
 b18:	82 2b       	or	r24, r18
 b1a:	85 bb       	out	0x15, r24	; 21
 b1c:	08 95       	ret
 b1e:	22 b3       	in	r18, 0x12	; 18
 b20:	81 e0       	ldi	r24, 0x01	; 1
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	02 c0       	rjmp	.+4      	; 0xb2a <DIO_voidSetPinValue+0xdc>
 b26:	88 0f       	add	r24, r24
 b28:	99 1f       	adc	r25, r25
 b2a:	6a 95       	dec	r22
 b2c:	e2 f7       	brpl	.-8      	; 0xb26 <DIO_voidSetPinValue+0xd8>
 b2e:	82 2b       	or	r24, r18
 b30:	82 bb       	out	0x12, r24	; 18
 b32:	08 95       	ret

Disassembly of section .text.DIO_u8GetPinValue:

00000ef2 <DIO_u8GetPinValue>:
}

u8 DIO_u8GetPinValue(u8 PORT_ID,u8 PIN_ID,u8* Value)
{
	u8 NULL_PtrErrorState = 0;
	if(Value!=NULL && PIN_ID<=PIN7)
 ef2:	41 15       	cp	r20, r1
 ef4:	51 05       	cpc	r21, r1
 ef6:	d1 f1       	breq	.+116    	; 0xf6c <DIO_u8GetPinValue+0x7a>
 ef8:	68 30       	cpi	r22, 0x08	; 8
 efa:	d0 f5       	brcc	.+116    	; 0xf70 <DIO_u8GetPinValue+0x7e>
	{
		switch(PORT_ID)
 efc:	81 30       	cpi	r24, 0x01	; 1
 efe:	91 f0       	breq	.+36     	; 0xf24 <DIO_u8GetPinValue+0x32>
 f00:	28 f0       	brcs	.+10     	; 0xf0c <DIO_u8GetPinValue+0x1a>
 f02:	82 30       	cpi	r24, 0x02	; 2
 f04:	d9 f0       	breq	.+54     	; 0xf3c <DIO_u8GetPinValue+0x4a>
 f06:	83 30       	cpi	r24, 0x03	; 3
 f08:	29 f1       	breq	.+74     	; 0xf54 <DIO_u8GetPinValue+0x62>
 f0a:	34 c0       	rjmp	.+104    	; 0xf74 <DIO_u8GetPinValue+0x82>
		{
			case DIO_PORTA: *Value = GET_BIT(PINA,PIN_ID); break;
 f0c:	89 b3       	in	r24, 0x19	; 25
 f0e:	90 e0       	ldi	r25, 0x00	; 0
 f10:	02 c0       	rjmp	.+4      	; 0xf16 <DIO_u8GetPinValue+0x24>
 f12:	95 95       	asr	r25
 f14:	87 95       	ror	r24
 f16:	6a 95       	dec	r22
 f18:	e2 f7       	brpl	.-8      	; 0xf12 <DIO_u8GetPinValue+0x20>
 f1a:	81 70       	andi	r24, 0x01	; 1
 f1c:	fa 01       	movw	r30, r20
 f1e:	80 83       	st	Z, r24
	}
}

u8 DIO_u8GetPinValue(u8 PORT_ID,u8 PIN_ID,u8* Value)
{
	u8 NULL_PtrErrorState = 0;
 f20:	80 e0       	ldi	r24, 0x00	; 0
	if(Value!=NULL && PIN_ID<=PIN7)
	{
		switch(PORT_ID)
		{
			case DIO_PORTA: *Value = GET_BIT(PINA,PIN_ID); break;
 f22:	08 95       	ret
			case DIO_PORTB: *Value = GET_BIT(PINB,PIN_ID); break;
 f24:	86 b3       	in	r24, 0x16	; 22
 f26:	90 e0       	ldi	r25, 0x00	; 0
 f28:	02 c0       	rjmp	.+4      	; 0xf2e <DIO_u8GetPinValue+0x3c>
 f2a:	95 95       	asr	r25
 f2c:	87 95       	ror	r24
 f2e:	6a 95       	dec	r22
 f30:	e2 f7       	brpl	.-8      	; 0xf2a <DIO_u8GetPinValue+0x38>
 f32:	81 70       	andi	r24, 0x01	; 1
 f34:	fa 01       	movw	r30, r20
 f36:	80 83       	st	Z, r24
	}
}

u8 DIO_u8GetPinValue(u8 PORT_ID,u8 PIN_ID,u8* Value)
{
	u8 NULL_PtrErrorState = 0;
 f38:	80 e0       	ldi	r24, 0x00	; 0
	if(Value!=NULL && PIN_ID<=PIN7)
	{
		switch(PORT_ID)
		{
			case DIO_PORTA: *Value = GET_BIT(PINA,PIN_ID); break;
			case DIO_PORTB: *Value = GET_BIT(PINB,PIN_ID); break;
 f3a:	08 95       	ret
			case DIO_PORTC: *Value = GET_BIT(PINC,PIN_ID); break;
 f3c:	83 b3       	in	r24, 0x13	; 19
 f3e:	90 e0       	ldi	r25, 0x00	; 0
 f40:	02 c0       	rjmp	.+4      	; 0xf46 <DIO_u8GetPinValue+0x54>
 f42:	95 95       	asr	r25
 f44:	87 95       	ror	r24
 f46:	6a 95       	dec	r22
 f48:	e2 f7       	brpl	.-8      	; 0xf42 <DIO_u8GetPinValue+0x50>
 f4a:	81 70       	andi	r24, 0x01	; 1
 f4c:	fa 01       	movw	r30, r20
 f4e:	80 83       	st	Z, r24
	}
}

u8 DIO_u8GetPinValue(u8 PORT_ID,u8 PIN_ID,u8* Value)
{
	u8 NULL_PtrErrorState = 0;
 f50:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PORT_ID)
		{
			case DIO_PORTA: *Value = GET_BIT(PINA,PIN_ID); break;
			case DIO_PORTB: *Value = GET_BIT(PINB,PIN_ID); break;
			case DIO_PORTC: *Value = GET_BIT(PINC,PIN_ID); break;
 f52:	08 95       	ret
			case DIO_PORTD: *Value = GET_BIT(PIND,PIN_ID); break;
 f54:	80 b3       	in	r24, 0x10	; 16
 f56:	90 e0       	ldi	r25, 0x00	; 0
 f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_u8GetPinValue+0x6c>
 f5a:	95 95       	asr	r25
 f5c:	87 95       	ror	r24
 f5e:	6a 95       	dec	r22
 f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_u8GetPinValue+0x68>
 f62:	81 70       	andi	r24, 0x01	; 1
 f64:	fa 01       	movw	r30, r20
 f66:	80 83       	st	Z, r24
	}
}

u8 DIO_u8GetPinValue(u8 PORT_ID,u8 PIN_ID,u8* Value)
{
	u8 NULL_PtrErrorState = 0;
 f68:	80 e0       	ldi	r24, 0x00	; 0
		switch(PORT_ID)
		{
			case DIO_PORTA: *Value = GET_BIT(PINA,PIN_ID); break;
			case DIO_PORTB: *Value = GET_BIT(PINB,PIN_ID); break;
			case DIO_PORTC: *Value = GET_BIT(PINC,PIN_ID); break;
			case DIO_PORTD: *Value = GET_BIT(PIND,PIN_ID); break;
 f6a:	08 95       	ret
		}
	}
	else
	{
		NULL_PtrErrorState = 1;
 f6c:	81 e0       	ldi	r24, 0x01	; 1
 f6e:	08 95       	ret
 f70:	81 e0       	ldi	r24, 0x01	; 1
 f72:	08 95       	ret
	}
}

u8 DIO_u8GetPinValue(u8 PORT_ID,u8 PIN_ID,u8* Value)
{
	u8 NULL_PtrErrorState = 0;
 f74:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		NULL_PtrErrorState = 1;
	}
	return NULL_PtrErrorState;
}
 f76:	08 95       	ret

Disassembly of section .text.KPD_u8Init:

00000e50 <KPD_u8Init>:
#include "KPD_register.h"
#include "KPD_private.h"

void KPD_u8Init()
{
	DIO_voidSetPinDirection(COLOUMN_PORT,COLOUMN1,PIN_OUTPUT);
 e50:	41 e0       	ldi	r20, 0x01	; 1
 e52:	67 e0       	ldi	r22, 0x07	; 7
 e54:	83 e0       	ldi	r24, 0x03	; 3
 e56:	0e 94 b4 04 	call	0x968	; 0x968 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(COLOUMN_PORT,COLOUMN2,PIN_OUTPUT);
 e5a:	41 e0       	ldi	r20, 0x01	; 1
 e5c:	66 e0       	ldi	r22, 0x06	; 6
 e5e:	83 e0       	ldi	r24, 0x03	; 3
 e60:	0e 94 b4 04 	call	0x968	; 0x968 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(COLOUMN_PORT,COLOUMN3,PIN_OUTPUT);
 e64:	41 e0       	ldi	r20, 0x01	; 1
 e66:	65 e0       	ldi	r22, 0x05	; 5
 e68:	83 e0       	ldi	r24, 0x03	; 3
 e6a:	0e 94 b4 04 	call	0x968	; 0x968 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(COLOUMN_PORT,COLOUMN4,PIN_OUTPUT);
 e6e:	41 e0       	ldi	r20, 0x01	; 1
 e70:	63 e0       	ldi	r22, 0x03	; 3
 e72:	83 e0       	ldi	r24, 0x03	; 3
 e74:	0e 94 b4 04 	call	0x968	; 0x968 <DIO_voidSetPinDirection>
	/*Set Column pin as initially high*/
	DIO_voidSetPinValue(COLOUMN_PORT,COLOUMN1,PIN_HIGH);
 e78:	41 e0       	ldi	r20, 0x01	; 1
 e7a:	67 e0       	ldi	r22, 0x07	; 7
 e7c:	83 e0       	ldi	r24, 0x03	; 3
 e7e:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(COLOUMN_PORT,COLOUMN2,PIN_HIGH);
 e82:	41 e0       	ldi	r20, 0x01	; 1
 e84:	66 e0       	ldi	r22, 0x06	; 6
 e86:	83 e0       	ldi	r24, 0x03	; 3
 e88:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(COLOUMN_PORT,COLOUMN3,PIN_HIGH);
 e8c:	41 e0       	ldi	r20, 0x01	; 1
 e8e:	65 e0       	ldi	r22, 0x05	; 5
 e90:	83 e0       	ldi	r24, 0x03	; 3
 e92:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(COLOUMN_PORT,COLOUMN4,PIN_HIGH);
 e96:	41 e0       	ldi	r20, 0x01	; 1
 e98:	63 e0       	ldi	r22, 0x03	; 3
 e9a:	83 e0       	ldi	r24, 0x03	; 3
 e9c:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	
	DIO_voidSetPinDirection(ROW_PORT,ROW1,PIN_INPUT);
 ea0:	40 e0       	ldi	r20, 0x00	; 0
 ea2:	65 e0       	ldi	r22, 0x05	; 5
 ea4:	82 e0       	ldi	r24, 0x02	; 2
 ea6:	0e 94 b4 04 	call	0x968	; 0x968 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ROW_PORT,ROW2,PIN_INPUT);
 eaa:	40 e0       	ldi	r20, 0x00	; 0
 eac:	64 e0       	ldi	r22, 0x04	; 4
 eae:	82 e0       	ldi	r24, 0x02	; 2
 eb0:	0e 94 b4 04 	call	0x968	; 0x968 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ROW_PORT,ROW3,PIN_INPUT);
 eb4:	40 e0       	ldi	r20, 0x00	; 0
 eb6:	63 e0       	ldi	r22, 0x03	; 3
 eb8:	82 e0       	ldi	r24, 0x02	; 2
 eba:	0e 94 b4 04 	call	0x968	; 0x968 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ROW_PORT,ROW4,PIN_INPUT);
 ebe:	40 e0       	ldi	r20, 0x00	; 0
 ec0:	62 e0       	ldi	r22, 0x02	; 2
 ec2:	82 e0       	ldi	r24, 0x02	; 2
 ec4:	0e 94 b4 04 	call	0x968	; 0x968 <DIO_voidSetPinDirection>
	/*Set Row pin as initially high*/
	DIO_voidSetPinValue(ROW_PORT,ROW1,PIN_HIGH);
 ec8:	41 e0       	ldi	r20, 0x01	; 1
 eca:	65 e0       	ldi	r22, 0x05	; 5
 ecc:	82 e0       	ldi	r24, 0x02	; 2
 ece:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ROW_PORT,ROW2,PIN_HIGH);
 ed2:	41 e0       	ldi	r20, 0x01	; 1
 ed4:	64 e0       	ldi	r22, 0x04	; 4
 ed6:	82 e0       	ldi	r24, 0x02	; 2
 ed8:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ROW_PORT,ROW3,PIN_HIGH);
 edc:	41 e0       	ldi	r20, 0x01	; 1
 ede:	63 e0       	ldi	r22, 0x03	; 3
 ee0:	82 e0       	ldi	r24, 0x02	; 2
 ee2:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ROW_PORT,ROW4,PIN_HIGH);
 ee6:	41 e0       	ldi	r20, 0x01	; 1
 ee8:	62 e0       	ldi	r22, 0x02	; 2
 eea:	82 e0       	ldi	r24, 0x02	; 2
 eec:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 ef0:	08 95       	ret

Disassembly of section .text.KPD_u8GetPressedKey:

00000ce8 <KPD_u8GetPressedKey>:
}

u8 KPD_u8GetPressedKey()
{
 ce8:	cf 92       	push	r12
 cea:	df 92       	push	r13
 cec:	ef 92       	push	r14
 cee:	ff 92       	push	r15
 cf0:	0f 93       	push	r16
 cf2:	1f 93       	push	r17
 cf4:	cf 93       	push	r28
 cf6:	df 93       	push	r29
 cf8:	0f 92       	push	r0
 cfa:	cd b7       	in	r28, 0x3d	; 61
 cfc:	de b7       	in	r29, 0x3e	; 62

	static u8 KPD_Arr[ROW_NUM][COLOUMN_NUM] = KPD_ARR_VAL;
	static u8 Coloumn_Arr [COLOUMN_NUM] = {COLOUMN1,COLOUMN2,COLOUMN3,COLOUMN4};
	static u8 Row_Arr [ROW_NUM] = {ROW1,ROW2,ROW3,ROW4};
	
	for(u8 Coloumn_Idx=0 ; Coloumn_Idx<COLOUMN_NUM ; Coloumn_Idx++)
 cfe:	00 e0       	ldi	r16, 0x00	; 0
 d00:	42 c0       	rjmp	.+132    	; 0xd86 <KPD_u8GetPressedKey+0x9e>
	{
		/*Activate Current Column*/
		DIO_voidSetPinValue(COLOUMN_PORT,Coloumn_Arr[Coloumn_Idx],PIN_LOW);
 d02:	c0 2e       	mov	r12, r16
 d04:	d1 2c       	mov	r13, r1
 d06:	f6 01       	movw	r30, r12
 d08:	ec 58       	subi	r30, 0x8C	; 140
 d0a:	ff 4f       	sbci	r31, 0xFF	; 255
 d0c:	40 e0       	ldi	r20, 0x00	; 0
 d0e:	60 81       	ld	r22, Z
 d10:	83 e0       	ldi	r24, 0x03	; 3
 d12:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
		for(u8 Row_Idx=0 ; Row_Idx<ROW_NUM ; Row_Idx++)
 d16:	10 e0       	ldi	r17, 0x00	; 0
 d18:	2b c0       	rjmp	.+86     	; 0xd70 <KPD_u8GetPressedKey+0x88>
		{
			/*Read Current Row*/
			DIO_u8GetPinValue(ROW_PORT,Row_Arr[Row_Idx],&Key_Status);
 d1a:	e1 2e       	mov	r14, r17
 d1c:	f1 2c       	mov	r15, r1
 d1e:	f7 01       	movw	r30, r14
 d20:	e0 59       	subi	r30, 0x90	; 144
 d22:	ff 4f       	sbci	r31, 0xFF	; 255
 d24:	ae 01       	movw	r20, r28
 d26:	4f 5f       	subi	r20, 0xFF	; 255
 d28:	5f 4f       	sbci	r21, 0xFF	; 255
 d2a:	60 81       	ld	r22, Z
 d2c:	82 e0       	ldi	r24, 0x02	; 2
 d2e:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_u8GetPinValue>
			/*Check for status of the switch*/
			if(Key_Status==PIN_LOW)
 d32:	89 81       	ldd	r24, Y+1	; 0x01
 d34:	81 11       	cpse	r24, r1
 d36:	1b c0       	rjmp	.+54     	; 0xd6e <KPD_u8GetPressedKey+0x86>
			{
				Pressed_Key = KPD_Arr[Row_Idx][Coloumn_Idx];
 d38:	c7 01       	movw	r24, r14
 d3a:	88 0f       	add	r24, r24
 d3c:	99 1f       	adc	r25, r25
 d3e:	88 0f       	add	r24, r24
 d40:	99 1f       	adc	r25, r25
 d42:	80 5a       	subi	r24, 0xA0	; 160
 d44:	9f 4f       	sbci	r25, 0xFF	; 255
 d46:	fc 01       	movw	r30, r24
 d48:	ec 0d       	add	r30, r12
 d4a:	fd 1d       	adc	r31, r13
 d4c:	10 81       	ld	r17, Z
				/*Polling for the Switch until released*/
				while(Key_Status==PIN_LOW)
 d4e:	0a c0       	rjmp	.+20     	; 0xd64 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(ROW_PORT,Row_Arr[Row_Idx],&Key_Status);
 d50:	ae 01       	movw	r20, r28
 d52:	4f 5f       	subi	r20, 0xFF	; 255
 d54:	5f 4f       	sbci	r21, 0xFF	; 255
 d56:	f7 01       	movw	r30, r14
 d58:	e0 59       	subi	r30, 0x90	; 144
 d5a:	ff 4f       	sbci	r31, 0xFF	; 255
 d5c:	60 81       	ld	r22, Z
 d5e:	82 e0       	ldi	r24, 0x02	; 2
 d60:	0e 94 79 07 	call	0xef2	; 0xef2 <DIO_u8GetPinValue>
			/*Check for status of the switch*/
			if(Key_Status==PIN_LOW)
			{
				Pressed_Key = KPD_Arr[Row_Idx][Coloumn_Idx];
				/*Polling for the Switch until released*/
				while(Key_Status==PIN_LOW)
 d64:	99 81       	ldd	r25, Y+1	; 0x01
 d66:	99 23       	and	r25, r25
 d68:	99 f3       	breq	.-26     	; 0xd50 <KPD_u8GetPressedKey+0x68>
				{
					DIO_u8GetPinValue(ROW_PORT,Row_Arr[Row_Idx],&Key_Status);
				}
				return Pressed_Key;
 d6a:	81 2f       	mov	r24, r17
 d6c:	10 c0       	rjmp	.+32     	; 0xd8e <KPD_u8GetPressedKey+0xa6>
	
	for(u8 Coloumn_Idx=0 ; Coloumn_Idx<COLOUMN_NUM ; Coloumn_Idx++)
	{
		/*Activate Current Column*/
		DIO_voidSetPinValue(COLOUMN_PORT,Coloumn_Arr[Coloumn_Idx],PIN_LOW);
		for(u8 Row_Idx=0 ; Row_Idx<ROW_NUM ; Row_Idx++)
 d6e:	1f 5f       	subi	r17, 0xFF	; 255
 d70:	14 30       	cpi	r17, 0x04	; 4
 d72:	98 f2       	brcs	.-90     	; 0xd1a <KPD_u8GetPressedKey+0x32>
				}
				return Pressed_Key;
			}
		}
		/*Deactivate Current Column*/
		DIO_voidSetPinValue(COLOUMN_PORT,Coloumn_Arr[Coloumn_Idx],PIN_HIGH);
 d74:	f6 01       	movw	r30, r12
 d76:	ec 58       	subi	r30, 0x8C	; 140
 d78:	ff 4f       	sbci	r31, 0xFF	; 255
 d7a:	41 e0       	ldi	r20, 0x01	; 1
 d7c:	60 81       	ld	r22, Z
 d7e:	83 e0       	ldi	r24, 0x03	; 3
 d80:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>

	static u8 KPD_Arr[ROW_NUM][COLOUMN_NUM] = KPD_ARR_VAL;
	static u8 Coloumn_Arr [COLOUMN_NUM] = {COLOUMN1,COLOUMN2,COLOUMN3,COLOUMN4};
	static u8 Row_Arr [ROW_NUM] = {ROW1,ROW2,ROW3,ROW4};
	
	for(u8 Coloumn_Idx=0 ; Coloumn_Idx<COLOUMN_NUM ; Coloumn_Idx++)
 d84:	0f 5f       	subi	r16, 0xFF	; 255
 d86:	04 30       	cpi	r16, 0x04	; 4
 d88:	08 f4       	brcc	.+2      	; 0xd8c <KPD_u8GetPressedKey+0xa4>
 d8a:	bb cf       	rjmp	.-138    	; 0xd02 <KPD_u8GetPressedKey+0x1a>
			}
		}
		/*Deactivate Current Column*/
		DIO_voidSetPinValue(COLOUMN_PORT,Coloumn_Arr[Coloumn_Idx],PIN_HIGH);
	}
	return Pressed_Key;
 d8c:	8f ef       	ldi	r24, 0xFF	; 255
 d8e:	0f 90       	pop	r0
 d90:	df 91       	pop	r29
 d92:	cf 91       	pop	r28
 d94:	1f 91       	pop	r17
 d96:	0f 91       	pop	r16
 d98:	ff 90       	pop	r15
 d9a:	ef 90       	pop	r14
 d9c:	df 90       	pop	r13
 d9e:	cf 90       	pop	r12
 da0:	08 95       	ret

Disassembly of section .text.LCD_voidSendCommand:

00000b34 <LCD_voidSendCommand>:
#include "LCD_private.h"
#include "LCD_register.h"
#include <util/delay.h>

void LCD_voidSendCommand(u8 Command)
{
 b34:	cf 93       	push	r28
 b36:	c8 2f       	mov	r28, r24
	/*Set RS pin to low for command*/
	DIO_voidSetPinValue(CTRL_PORT,RS,PIN_LOW);
 b38:	40 e0       	ldi	r20, 0x00	; 0
 b3a:	63 e0       	ldi	r22, 0x03	; 3
 b3c:	80 e0       	ldi	r24, 0x00	; 0
 b3e:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	
	/*Send Command to data pins*/
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Command,4));
 b42:	c4 fb       	bst	r28, 4
 b44:	44 27       	eor	r20, r20
 b46:	40 f9       	bld	r20, 0
 b48:	60 e0       	ldi	r22, 0x00	; 0
 b4a:	81 e0       	ldi	r24, 0x01	; 1
 b4c:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Command,5));
 b50:	c5 fb       	bst	r28, 5
 b52:	44 27       	eor	r20, r20
 b54:	40 f9       	bld	r20, 0
 b56:	61 e0       	ldi	r22, 0x01	; 1
 b58:	81 e0       	ldi	r24, 0x01	; 1
 b5a:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Command,6));
 b5e:	c6 fb       	bst	r28, 6
 b60:	44 27       	eor	r20, r20
 b62:	40 f9       	bld	r20, 0
 b64:	62 e0       	ldi	r22, 0x02	; 2
 b66:	81 e0       	ldi	r24, 0x01	; 1
 b68:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,GET_BIT(Command,7));
 b6c:	4c 2f       	mov	r20, r28
 b6e:	44 1f       	adc	r20, r20
 b70:	44 27       	eor	r20, r20
 b72:	44 1f       	adc	r20, r20
 b74:	64 e0       	ldi	r22, 0x04	; 4
 b76:	81 e0       	ldi	r24, 0x01	; 1
 b78:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	
	/*Enable Trigger Pulses*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 b7c:	41 e0       	ldi	r20, 0x01	; 1
 b7e:	62 e0       	ldi	r22, 0x02	; 2
 b80:	80 e0       	ldi	r24, 0x00	; 0
 b82:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b86:	89 ef       	ldi	r24, 0xF9	; 249
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	01 97       	sbiw	r24, 0x01	; 1
 b8c:	f1 f7       	brne	.-4      	; 0xb8a <LCD_voidSendCommand+0x56>
 b8e:	00 c0       	rjmp	.+0      	; 0xb90 <LCD_voidSendCommand+0x5c>
 b90:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 b92:	40 e0       	ldi	r20, 0x00	; 0
 b94:	62 e0       	ldi	r22, 0x02	; 2
 b96:	80 e0       	ldi	r24, 0x00	; 0
 b98:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 b9c:	89 ef       	ldi	r24, 0xF9	; 249
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	01 97       	sbiw	r24, 0x01	; 1
 ba2:	f1 f7       	brne	.-4      	; 0xba0 <LCD_voidSendCommand+0x6c>
 ba4:	00 c0       	rjmp	.+0      	; 0xba6 <LCD_voidSendCommand+0x72>
 ba6:	00 00       	nop
	_delay_ms(1);
	
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Command,0));
 ba8:	4c 2f       	mov	r20, r28
 baa:	41 70       	andi	r20, 0x01	; 1
 bac:	60 e0       	ldi	r22, 0x00	; 0
 bae:	81 e0       	ldi	r24, 0x01	; 1
 bb0:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Command,1));
 bb4:	c1 fb       	bst	r28, 1
 bb6:	44 27       	eor	r20, r20
 bb8:	40 f9       	bld	r20, 0
 bba:	61 e0       	ldi	r22, 0x01	; 1
 bbc:	81 e0       	ldi	r24, 0x01	; 1
 bbe:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Command,2));
 bc2:	c2 fb       	bst	r28, 2
 bc4:	44 27       	eor	r20, r20
 bc6:	40 f9       	bld	r20, 0
 bc8:	62 e0       	ldi	r22, 0x02	; 2
 bca:	81 e0       	ldi	r24, 0x01	; 1
 bcc:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,GET_BIT(Command,3));
 bd0:	c3 fb       	bst	r28, 3
 bd2:	44 27       	eor	r20, r20
 bd4:	40 f9       	bld	r20, 0
 bd6:	64 e0       	ldi	r22, 0x04	; 4
 bd8:	81 e0       	ldi	r24, 0x01	; 1
 bda:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	
	/*Enable Trigger Pulses*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 bde:	41 e0       	ldi	r20, 0x01	; 1
 be0:	62 e0       	ldi	r22, 0x02	; 2
 be2:	80 e0       	ldi	r24, 0x00	; 0
 be4:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 be8:	89 ef       	ldi	r24, 0xF9	; 249
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	01 97       	sbiw	r24, 0x01	; 1
 bee:	f1 f7       	brne	.-4      	; 0xbec <LCD_voidSendCommand+0xb8>
 bf0:	00 c0       	rjmp	.+0      	; 0xbf2 <LCD_voidSendCommand+0xbe>
 bf2:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 bf4:	40 e0       	ldi	r20, 0x00	; 0
 bf6:	62 e0       	ldi	r22, 0x02	; 2
 bf8:	80 e0       	ldi	r24, 0x00	; 0
 bfa:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 bfe:	83 ef       	ldi	r24, 0xF3	; 243
 c00:	91 e0       	ldi	r25, 0x01	; 1
 c02:	01 97       	sbiw	r24, 0x01	; 1
 c04:	f1 f7       	brne	.-4      	; 0xc02 <LCD_voidSendCommand+0xce>
 c06:	00 c0       	rjmp	.+0      	; 0xc08 <LCD_voidSendCommand+0xd4>
 c08:	00 00       	nop
	_delay_ms(2);
}
 c0a:	cf 91       	pop	r28
 c0c:	08 95       	ret

Disassembly of section .text.LCD_voidInit:

00000542 <LCD_voidInit>:
 542:	85 e4       	ldi	r24, 0x45	; 69
 544:	9e e1       	ldi	r25, 0x1E	; 30
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <LCD_voidInit+0x4>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <LCD_voidInit+0xa>
 54c:	00 00       	nop

void LCD_voidInit()
{
	_delay_ms(31);
	DIO_voidSetPinDirection(CTRL_PORT,RS,PIN_OUTPUT);
 54e:	41 e0       	ldi	r20, 0x01	; 1
 550:	63 e0       	ldi	r22, 0x03	; 3
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	0e 94 b4 04 	call	0x968	; 0x968 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CTRL_PORT,EN,PIN_OUTPUT);
 558:	41 e0       	ldi	r20, 0x01	; 1
 55a:	62 e0       	ldi	r22, 0x02	; 2
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	0e 94 b4 04 	call	0x968	; 0x968 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DATA_PORT,D4,PIN_OUTPUT);
 562:	41 e0       	ldi	r20, 0x01	; 1
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	0e 94 b4 04 	call	0x968	; 0x968 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DATA_PORT,D5,PIN_OUTPUT);
 56c:	41 e0       	ldi	r20, 0x01	; 1
 56e:	61 e0       	ldi	r22, 0x01	; 1
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	0e 94 b4 04 	call	0x968	; 0x968 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DATA_PORT,D6,PIN_OUTPUT);
 576:	41 e0       	ldi	r20, 0x01	; 1
 578:	62 e0       	ldi	r22, 0x02	; 2
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	0e 94 b4 04 	call	0x968	; 0x968 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DATA_PORT,D7,PIN_OUTPUT);
 580:	41 e0       	ldi	r20, 0x01	; 1
 582:	64 e0       	ldi	r22, 0x04	; 4
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	0e 94 b4 04 	call	0x968	; 0x968 <DIO_voidSetPinDirection>
	
	/*1/Function Set*/
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_LOW);
 58a:	40 e0       	ldi	r20, 0x00	; 0
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_HIGH);
 594:	41 e0       	ldi	r20, 0x01	; 1
 596:	61 e0       	ldi	r22, 0x01	; 1
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);
 59e:	40 e0       	ldi	r20, 0x00	; 0
 5a0:	62 e0       	ldi	r22, 0x02	; 2
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 5a8:	40 e0       	ldi	r20, 0x00	; 0
 5aa:	64 e0       	ldi	r22, 0x04	; 4
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 5b2:	41 e0       	ldi	r20, 0x01	; 1
 5b4:	62 e0       	ldi	r22, 0x02	; 2
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 5bc:	83 ef       	ldi	r24, 0xF3	; 243
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <LCD_voidInit+0x7e>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <LCD_voidInit+0x84>
 5c6:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 5c8:	40 e0       	ldi	r20, 0x00	; 0
 5ca:	62 e0       	ldi	r22, 0x02	; 2
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 5d2:	83 ef       	ldi	r24, 0xF3	; 243
 5d4:	91 e0       	ldi	r25, 0x01	; 1
 5d6:	01 97       	sbiw	r24, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <LCD_voidInit+0x94>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <LCD_voidInit+0x9a>
 5dc:	00 00       	nop
	_delay_ms(2);
	
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_LOW);
 5de:	40 e0       	ldi	r20, 0x00	; 0
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_HIGH);
 5e8:	41 e0       	ldi	r20, 0x01	; 1
 5ea:	61 e0       	ldi	r22, 0x01	; 1
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);
 5f2:	40 e0       	ldi	r20, 0x00	; 0
 5f4:	62 e0       	ldi	r22, 0x02	; 2
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 5fc:	40 e0       	ldi	r20, 0x00	; 0
 5fe:	64 e0       	ldi	r22, 0x04	; 4
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 606:	41 e0       	ldi	r20, 0x01	; 1
 608:	62 e0       	ldi	r22, 0x02	; 2
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 610:	83 ef       	ldi	r24, 0xF3	; 243
 612:	91 e0       	ldi	r25, 0x01	; 1
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <LCD_voidInit+0xd2>
 618:	00 c0       	rjmp	.+0      	; 0x61a <LCD_voidInit+0xd8>
 61a:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	62 e0       	ldi	r22, 0x02	; 2
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 626:	83 ef       	ldi	r24, 0xF3	; 243
 628:	91 e0       	ldi	r25, 0x01	; 1
 62a:	01 97       	sbiw	r24, 0x01	; 1
 62c:	f1 f7       	brne	.-4      	; 0x62a <LCD_voidInit+0xe8>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <LCD_voidInit+0xee>
 630:	00 00       	nop
	_delay_ms(2);
	
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);// fONT 5*8
 632:	40 e0       	ldi	r20, 0x00	; 0
 634:	62 e0       	ldi	r22, 0x02	; 2
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_HIGH);// 2 lines
 63c:	41 e0       	ldi	r20, 0x01	; 1
 63e:	64 e0       	ldi	r22, 0x04	; 4
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,PIN2,PIN_HIGH);
 646:	41 e0       	ldi	r20, 0x01	; 1
 648:	62 e0       	ldi	r22, 0x02	; 2
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 650:	83 ef       	ldi	r24, 0xF3	; 243
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <LCD_voidInit+0x112>
 658:	00 c0       	rjmp	.+0      	; 0x65a <LCD_voidInit+0x118>
 65a:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,PIN2,PIN_LOW);
 65c:	40 e0       	ldi	r20, 0x00	; 0
 65e:	62 e0       	ldi	r22, 0x02	; 2
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 666:	83 ef       	ldi	r24, 0xF3	; 243
 668:	91 e0       	ldi	r25, 0x01	; 1
 66a:	01 97       	sbiw	r24, 0x01	; 1
 66c:	f1 f7       	brne	.-4      	; 0x66a <LCD_voidInit+0x128>
 66e:	00 c0       	rjmp	.+0      	; 0x670 <LCD_voidInit+0x12e>
 670:	00 00       	nop
	_delay_ms(2);
	
	/*2/Display on off control: display enable, disable cursor, no blink cursor*/
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_LOW);
 672:	40 e0       	ldi	r20, 0x00	; 0
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_LOW);
 67c:	40 e0       	ldi	r20, 0x00	; 0
 67e:	61 e0       	ldi	r22, 0x01	; 1
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);
 686:	40 e0       	ldi	r20, 0x00	; 0
 688:	62 e0       	ldi	r22, 0x02	; 2
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 690:	40 e0       	ldi	r20, 0x00	; 0
 692:	64 e0       	ldi	r22, 0x04	; 4
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 69a:	41 e0       	ldi	r20, 0x01	; 1
 69c:	62 e0       	ldi	r22, 0x02	; 2
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 6a4:	83 ef       	ldi	r24, 0xF3	; 243
 6a6:	91 e0       	ldi	r25, 0x01	; 1
 6a8:	01 97       	sbiw	r24, 0x01	; 1
 6aa:	f1 f7       	brne	.-4      	; 0x6a8 <LCD_voidInit+0x166>
 6ac:	00 c0       	rjmp	.+0      	; 0x6ae <LCD_voidInit+0x16c>
 6ae:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 6b0:	40 e0       	ldi	r20, 0x00	; 0
 6b2:	62 e0       	ldi	r22, 0x02	; 2
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 6ba:	83 ef       	ldi	r24, 0xF3	; 243
 6bc:	91 e0       	ldi	r25, 0x01	; 1
 6be:	01 97       	sbiw	r24, 0x01	; 1
 6c0:	f1 f7       	brne	.-4      	; 0x6be <LCD_voidInit+0x17c>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <LCD_voidInit+0x182>
 6c4:	00 00       	nop
	_delay_ms(2);
	
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_LOW);
 6c6:	40 e0       	ldi	r20, 0x00	; 0
 6c8:	60 e0       	ldi	r22, 0x00	; 0
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_LOW);
 6d0:	40 e0       	ldi	r20, 0x00	; 0
 6d2:	61 e0       	ldi	r22, 0x01	; 1
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_HIGH);
 6da:	41 e0       	ldi	r20, 0x01	; 1
 6dc:	62 e0       	ldi	r22, 0x02	; 2
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_HIGH);
 6e4:	41 e0       	ldi	r20, 0x01	; 1
 6e6:	64 e0       	ldi	r22, 0x04	; 4
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 6ee:	41 e0       	ldi	r20, 0x01	; 1
 6f0:	62 e0       	ldi	r22, 0x02	; 2
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 6f8:	83 ef       	ldi	r24, 0xF3	; 243
 6fa:	91 e0       	ldi	r25, 0x01	; 1
 6fc:	01 97       	sbiw	r24, 0x01	; 1
 6fe:	f1 f7       	brne	.-4      	; 0x6fc <LCD_voidInit+0x1ba>
 700:	00 c0       	rjmp	.+0      	; 0x702 <LCD_voidInit+0x1c0>
 702:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 704:	40 e0       	ldi	r20, 0x00	; 0
 706:	62 e0       	ldi	r22, 0x02	; 2
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 70e:	83 ef       	ldi	r24, 0xF3	; 243
 710:	91 e0       	ldi	r25, 0x01	; 1
 712:	01 97       	sbiw	r24, 0x01	; 1
 714:	f1 f7       	brne	.-4      	; 0x712 <LCD_voidInit+0x1d0>
 716:	00 c0       	rjmp	.+0      	; 0x718 <LCD_voidInit+0x1d6>
 718:	00 00       	nop
	_delay_ms(2);
	
	/*3/Clear display*/
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_LOW);
 71a:	40 e0       	ldi	r20, 0x00	; 0
 71c:	60 e0       	ldi	r22, 0x00	; 0
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_LOW);
 724:	40 e0       	ldi	r20, 0x00	; 0
 726:	61 e0       	ldi	r22, 0x01	; 1
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);
 72e:	40 e0       	ldi	r20, 0x00	; 0
 730:	62 e0       	ldi	r22, 0x02	; 2
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 738:	40 e0       	ldi	r20, 0x00	; 0
 73a:	64 e0       	ldi	r22, 0x04	; 4
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 742:	41 e0       	ldi	r20, 0x01	; 1
 744:	62 e0       	ldi	r22, 0x02	; 2
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 74c:	83 ef       	ldi	r24, 0xF3	; 243
 74e:	91 e0       	ldi	r25, 0x01	; 1
 750:	01 97       	sbiw	r24, 0x01	; 1
 752:	f1 f7       	brne	.-4      	; 0x750 <LCD_voidInit+0x20e>
 754:	00 c0       	rjmp	.+0      	; 0x756 <LCD_voidInit+0x214>
 756:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 758:	40 e0       	ldi	r20, 0x00	; 0
 75a:	62 e0       	ldi	r22, 0x02	; 2
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 762:	83 ef       	ldi	r24, 0xF3	; 243
 764:	91 e0       	ldi	r25, 0x01	; 1
 766:	01 97       	sbiw	r24, 0x01	; 1
 768:	f1 f7       	brne	.-4      	; 0x766 <LCD_voidInit+0x224>
 76a:	00 c0       	rjmp	.+0      	; 0x76c <LCD_voidInit+0x22a>
 76c:	00 00       	nop
	_delay_ms(2);
	
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_HIGH);
 76e:	41 e0       	ldi	r20, 0x01	; 1
 770:	60 e0       	ldi	r22, 0x00	; 0
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_LOW);
 778:	40 e0       	ldi	r20, 0x00	; 0
 77a:	61 e0       	ldi	r22, 0x01	; 1
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);
 782:	40 e0       	ldi	r20, 0x00	; 0
 784:	62 e0       	ldi	r22, 0x02	; 2
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 78c:	40 e0       	ldi	r20, 0x00	; 0
 78e:	64 e0       	ldi	r22, 0x04	; 4
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 796:	41 e0       	ldi	r20, 0x01	; 1
 798:	62 e0       	ldi	r22, 0x02	; 2
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 7a0:	83 ef       	ldi	r24, 0xF3	; 243
 7a2:	91 e0       	ldi	r25, 0x01	; 1
 7a4:	01 97       	sbiw	r24, 0x01	; 1
 7a6:	f1 f7       	brne	.-4      	; 0x7a4 <LCD_voidInit+0x262>
 7a8:	00 c0       	rjmp	.+0      	; 0x7aa <LCD_voidInit+0x268>
 7aa:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 7ac:	40 e0       	ldi	r20, 0x00	; 0
 7ae:	62 e0       	ldi	r22, 0x02	; 2
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 7b6:	83 ef       	ldi	r24, 0xF3	; 243
 7b8:	91 e0       	ldi	r25, 0x01	; 1
 7ba:	01 97       	sbiw	r24, 0x01	; 1
 7bc:	f1 f7       	brne	.-4      	; 0x7ba <LCD_voidInit+0x278>
 7be:	00 c0       	rjmp	.+0      	; 0x7c0 <LCD_voidInit+0x27e>
 7c0:	00 00       	nop
	_delay_ms(2);

	/*4/Entry Mode*/
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_LOW);
 7c2:	40 e0       	ldi	r20, 0x00	; 0
 7c4:	60 e0       	ldi	r22, 0x00	; 0
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_LOW);
 7cc:	40 e0       	ldi	r20, 0x00	; 0
 7ce:	61 e0       	ldi	r22, 0x01	; 1
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);
 7d6:	40 e0       	ldi	r20, 0x00	; 0
 7d8:	62 e0       	ldi	r22, 0x02	; 2
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 7e0:	40 e0       	ldi	r20, 0x00	; 0
 7e2:	64 e0       	ldi	r22, 0x04	; 4
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 7ea:	41 e0       	ldi	r20, 0x01	; 1
 7ec:	62 e0       	ldi	r22, 0x02	; 2
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 7f4:	83 ef       	ldi	r24, 0xF3	; 243
 7f6:	91 e0       	ldi	r25, 0x01	; 1
 7f8:	01 97       	sbiw	r24, 0x01	; 1
 7fa:	f1 f7       	brne	.-4      	; 0x7f8 <LCD_voidInit+0x2b6>
 7fc:	00 c0       	rjmp	.+0      	; 0x7fe <LCD_voidInit+0x2bc>
 7fe:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 800:	40 e0       	ldi	r20, 0x00	; 0
 802:	62 e0       	ldi	r22, 0x02	; 2
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 80a:	83 ef       	ldi	r24, 0xF3	; 243
 80c:	91 e0       	ldi	r25, 0x01	; 1
 80e:	01 97       	sbiw	r24, 0x01	; 1
 810:	f1 f7       	brne	.-4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 812:	00 c0       	rjmp	.+0      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 814:	00 00       	nop
	_delay_ms(2);
	
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_HIGH);
 816:	41 e0       	ldi	r20, 0x01	; 1
 818:	60 e0       	ldi	r22, 0x00	; 0
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_HIGH);
 820:	41 e0       	ldi	r20, 0x01	; 1
 822:	61 e0       	ldi	r22, 0x01	; 1
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_HIGH);
 82a:	41 e0       	ldi	r20, 0x01	; 1
 82c:	62 e0       	ldi	r22, 0x02	; 2
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 834:	40 e0       	ldi	r20, 0x00	; 0
 836:	64 e0       	ldi	r22, 0x04	; 4
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 83e:	41 e0       	ldi	r20, 0x01	; 1
 840:	62 e0       	ldi	r22, 0x02	; 2
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 848:	83 ef       	ldi	r24, 0xF3	; 243
 84a:	91 e0       	ldi	r25, 0x01	; 1
 84c:	01 97       	sbiw	r24, 0x01	; 1
 84e:	f1 f7       	brne	.-4      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 850:	00 c0       	rjmp	.+0      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 852:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 854:	40 e0       	ldi	r20, 0x00	; 0
 856:	62 e0       	ldi	r22, 0x02	; 2
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 85e:	83 ef       	ldi	r24, 0xF3	; 243
 860:	91 e0       	ldi	r25, 0x01	; 1
 862:	01 97       	sbiw	r24, 0x01	; 1
 864:	f1 f7       	brne	.-4      	; 0x862 <__stack+0x3>
 866:	00 c0       	rjmp	.+0      	; 0x868 <__stack+0x9>
 868:	00 00       	nop
 86a:	08 95       	ret

Disassembly of section .text.LCD_voidSendData:

00000c0e <LCD_voidSendData>:
	_delay_ms(2);
}

void LCD_voidSendData(u8 Data)
{
 c0e:	cf 93       	push	r28
 c10:	c8 2f       	mov	r28, r24
	/*Set RS pin to high for Data*/
	DIO_voidSetPinValue(CTRL_PORT,RS,PIN_HIGH);
 c12:	41 e0       	ldi	r20, 0x01	; 1
 c14:	63 e0       	ldi	r22, 0x03	; 3
 c16:	80 e0       	ldi	r24, 0x00	; 0
 c18:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	
	/*Send Data*/
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Data,4));
 c1c:	c4 fb       	bst	r28, 4
 c1e:	44 27       	eor	r20, r20
 c20:	40 f9       	bld	r20, 0
 c22:	60 e0       	ldi	r22, 0x00	; 0
 c24:	81 e0       	ldi	r24, 0x01	; 1
 c26:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Data,5));
 c2a:	c5 fb       	bst	r28, 5
 c2c:	44 27       	eor	r20, r20
 c2e:	40 f9       	bld	r20, 0
 c30:	61 e0       	ldi	r22, 0x01	; 1
 c32:	81 e0       	ldi	r24, 0x01	; 1
 c34:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Data,6));
 c38:	c6 fb       	bst	r28, 6
 c3a:	44 27       	eor	r20, r20
 c3c:	40 f9       	bld	r20, 0
 c3e:	62 e0       	ldi	r22, 0x02	; 2
 c40:	81 e0       	ldi	r24, 0x01	; 1
 c42:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,GET_BIT(Data,7));
 c46:	4c 2f       	mov	r20, r28
 c48:	44 1f       	adc	r20, r20
 c4a:	44 27       	eor	r20, r20
 c4c:	44 1f       	adc	r20, r20
 c4e:	64 e0       	ldi	r22, 0x04	; 4
 c50:	81 e0       	ldi	r24, 0x01	; 1
 c52:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 c56:	41 e0       	ldi	r20, 0x01	; 1
 c58:	62 e0       	ldi	r22, 0x02	; 2
 c5a:	80 e0       	ldi	r24, 0x00	; 0
 c5c:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 c60:	89 ef       	ldi	r24, 0xF9	; 249
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	01 97       	sbiw	r24, 0x01	; 1
 c66:	f1 f7       	brne	.-4      	; 0xc64 <LCD_voidSendData+0x56>
 c68:	00 c0       	rjmp	.+0      	; 0xc6a <LCD_voidSendData+0x5c>
 c6a:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 c6c:	40 e0       	ldi	r20, 0x00	; 0
 c6e:	62 e0       	ldi	r22, 0x02	; 2
 c70:	80 e0       	ldi	r24, 0x00	; 0
 c72:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 c76:	89 ef       	ldi	r24, 0xF9	; 249
 c78:	90 e0       	ldi	r25, 0x00	; 0
 c7a:	01 97       	sbiw	r24, 0x01	; 1
 c7c:	f1 f7       	brne	.-4      	; 0xc7a <LCD_voidSendData+0x6c>
 c7e:	00 c0       	rjmp	.+0      	; 0xc80 <LCD_voidSendData+0x72>
 c80:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Data,0));
 c82:	4c 2f       	mov	r20, r28
 c84:	41 70       	andi	r20, 0x01	; 1
 c86:	60 e0       	ldi	r22, 0x00	; 0
 c88:	81 e0       	ldi	r24, 0x01	; 1
 c8a:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Data,1));
 c8e:	c1 fb       	bst	r28, 1
 c90:	44 27       	eor	r20, r20
 c92:	40 f9       	bld	r20, 0
 c94:	61 e0       	ldi	r22, 0x01	; 1
 c96:	81 e0       	ldi	r24, 0x01	; 1
 c98:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Data,2));
 c9c:	c2 fb       	bst	r28, 2
 c9e:	44 27       	eor	r20, r20
 ca0:	40 f9       	bld	r20, 0
 ca2:	62 e0       	ldi	r22, 0x02	; 2
 ca4:	81 e0       	ldi	r24, 0x01	; 1
 ca6:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,GET_BIT(Data,3));
 caa:	c3 fb       	bst	r28, 3
 cac:	44 27       	eor	r20, r20
 cae:	40 f9       	bld	r20, 0
 cb0:	64 e0       	ldi	r22, 0x04	; 4
 cb2:	81 e0       	ldi	r24, 0x01	; 1
 cb4:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 cb8:	41 e0       	ldi	r20, 0x01	; 1
 cba:	62 e0       	ldi	r22, 0x02	; 2
 cbc:	80 e0       	ldi	r24, 0x00	; 0
 cbe:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 cc2:	89 ef       	ldi	r24, 0xF9	; 249
 cc4:	90 e0       	ldi	r25, 0x00	; 0
 cc6:	01 97       	sbiw	r24, 0x01	; 1
 cc8:	f1 f7       	brne	.-4      	; 0xcc6 <LCD_voidSendData+0xb8>
 cca:	00 c0       	rjmp	.+0      	; 0xccc <LCD_voidSendData+0xbe>
 ccc:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 cce:	40 e0       	ldi	r20, 0x00	; 0
 cd0:	62 e0       	ldi	r22, 0x02	; 2
 cd2:	80 e0       	ldi	r24, 0x00	; 0
 cd4:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 cd8:	89 ef       	ldi	r24, 0xF9	; 249
 cda:	90 e0       	ldi	r25, 0x00	; 0
 cdc:	01 97       	sbiw	r24, 0x01	; 1
 cde:	f1 f7       	brne	.-4      	; 0xcdc <LCD_voidSendData+0xce>
 ce0:	00 c0       	rjmp	.+0      	; 0xce2 <LCD_voidSendData+0xd4>
 ce2:	00 00       	nop
	_delay_ms(1);
}
 ce4:	cf 91       	pop	r28
 ce6:	08 95       	ret

Disassembly of section .text.LCD_voidSendString:

00000f78 <LCD_voidSendString>:

void LCD_voidSendString(const char *String)
{
 f78:	cf 92       	push	r12
 f7a:	df 92       	push	r13
 f7c:	ef 92       	push	r14
 f7e:	cf 93       	push	r28
 f80:	6b 01       	movw	r12, r22
 f82:	e8 2e       	mov	r14, r24
	u8 Counter=0;
 f84:	c0 e0       	ldi	r28, 0x00	; 0
	while(String[Counter]!='\0')
 f86:	03 c0       	rjmp	.+6      	; 0xf8e <LCD_voidSendString+0x16>
	{
		LCD_voidSendData(String[Counter]);
 f88:	0e 94 07 06 	call	0xc0e	; 0xc0e <LCD_voidSendData>
		Counter++;
 f8c:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_voidSendString(const char *String)
{
	u8 Counter=0;
	while(String[Counter]!='\0')
 f8e:	ae 2d       	mov	r26, r14
 f90:	c6 01       	movw	r24, r12
 f92:	8c 0f       	add	r24, r28
 f94:	91 1d       	adc	r25, r1
 f96:	a1 1d       	adc	r26, r1
 f98:	fc 01       	movw	r30, r24
 f9a:	84 91       	lpm	r24, Z
 f9c:	a7 fd       	sbrc	r26, 7
 f9e:	80 81       	ld	r24, Z
 fa0:	81 11       	cpse	r24, r1
 fa2:	f2 cf       	rjmp	.-28     	; 0xf88 <LCD_voidSendString+0x10>
	{
		LCD_voidSendData(String[Counter]);
		Counter++;
	}
}
 fa4:	cf 91       	pop	r28
 fa6:	ef 90       	pop	r14
 fa8:	df 90       	pop	r13
 faa:	cf 90       	pop	r12
 fac:	08 95       	ret

Disassembly of section .text.LCD_voidGoToXY:

0000086c <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 X_Pos, u8 Y_Pos)
{
 86c:	cf 93       	push	r28
	u8 Address=0;
	/*Location at First line*/
	if(X_Pos==0)
 86e:	81 11       	cpse	r24, r1
 870:	03 c0       	rjmp	.+6      	; 0x878 <LCD_voidGoToXY+0xc>
	{
		Address = Y_Pos + 0x80;
 872:	c0 e8       	ldi	r28, 0x80	; 128
 874:	c6 0f       	add	r28, r22
 876:	10 c0       	rjmp	.+32     	; 0x898 <LCD_voidGoToXY+0x2c>
	}
	/*Location at Second line*/
	else if(X_Pos==1)
 878:	81 30       	cpi	r24, 0x01	; 1
 87a:	19 f4       	brne	.+6      	; 0x882 <LCD_voidGoToXY+0x16>
	{
		Address = Y_Pos + 0xC0;
 87c:	c0 ec       	ldi	r28, 0xC0	; 192
 87e:	c6 0f       	add	r28, r22
 880:	0b c0       	rjmp	.+22     	; 0x898 <LCD_voidGoToXY+0x2c>
	}
	/*Location at third line*/
	else if(X_Pos==2)
 882:	82 30       	cpi	r24, 0x02	; 2
 884:	19 f4       	brne	.+6      	; 0x88c <LCD_voidGoToXY+0x20>
	{
		Address = Y_Pos + 0x94;
 886:	c4 e9       	ldi	r28, 0x94	; 148
 888:	c6 0f       	add	r28, r22
 88a:	06 c0       	rjmp	.+12     	; 0x898 <LCD_voidGoToXY+0x2c>
	}
	/*Location at fourth line*/
	else if(X_Pos==3)
 88c:	83 30       	cpi	r24, 0x03	; 3
 88e:	19 f4       	brne	.+6      	; 0x896 <LCD_voidGoToXY+0x2a>
	{
		Address = Y_Pos + 0xd4;
 890:	c4 ed       	ldi	r28, 0xD4	; 212
 892:	c6 0f       	add	r28, r22
 894:	01 c0       	rjmp	.+2      	; 0x898 <LCD_voidGoToXY+0x2c>
	}
}

void LCD_voidGoToXY(u8 X_Pos, u8 Y_Pos)
{
	u8 Address=0;
 896:	c0 e0       	ldi	r28, 0x00	; 0
	}
	
	///Set DDRAM Address Command////
	
	/*Set RS pin to low for command*/
	DIO_voidSetPinValue(CTRL_PORT,RS,PIN_LOW);
 898:	40 e0       	ldi	r20, 0x00	; 0
 89a:	63 e0       	ldi	r22, 0x03	; 3
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	
	/*Send Address to Data pins*/
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Address,4));
 8a2:	c4 fb       	bst	r28, 4
 8a4:	44 27       	eor	r20, r20
 8a6:	40 f9       	bld	r20, 0
 8a8:	60 e0       	ldi	r22, 0x00	; 0
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Address,5));
 8b0:	c5 fb       	bst	r28, 5
 8b2:	44 27       	eor	r20, r20
 8b4:	40 f9       	bld	r20, 0
 8b6:	61 e0       	ldi	r22, 0x01	; 1
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Address,6));
 8be:	c6 fb       	bst	r28, 6
 8c0:	44 27       	eor	r20, r20
 8c2:	40 f9       	bld	r20, 0
 8c4:	62 e0       	ldi	r22, 0x02	; 2
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	/*Set D7 high*/
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_HIGH);
 8cc:	41 e0       	ldi	r20, 0x01	; 1
 8ce:	64 e0       	ldi	r22, 0x04	; 4
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 8d6:	41 e0       	ldi	r20, 0x01	; 1
 8d8:	62 e0       	ldi	r22, 0x02	; 2
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 8e0:	89 ef       	ldi	r24, 0xF9	; 249
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	01 97       	sbiw	r24, 0x01	; 1
 8e6:	f1 f7       	brne	.-4      	; 0x8e4 <LCD_voidGoToXY+0x78>
 8e8:	00 c0       	rjmp	.+0      	; 0x8ea <LCD_voidGoToXY+0x7e>
 8ea:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 8ec:	40 e0       	ldi	r20, 0x00	; 0
 8ee:	62 e0       	ldi	r22, 0x02	; 2
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 8f6:	89 ef       	ldi	r24, 0xF9	; 249
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	01 97       	sbiw	r24, 0x01	; 1
 8fc:	f1 f7       	brne	.-4      	; 0x8fa <LCD_voidGoToXY+0x8e>
 8fe:	00 c0       	rjmp	.+0      	; 0x900 <LCD_voidGoToXY+0x94>
 900:	00 00       	nop
	_delay_ms(1);
	
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Address,0));
 902:	4c 2f       	mov	r20, r28
 904:	41 70       	andi	r20, 0x01	; 1
 906:	60 e0       	ldi	r22, 0x00	; 0
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Address,1));
 90e:	c1 fb       	bst	r28, 1
 910:	44 27       	eor	r20, r20
 912:	40 f9       	bld	r20, 0
 914:	61 e0       	ldi	r22, 0x01	; 1
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Address,2));
 91c:	c2 fb       	bst	r28, 2
 91e:	44 27       	eor	r20, r20
 920:	40 f9       	bld	r20, 0
 922:	62 e0       	ldi	r22, 0x02	; 2
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,GET_BIT(Address,3));
 92a:	c3 fb       	bst	r28, 3
 92c:	44 27       	eor	r20, r20
 92e:	40 f9       	bld	r20, 0
 930:	64 e0       	ldi	r22, 0x04	; 4
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 938:	41 e0       	ldi	r20, 0x01	; 1
 93a:	62 e0       	ldi	r22, 0x02	; 2
 93c:	80 e0       	ldi	r24, 0x00	; 0
 93e:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 942:	89 ef       	ldi	r24, 0xF9	; 249
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	01 97       	sbiw	r24, 0x01	; 1
 948:	f1 f7       	brne	.-4      	; 0x946 <LCD_voidGoToXY+0xda>
 94a:	00 c0       	rjmp	.+0      	; 0x94c <LCD_voidGoToXY+0xe0>
 94c:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 94e:	40 e0       	ldi	r20, 0x00	; 0
 950:	62 e0       	ldi	r22, 0x02	; 2
 952:	80 e0       	ldi	r24, 0x00	; 0
 954:	0e 94 27 05 	call	0xa4e	; 0xa4e <DIO_voidSetPinValue>
 958:	89 ef       	ldi	r24, 0xF9	; 249
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	01 97       	sbiw	r24, 0x01	; 1
 95e:	f1 f7       	brne	.-4      	; 0x95c <LCD_voidGoToXY+0xf0>
 960:	00 c0       	rjmp	.+0      	; 0x962 <LCD_voidGoToXY+0xf6>
 962:	00 00       	nop
	_delay_ms(1);
}
 964:	cf 91       	pop	r28
 966:	08 95       	ret

Disassembly of section .text.LCD_voidWriteNumber:

00000da2 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u16 Number)
{
 da2:	1f 93       	push	r17
 da4:	cf 93       	push	r28
 da6:	df 93       	push	r29
 da8:	00 d0       	rcall	.+0      	; 0xdaa <LCD_voidWriteNumber+0x8>
 daa:	00 d0       	rcall	.+0      	; 0xdac <LCD_voidWriteNumber+0xa>
 dac:	cd b7       	in	r28, 0x3d	; 61
 dae:	de b7       	in	r29, 0x3e	; 62
 db0:	ac 01       	movw	r20, r24
	u16 temp;
	u8 Idx,Arr[SIZE_ARRAY_NUMBERS],Counter=0;
	if(Number==0)
 db2:	89 2b       	or	r24, r25
 db4:	81 f5       	brne	.+96     	; 0xe16 <LCD_voidWriteNumber+0x74>
	{
		LCD_voidSendData('0');
 db6:	80 e3       	ldi	r24, 0x30	; 48
 db8:	0e 94 07 06 	call	0xc0e	; 0xc0e <LCD_voidSendData>
 dbc:	41 c0       	rjmp	.+130    	; 0xe40 <LCD_voidWriteNumber+0x9e>
	}
	else
	{
	while(Number!=0)
	{
		temp = Number%10;
 dbe:	9a 01       	movw	r18, r20
 dc0:	ad ec       	ldi	r26, 0xCD	; 205
 dc2:	bc ec       	ldi	r27, 0xCC	; 204
 dc4:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
 dc8:	96 95       	lsr	r25
 dca:	87 95       	ror	r24
 dcc:	96 95       	lsr	r25
 dce:	87 95       	ror	r24
 dd0:	96 95       	lsr	r25
 dd2:	87 95       	ror	r24
 dd4:	9c 01       	movw	r18, r24
 dd6:	22 0f       	add	r18, r18
 dd8:	33 1f       	adc	r19, r19
 dda:	88 0f       	add	r24, r24
 ddc:	99 1f       	adc	r25, r25
 dde:	88 0f       	add	r24, r24
 de0:	99 1f       	adc	r25, r25
 de2:	88 0f       	add	r24, r24
 de4:	99 1f       	adc	r25, r25
 de6:	82 0f       	add	r24, r18
 de8:	93 1f       	adc	r25, r19
 dea:	9a 01       	movw	r18, r20
 dec:	28 1b       	sub	r18, r24
 dee:	39 0b       	sbc	r19, r25
		Arr[Counter] = temp;
 df0:	e1 e0       	ldi	r30, 0x01	; 1
 df2:	f0 e0       	ldi	r31, 0x00	; 0
 df4:	ec 0f       	add	r30, r28
 df6:	fd 1f       	adc	r31, r29
 df8:	e1 0f       	add	r30, r17
 dfa:	f1 1d       	adc	r31, r1
 dfc:	20 83       	st	Z, r18
		Number/=10;
 dfe:	9a 01       	movw	r18, r20
 e00:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__umulhisi3>
 e04:	ac 01       	movw	r20, r24
 e06:	56 95       	lsr	r21
 e08:	47 95       	ror	r20
 e0a:	56 95       	lsr	r21
 e0c:	47 95       	ror	r20
 e0e:	56 95       	lsr	r21
 e10:	47 95       	ror	r20
		Counter++;
 e12:	1f 5f       	subi	r17, 0xFF	; 255
 e14:	01 c0       	rjmp	.+2      	; 0xe18 <LCD_voidWriteNumber+0x76>
 e16:	10 e0       	ldi	r17, 0x00	; 0
	{
		LCD_voidSendData('0');
	}
	else
	{
	while(Number!=0)
 e18:	41 15       	cp	r20, r1
 e1a:	51 05       	cpc	r21, r1
 e1c:	81 f6       	brne	.-96     	; 0xdbe <LCD_voidWriteNumber+0x1c>
 e1e:	0e c0       	rjmp	.+28     	; 0xe3c <LCD_voidWriteNumber+0x9a>
		Counter++;
	}
	
			for(Idx=Counter; Idx>0;Idx--)
			{
				LCD_voidSendData(Arr[Idx-1] + 48);//+ 48 for  represented integer for characters.
 e20:	e1 2f       	mov	r30, r17
 e22:	f0 e0       	ldi	r31, 0x00	; 0
 e24:	31 97       	sbiw	r30, 0x01	; 1
 e26:	81 e0       	ldi	r24, 0x01	; 1
 e28:	90 e0       	ldi	r25, 0x00	; 0
 e2a:	8c 0f       	add	r24, r28
 e2c:	9d 1f       	adc	r25, r29
 e2e:	e8 0f       	add	r30, r24
 e30:	f9 1f       	adc	r31, r25
 e32:	80 81       	ld	r24, Z
 e34:	80 5d       	subi	r24, 0xD0	; 208
 e36:	0e 94 07 06 	call	0xc0e	; 0xc0e <LCD_voidSendData>
		Arr[Counter] = temp;
		Number/=10;
		Counter++;
	}
	
			for(Idx=Counter; Idx>0;Idx--)
 e3a:	11 50       	subi	r17, 0x01	; 1
 e3c:	11 11       	cpse	r17, r1
 e3e:	f0 cf       	rjmp	.-32     	; 0xe20 <LCD_voidWriteNumber+0x7e>
			{
				LCD_voidSendData(Arr[Idx-1] + 48);//+ 48 for  represented integer for characters.
			}
	}	
}
 e40:	0f 90       	pop	r0
 e42:	0f 90       	pop	r0
 e44:	0f 90       	pop	r0
 e46:	0f 90       	pop	r0
 e48:	df 91       	pop	r29
 e4a:	cf 91       	pop	r28
 e4c:	1f 91       	pop	r17
 e4e:	08 95       	ret

Disassembly of section .text.main:

000000bc <main>:
#include "LCD_interface.h"
#include "KPD_interface.h"
#include <util/delay.h>

int main()
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	a8 97       	sbiw	r28, 0x28	; 40
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	cd bf       	out	0x3d, r28	; 61
	LCD_voidInit();
  d0:	0e 94 a1 02 	call	0x542	; 0x542 <LCD_voidInit>
	KPD_u8Init();
  d4:	0e 94 28 07 	call	0xe50	; 0xe50 <KPD_u8Init>
	u8 flag=0;
	u8 Count=0;
	u16 num[20];
	u16 result=0;
	
	LCD_voidGoToXY(1,5);
  d8:	65 e0       	ldi	r22, 0x05	; 5
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 36 04 	call	0x86c	; 0x86c <LCD_voidGoToXY>
	LCD_voidSendString("Calculator");
  e0:	60 eb       	ldi	r22, 0xB0	; 176
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD_voidSendString>
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	33 ed       	ldi	r19, 0xD3	; 211
  ee:	80 e3       	ldi	r24, 0x30	; 48
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	30 40       	sbci	r19, 0x00	; 0
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x34>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x3e>
  fa:	00 00       	nop
	_delay_ms(2000);
	LCD_voidSendCommand(1);
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 9a 05 	call	0xb34	; 0xb34 <LCD_voidSendCommand>
	
	u8 Key,operation=0,operation2=0;
	u8 flag=0;
	u8 Count=0;
	u16 num[20];
	u16 result=0;
 102:	e1 2c       	mov	r14, r1
 104:	f1 2c       	mov	r15, r1
	LCD_voidInit();
	KPD_u8Init();
	
	u8 Key,operation=0,operation2=0;
	u8 flag=0;
	u8 Count=0;
 106:	b1 2c       	mov	r11, r1
{
	LCD_voidInit();
	KPD_u8Init();
	
	u8 Key,operation=0,operation2=0;
	u8 flag=0;
 108:	00 e0       	ldi	r16, 0x00	; 0
int main()
{
	LCD_voidInit();
	KPD_u8Init();
	
	u8 Key,operation=0,operation2=0;
 10a:	91 2c       	mov	r9, r1
 10c:	a1 2c       	mov	r10, r1
	
	while (1)
	{
		do
		{
			Key = KPD_u8GetPressedKey();
 10e:	0e 94 74 06 	call	0xce8	; 0xce8 <KPD_u8GetPressedKey>
 112:	18 2f       	mov	r17, r24
		} while (Key== 0xff);
 114:	8f 3f       	cpi	r24, 0xFF	; 255
 116:	d9 f3       	breq	.-10     	; 0x10e <main+0x52>
		
		
		if ((Key >= 0 && Key <= 9))
 118:	8a 30       	cpi	r24, 0x0A	; 10
 11a:	08 f5       	brcc	.+66     	; 0x15e <main+0xa2>
		{
			LCD_voidWriteNumber(Key);
 11c:	c8 2e       	mov	r12, r24
 11e:	d1 2c       	mov	r13, r1
 120:	c6 01       	movw	r24, r12
 122:	0e 94 d1 06 	call	0xda2	; 0xda2 <LCD_voidWriteNumber>
			num[Count]  = (num[Count]*10) + Key;
 126:	eb 2d       	mov	r30, r11
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	ee 0f       	add	r30, r30
 12c:	ff 1f       	adc	r31, r31
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	2c 0f       	add	r18, r28
 134:	3d 1f       	adc	r19, r29
 136:	e2 0f       	add	r30, r18
 138:	f3 1f       	adc	r31, r19
 13a:	80 81       	ld	r24, Z
 13c:	91 81       	ldd	r25, Z+1	; 0x01
 13e:	9c 01       	movw	r18, r24
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	82 0f       	add	r24, r18
 152:	93 1f       	adc	r25, r19
 154:	8c 0d       	add	r24, r12
 156:	9d 1d       	adc	r25, r13
 158:	91 83       	std	Z+1, r25	; 0x01
 15a:	80 83       	st	Z, r24
 15c:	eb c1       	rjmp	.+982    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
		}
		
		else if (Key=='+' || Key=='-' || Key=='*' || Key=='/')
 15e:	8b 32       	cpi	r24, 0x2B	; 43
 160:	39 f0       	breq	.+14     	; 0x170 <main+0xb4>
 162:	8d 32       	cpi	r24, 0x2D	; 45
 164:	29 f0       	breq	.+10     	; 0x170 <main+0xb4>
 166:	8a 32       	cpi	r24, 0x2A	; 42
 168:	19 f0       	breq	.+6      	; 0x170 <main+0xb4>
 16a:	8f 32       	cpi	r24, 0x2F	; 47
 16c:	09 f0       	breq	.+2      	; 0x170 <main+0xb4>
 16e:	41 c0       	rjmp	.+130    	; 0x1f2 <main+0x136>
		{
			/*first operation*/
			if (flag==0)			
 170:	01 11       	cpse	r16, r1
 172:	1e c0       	rjmp	.+60     	; 0x1b0 <main+0xf4>
			{
				operation = Key;
				switch(operation)
 174:	1b 32       	cpi	r17, 0x2B	; 43
 176:	49 f0       	breq	.+18     	; 0x18a <main+0xce>
 178:	18 f4       	brcc	.+6      	; 0x180 <main+0xc4>
 17a:	1a 32       	cpi	r17, 0x2A	; 42
 17c:	51 f0       	breq	.+20     	; 0x192 <main+0xd6>
 17e:	14 c0       	rjmp	.+40     	; 0x1a8 <main+0xec>
 180:	1d 32       	cpi	r17, 0x2D	; 45
 182:	59 f0       	breq	.+22     	; 0x19a <main+0xde>
 184:	1f 32       	cpi	r17, 0x2F	; 47
 186:	69 f0       	breq	.+26     	; 0x1a2 <main+0xe6>
 188:	0f c0       	rjmp	.+30     	; 0x1a8 <main+0xec>
				{
					case '+':LCD_voidSendData(operation);break;
 18a:	81 2f       	mov	r24, r17
 18c:	0e 94 07 06 	call	0xc0e	; 0xc0e <LCD_voidSendData>
 190:	0b c0       	rjmp	.+22     	; 0x1a8 <main+0xec>
					case '*':LCD_voidSendData(operation);break;
 192:	81 2f       	mov	r24, r17
 194:	0e 94 07 06 	call	0xc0e	; 0xc0e <LCD_voidSendData>
 198:	07 c0       	rjmp	.+14     	; 0x1a8 <main+0xec>
					case '-':LCD_voidSendData(operation);break;
 19a:	81 2f       	mov	r24, r17
 19c:	0e 94 07 06 	call	0xc0e	; 0xc0e <LCD_voidSendData>
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <main+0xec>
					case '/':LCD_voidSendData(operation);break;
 1a2:	81 2f       	mov	r24, r17
 1a4:	0e 94 07 06 	call	0xc0e	; 0xc0e <LCD_voidSendData>
				}
				Count++;
 1a8:	b3 94       	inc	r11
		else if (Key=='+' || Key=='-' || Key=='*' || Key=='/')
		{
			/*first operation*/
			if (flag==0)			
			{
				operation = Key;
 1aa:	a1 2e       	mov	r10, r17
					case '*':LCD_voidSendData(operation);break;
					case '-':LCD_voidSendData(operation);break;
					case '/':LCD_voidSendData(operation);break;
				}
				Count++;
				flag=1;
 1ac:	01 e0       	ldi	r16, 0x01	; 1
 1ae:	c2 c1       	rjmp	.+900    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
			}
			
			/*second operation*/
			else if (flag==1)		
 1b0:	01 30       	cpi	r16, 0x01	; 1
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <main+0xfa>
 1b4:	bf c1       	rjmp	.+894    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
			{
				operation2 =Key;
				switch(operation2)
 1b6:	1b 32       	cpi	r17, 0x2B	; 43
 1b8:	49 f0       	breq	.+18     	; 0x1cc <main+0x110>
 1ba:	18 f4       	brcc	.+6      	; 0x1c2 <main+0x106>
 1bc:	1a 32       	cpi	r17, 0x2A	; 42
 1be:	51 f0       	breq	.+20     	; 0x1d4 <main+0x118>
 1c0:	14 c0       	rjmp	.+40     	; 0x1ea <main+0x12e>
 1c2:	1d 32       	cpi	r17, 0x2D	; 45
 1c4:	59 f0       	breq	.+22     	; 0x1dc <main+0x120>
 1c6:	1f 32       	cpi	r17, 0x2F	; 47
 1c8:	69 f0       	breq	.+26     	; 0x1e4 <main+0x128>
 1ca:	0f c0       	rjmp	.+30     	; 0x1ea <main+0x12e>
				{
					case '+':LCD_voidSendData(operation2);break;
 1cc:	81 2f       	mov	r24, r17
 1ce:	0e 94 07 06 	call	0xc0e	; 0xc0e <LCD_voidSendData>
 1d2:	0b c0       	rjmp	.+22     	; 0x1ea <main+0x12e>
					case '*':LCD_voidSendData(operation2);break;
 1d4:	81 2f       	mov	r24, r17
 1d6:	0e 94 07 06 	call	0xc0e	; 0xc0e <LCD_voidSendData>
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <main+0x12e>
					case '-':LCD_voidSendData(operation2);break;
 1dc:	81 2f       	mov	r24, r17
 1de:	0e 94 07 06 	call	0xc0e	; 0xc0e <LCD_voidSendData>
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <main+0x12e>
					case '/':LCD_voidSendData(operation2);break;
 1e4:	81 2f       	mov	r24, r17
 1e6:	0e 94 07 06 	call	0xc0e	; 0xc0e <LCD_voidSendData>
				}
				Count++;
 1ea:	b3 94       	inc	r11
			}
			
			/*second operation*/
			else if (flag==1)		
			{
				operation2 =Key;
 1ec:	91 2e       	mov	r9, r17
					case '*':LCD_voidSendData(operation2);break;
					case '-':LCD_voidSendData(operation2);break;
					case '/':LCD_voidSendData(operation2);break;
				}
				Count++;
				flag=0;
 1ee:	00 e0       	ldi	r16, 0x00	; 0
 1f0:	a1 c1       	rjmp	.+834    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
			}
		}

		else if (Key== '=')
 1f2:	8d 33       	cpi	r24, 0x3D	; 61
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <main+0x13c>
 1f6:	9e c1       	rjmp	.+828    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
		{
			/*IF Enter One Operation*/
			if (flag==1)
 1f8:	01 30       	cpi	r16, 0x01	; 1
 1fa:	09 f0       	breq	.+2      	; 0x1fe <main+0x142>
 1fc:	56 c0       	rjmp	.+172    	; 0x2aa <main+0x1ee>
			{
				LCD_voidSendData(Key);
 1fe:	0e 94 07 06 	call	0xc0e	; 0xc0e <LCD_voidSendData>
				switch(operation)
 202:	3b e2       	ldi	r19, 0x2B	; 43
 204:	a3 16       	cp	r10, r19
 206:	69 f0       	breq	.+26     	; 0x222 <main+0x166>
 208:	3a 15       	cp	r19, r10
 20a:	20 f0       	brcs	.+8      	; 0x214 <main+0x158>
 20c:	8a e2       	ldi	r24, 0x2A	; 42
 20e:	a8 16       	cp	r10, r24
 210:	79 f0       	breq	.+30     	; 0x230 <main+0x174>
 212:	28 c0       	rjmp	.+80     	; 0x264 <main+0x1a8>
 214:	9d e2       	ldi	r25, 0x2D	; 45
 216:	a9 16       	cp	r10, r25
 218:	b9 f0       	breq	.+46     	; 0x248 <main+0x18c>
 21a:	2f e2       	ldi	r18, 0x2F	; 47
 21c:	a2 16       	cp	r10, r18
 21e:	d9 f0       	breq	.+54     	; 0x256 <main+0x19a>
 220:	21 c0       	rjmp	.+66     	; 0x264 <main+0x1a8>
				{
					case '+':result = num[0] + num[1];break;
 222:	e9 80       	ldd	r14, Y+1	; 0x01
 224:	fa 80       	ldd	r15, Y+2	; 0x02
 226:	8b 81       	ldd	r24, Y+3	; 0x03
 228:	9c 81       	ldd	r25, Y+4	; 0x04
 22a:	e8 0e       	add	r14, r24
 22c:	f9 1e       	adc	r15, r25
 22e:	1a c0       	rjmp	.+52     	; 0x264 <main+0x1a8>
					case '*':result = num[0] * num[1];break;
 230:	29 81       	ldd	r18, Y+1	; 0x01
 232:	3a 81       	ldd	r19, Y+2	; 0x02
 234:	8b 81       	ldd	r24, Y+3	; 0x03
 236:	9c 81       	ldd	r25, Y+4	; 0x04
 238:	28 9f       	mul	r18, r24
 23a:	70 01       	movw	r14, r0
 23c:	29 9f       	mul	r18, r25
 23e:	f0 0c       	add	r15, r0
 240:	38 9f       	mul	r19, r24
 242:	f0 0c       	add	r15, r0
 244:	11 24       	eor	r1, r1
 246:	0e c0       	rjmp	.+28     	; 0x264 <main+0x1a8>
					case '-':result = num[0] - num[1];break;
 248:	e9 80       	ldd	r14, Y+1	; 0x01
 24a:	fa 80       	ldd	r15, Y+2	; 0x02
 24c:	8b 81       	ldd	r24, Y+3	; 0x03
 24e:	9c 81       	ldd	r25, Y+4	; 0x04
 250:	e8 1a       	sub	r14, r24
 252:	f9 0a       	sbc	r15, r25
 254:	07 c0       	rjmp	.+14     	; 0x264 <main+0x1a8>
					case '/':result = num[0] / num[1];break;
 256:	89 81       	ldd	r24, Y+1	; 0x01
 258:	9a 81       	ldd	r25, Y+2	; 0x02
 25a:	6b 81       	ldd	r22, Y+3	; 0x03
 25c:	7c 81       	ldd	r23, Y+4	; 0x04
 25e:	0e 94 d7 07 	call	0xfae	; 0xfae <__udivmodhi4>
 262:	7b 01       	movw	r14, r22
				}
				LCD_voidWriteNumber(result);
 264:	c7 01       	movw	r24, r14
 266:	0e 94 d1 06 	call	0xda2	; 0xda2 <LCD_voidWriteNumber>
 26a:	3f ef       	ldi	r19, 0xFF	; 255
 26c:	83 ed       	ldi	r24, 0xD3	; 211
 26e:	90 e3       	ldi	r25, 0x30	; 48
 270:	31 50       	subi	r19, 0x01	; 1
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0x1b4>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0x1be>
 27a:	00 00       	nop
				_delay_ms(2000);
				
				flag=0;
				
				/*clear array of numbers & counter*/
				for (u8 i = 0; i < 20; i++) {
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0d c0       	rjmp	.+26     	; 0x29a <main+0x1de>
				num[i] = '\0';}
 280:	e8 2f       	mov	r30, r24
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	ee 0f       	add	r30, r30
 286:	ff 1f       	adc	r31, r31
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	2c 0f       	add	r18, r28
 28e:	3d 1f       	adc	r19, r29
 290:	e2 0f       	add	r30, r18
 292:	f3 1f       	adc	r31, r19
 294:	11 82       	std	Z+1, r1	; 0x01
 296:	10 82       	st	Z, r1
				_delay_ms(2000);
				
				flag=0;
				
				/*clear array of numbers & counter*/
				for (u8 i = 0; i < 20; i++) {
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	84 31       	cpi	r24, 0x14	; 20
 29c:	88 f3       	brcs	.-30     	; 0x280 <main+0x1c4>
				num[i] = '\0';}
				Count=0;
				
				LCD_voidSendCommand(1);
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 9a 05 	call	0xb34	; 0xb34 <LCD_voidSendCommand>
				flag=0;
				
				/*clear array of numbers & counter*/
				for (u8 i = 0; i < 20; i++) {
				num[i] = '\0';}
				Count=0;
 2a4:	b1 2c       	mov	r11, r1
					case '/':result = num[0] / num[1];break;
				}
				LCD_voidWriteNumber(result);
				_delay_ms(2000);
				
				flag=0;
 2a6:	00 e0       	ldi	r16, 0x00	; 0
 2a8:	45 c1       	rjmp	.+650    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
				
				LCD_voidSendCommand(1);
			}
			
			/*IF Enter Two Operation*/
			else if	(flag==0)
 2aa:	01 11       	cpse	r16, r1
 2ac:	43 c1       	rjmp	.+646    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
			{
				LCD_voidSendData(Key);
 2ae:	0e 94 07 06 	call	0xc0e	; 0xc0e <LCD_voidSendData>
				switch(operation2)
 2b2:	3b e2       	ldi	r19, 0x2B	; 43
 2b4:	93 16       	cp	r9, r19
 2b6:	81 f0       	breq	.+32     	; 0x2d8 <main+0x21c>
 2b8:	39 15       	cp	r19, r9
 2ba:	28 f0       	brcs	.+10     	; 0x2c6 <main+0x20a>
 2bc:	8a e2       	ldi	r24, 0x2A	; 42
 2be:	98 16       	cp	r9, r24
 2c0:	09 f4       	brne	.+2      	; 0x2c4 <main+0x208>
 2c2:	48 c0       	rjmp	.+144    	; 0x354 <main+0x298>
 2c4:	16 c1       	rjmp	.+556    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 2c6:	9d e2       	ldi	r25, 0x2D	; 45
 2c8:	99 16       	cp	r9, r25
 2ca:	09 f4       	brne	.+2      	; 0x2ce <main+0x212>
 2cc:	95 c0       	rjmp	.+298    	; 0x3f8 <main+0x33c>
 2ce:	2f e2       	ldi	r18, 0x2F	; 47
 2d0:	92 16       	cp	r9, r18
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <main+0x21a>
 2d4:	cf c0       	rjmp	.+414    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 2d6:	0d c1       	rjmp	.+538    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
				{
					case '+':
					
					if (operation=='+')
 2d8:	3b e2       	ldi	r19, 0x2B	; 43
 2da:	a3 12       	cpse	r10, r19
 2dc:	0b c0       	rjmp	.+22     	; 0x2f4 <main+0x238>
					{
						result = num[0] + num[1] + num[2];break;
 2de:	e9 80       	ldd	r14, Y+1	; 0x01
 2e0:	fa 80       	ldd	r15, Y+2	; 0x02
 2e2:	8b 81       	ldd	r24, Y+3	; 0x03
 2e4:	9c 81       	ldd	r25, Y+4	; 0x04
 2e6:	8e 0d       	add	r24, r14
 2e8:	9f 1d       	adc	r25, r15
 2ea:	ed 80       	ldd	r14, Y+5	; 0x05
 2ec:	fe 80       	ldd	r15, Y+6	; 0x06
 2ee:	e8 0e       	add	r14, r24
 2f0:	f9 1e       	adc	r15, r25
 2f2:	ff c0       	rjmp	.+510    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					}
					else if (operation=='-')
 2f4:	8d e2       	ldi	r24, 0x2D	; 45
 2f6:	a8 12       	cpse	r10, r24
 2f8:	0b c0       	rjmp	.+22     	; 0x310 <main+0x254>
					{
						result = num[0] - (num[1] + num[2]) ;break;
 2fa:	e9 80       	ldd	r14, Y+1	; 0x01
 2fc:	fa 80       	ldd	r15, Y+2	; 0x02
 2fe:	2b 81       	ldd	r18, Y+3	; 0x03
 300:	3c 81       	ldd	r19, Y+4	; 0x04
 302:	8d 81       	ldd	r24, Y+5	; 0x05
 304:	9e 81       	ldd	r25, Y+6	; 0x06
 306:	82 0f       	add	r24, r18
 308:	93 1f       	adc	r25, r19
 30a:	e8 1a       	sub	r14, r24
 30c:	f9 0a       	sbc	r15, r25
 30e:	f1 c0       	rjmp	.+482    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					}
					else if (operation=='/')
 310:	9f e2       	ldi	r25, 0x2F	; 47
 312:	a9 12       	cpse	r10, r25
 314:	0c c0       	rjmp	.+24     	; 0x32e <main+0x272>
					{
						result = (num[0] / num[1]) + num[2] ;break;
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	9a 81       	ldd	r25, Y+2	; 0x02
 31a:	6b 81       	ldd	r22, Y+3	; 0x03
 31c:	7c 81       	ldd	r23, Y+4	; 0x04
 31e:	0e 94 d7 07 	call	0xfae	; 0xfae <__udivmodhi4>
 322:	8d 81       	ldd	r24, Y+5	; 0x05
 324:	9e 81       	ldd	r25, Y+6	; 0x06
 326:	7b 01       	movw	r14, r22
 328:	e8 0e       	add	r14, r24
 32a:	f9 1e       	adc	r15, r25
 32c:	e2 c0       	rjmp	.+452    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					}
					else if (operation=='*')
 32e:	2a e2       	ldi	r18, 0x2A	; 42
 330:	a2 12       	cpse	r10, r18
 332:	10 c0       	rjmp	.+32     	; 0x354 <main+0x298>
					{
						result =(num[0] * num[1]) + num[2] ;break;
 334:	29 81       	ldd	r18, Y+1	; 0x01
 336:	3a 81       	ldd	r19, Y+2	; 0x02
 338:	8b 81       	ldd	r24, Y+3	; 0x03
 33a:	9c 81       	ldd	r25, Y+4	; 0x04
 33c:	28 9f       	mul	r18, r24
 33e:	70 01       	movw	r14, r0
 340:	29 9f       	mul	r18, r25
 342:	f0 0c       	add	r15, r0
 344:	38 9f       	mul	r19, r24
 346:	f0 0c       	add	r15, r0
 348:	11 24       	eor	r1, r1
 34a:	8d 81       	ldd	r24, Y+5	; 0x05
 34c:	9e 81       	ldd	r25, Y+6	; 0x06
 34e:	e8 0e       	add	r14, r24
 350:	f9 1e       	adc	r15, r25
 352:	cf c0       	rjmp	.+414    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					}

					case '*':
					
					if (operation=='+')
 354:	3b e2       	ldi	r19, 0x2B	; 43
 356:	a3 12       	cpse	r10, r19
 358:	10 c0       	rjmp	.+32     	; 0x37a <main+0x2be>
					{
						result = num[0] + (num[1] * num[2]) ;break;
 35a:	e9 80       	ldd	r14, Y+1	; 0x01
 35c:	fa 80       	ldd	r15, Y+2	; 0x02
 35e:	4b 81       	ldd	r20, Y+3	; 0x03
 360:	5c 81       	ldd	r21, Y+4	; 0x04
 362:	2d 81       	ldd	r18, Y+5	; 0x05
 364:	3e 81       	ldd	r19, Y+6	; 0x06
 366:	42 9f       	mul	r20, r18
 368:	c0 01       	movw	r24, r0
 36a:	43 9f       	mul	r20, r19
 36c:	90 0d       	add	r25, r0
 36e:	52 9f       	mul	r21, r18
 370:	90 0d       	add	r25, r0
 372:	11 24       	eor	r1, r1
 374:	e8 0e       	add	r14, r24
 376:	f9 1e       	adc	r15, r25
 378:	bc c0       	rjmp	.+376    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					}
					else if (operation=='-')
 37a:	8d e2       	ldi	r24, 0x2D	; 45
 37c:	a8 12       	cpse	r10, r24
 37e:	10 c0       	rjmp	.+32     	; 0x3a0 <main+0x2e4>
					{
						result = num[0] - (num[1] * num[2]);break;
 380:	e9 80       	ldd	r14, Y+1	; 0x01
 382:	fa 80       	ldd	r15, Y+2	; 0x02
 384:	4b 81       	ldd	r20, Y+3	; 0x03
 386:	5c 81       	ldd	r21, Y+4	; 0x04
 388:	2d 81       	ldd	r18, Y+5	; 0x05
 38a:	3e 81       	ldd	r19, Y+6	; 0x06
 38c:	42 9f       	mul	r20, r18
 38e:	c0 01       	movw	r24, r0
 390:	43 9f       	mul	r20, r19
 392:	90 0d       	add	r25, r0
 394:	52 9f       	mul	r21, r18
 396:	90 0d       	add	r25, r0
 398:	11 24       	eor	r1, r1
 39a:	e8 1a       	sub	r14, r24
 39c:	f9 0a       	sbc	r15, r25
 39e:	a9 c0       	rjmp	.+338    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					}
					else if (operation=='/')
 3a0:	9f e2       	ldi	r25, 0x2F	; 47
 3a2:	a9 12       	cpse	r10, r25
 3a4:	11 c0       	rjmp	.+34     	; 0x3c8 <main+0x30c>
					{
						result = num[0] / (num[1] * num[2]) ;break;
 3a6:	89 81       	ldd	r24, Y+1	; 0x01
 3a8:	9a 81       	ldd	r25, Y+2	; 0x02
 3aa:	4b 81       	ldd	r20, Y+3	; 0x03
 3ac:	5c 81       	ldd	r21, Y+4	; 0x04
 3ae:	2d 81       	ldd	r18, Y+5	; 0x05
 3b0:	3e 81       	ldd	r19, Y+6	; 0x06
 3b2:	42 9f       	mul	r20, r18
 3b4:	b0 01       	movw	r22, r0
 3b6:	43 9f       	mul	r20, r19
 3b8:	70 0d       	add	r23, r0
 3ba:	52 9f       	mul	r21, r18
 3bc:	70 0d       	add	r23, r0
 3be:	11 24       	eor	r1, r1
 3c0:	0e 94 d7 07 	call	0xfae	; 0xfae <__udivmodhi4>
 3c4:	7b 01       	movw	r14, r22
 3c6:	95 c0       	rjmp	.+298    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					}
					else if (operation=='*')
 3c8:	2a e2       	ldi	r18, 0x2A	; 42
 3ca:	a2 12       	cpse	r10, r18
 3cc:	15 c0       	rjmp	.+42     	; 0x3f8 <main+0x33c>
					{
						result = num[0] * num[1] * num[2] ;break;
 3ce:	49 81       	ldd	r20, Y+1	; 0x01
 3d0:	5a 81       	ldd	r21, Y+2	; 0x02
 3d2:	8b 81       	ldd	r24, Y+3	; 0x03
 3d4:	9c 81       	ldd	r25, Y+4	; 0x04
 3d6:	48 9f       	mul	r20, r24
 3d8:	90 01       	movw	r18, r0
 3da:	49 9f       	mul	r20, r25
 3dc:	30 0d       	add	r19, r0
 3de:	58 9f       	mul	r21, r24
 3e0:	30 0d       	add	r19, r0
 3e2:	11 24       	eor	r1, r1
 3e4:	8d 81       	ldd	r24, Y+5	; 0x05
 3e6:	9e 81       	ldd	r25, Y+6	; 0x06
 3e8:	28 9f       	mul	r18, r24
 3ea:	70 01       	movw	r14, r0
 3ec:	29 9f       	mul	r18, r25
 3ee:	f0 0c       	add	r15, r0
 3f0:	38 9f       	mul	r19, r24
 3f2:	f0 0c       	add	r15, r0
 3f4:	11 24       	eor	r1, r1
 3f6:	7d c0       	rjmp	.+250    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					}
					
					case '-':
					
					if (operation=='+')
 3f8:	3b e2       	ldi	r19, 0x2B	; 43
 3fa:	a3 12       	cpse	r10, r19
 3fc:	0b c0       	rjmp	.+22     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
					{
						result = (num[0] + num[1]) - num[2];break;
 3fe:	e9 80       	ldd	r14, Y+1	; 0x01
 400:	fa 80       	ldd	r15, Y+2	; 0x02
 402:	8b 81       	ldd	r24, Y+3	; 0x03
 404:	9c 81       	ldd	r25, Y+4	; 0x04
 406:	e8 0e       	add	r14, r24
 408:	f9 1e       	adc	r15, r25
 40a:	8d 81       	ldd	r24, Y+5	; 0x05
 40c:	9e 81       	ldd	r25, Y+6	; 0x06
 40e:	e8 1a       	sub	r14, r24
 410:	f9 0a       	sbc	r15, r25
 412:	6f c0       	rjmp	.+222    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					}
					else if (operation=='-')
 414:	8d e2       	ldi	r24, 0x2D	; 45
 416:	a8 12       	cpse	r10, r24
 418:	0b c0       	rjmp	.+22     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
					{
						result = num[0] - num[1] - num[2] ;break;
 41a:	e9 80       	ldd	r14, Y+1	; 0x01
 41c:	fa 80       	ldd	r15, Y+2	; 0x02
 41e:	8b 81       	ldd	r24, Y+3	; 0x03
 420:	9c 81       	ldd	r25, Y+4	; 0x04
 422:	e8 1a       	sub	r14, r24
 424:	f9 0a       	sbc	r15, r25
 426:	8d 81       	ldd	r24, Y+5	; 0x05
 428:	9e 81       	ldd	r25, Y+6	; 0x06
 42a:	e8 1a       	sub	r14, r24
 42c:	f9 0a       	sbc	r15, r25
 42e:	61 c0       	rjmp	.+194    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					}
					else if (operation=='/')
 430:	9f e2       	ldi	r25, 0x2F	; 47
 432:	a9 12       	cpse	r10, r25
 434:	0c c0       	rjmp	.+24     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
					{
						result = (num[0] / num[1]) - num[2];break;
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	9a 81       	ldd	r25, Y+2	; 0x02
 43a:	6b 81       	ldd	r22, Y+3	; 0x03
 43c:	7c 81       	ldd	r23, Y+4	; 0x04
 43e:	0e 94 d7 07 	call	0xfae	; 0xfae <__udivmodhi4>
 442:	8d 81       	ldd	r24, Y+5	; 0x05
 444:	9e 81       	ldd	r25, Y+6	; 0x06
 446:	7b 01       	movw	r14, r22
 448:	e8 1a       	sub	r14, r24
 44a:	f9 0a       	sbc	r15, r25
 44c:	52 c0       	rjmp	.+164    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					}
					else if (operation=='*')
 44e:	2a e2       	ldi	r18, 0x2A	; 42
 450:	a2 12       	cpse	r10, r18
 452:	10 c0       	rjmp	.+32     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
					{
						result = (num[0] * num[1]) - num[2];break;
 454:	29 81       	ldd	r18, Y+1	; 0x01
 456:	3a 81       	ldd	r19, Y+2	; 0x02
 458:	8b 81       	ldd	r24, Y+3	; 0x03
 45a:	9c 81       	ldd	r25, Y+4	; 0x04
 45c:	28 9f       	mul	r18, r24
 45e:	70 01       	movw	r14, r0
 460:	29 9f       	mul	r18, r25
 462:	f0 0c       	add	r15, r0
 464:	38 9f       	mul	r19, r24
 466:	f0 0c       	add	r15, r0
 468:	11 24       	eor	r1, r1
 46a:	8d 81       	ldd	r24, Y+5	; 0x05
 46c:	9e 81       	ldd	r25, Y+6	; 0x06
 46e:	e8 1a       	sub	r14, r24
 470:	f9 0a       	sbc	r15, r25
 472:	3f c0       	rjmp	.+126    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					}
					
					case '/':
					
					if (operation=='+')
 474:	3b e2       	ldi	r19, 0x2B	; 43
 476:	a3 12       	cpse	r10, r19
 478:	0b c0       	rjmp	.+22     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
					{
						result = num[0] + (num[1] / num[2]);break;
 47a:	e9 80       	ldd	r14, Y+1	; 0x01
 47c:	fa 80       	ldd	r15, Y+2	; 0x02
 47e:	8b 81       	ldd	r24, Y+3	; 0x03
 480:	9c 81       	ldd	r25, Y+4	; 0x04
 482:	6d 81       	ldd	r22, Y+5	; 0x05
 484:	7e 81       	ldd	r23, Y+6	; 0x06
 486:	0e 94 d7 07 	call	0xfae	; 0xfae <__udivmodhi4>
 48a:	e6 0e       	add	r14, r22
 48c:	f7 1e       	adc	r15, r23
 48e:	31 c0       	rjmp	.+98     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					}
					else if (operation=='-')
 490:	8d e2       	ldi	r24, 0x2D	; 45
 492:	a8 12       	cpse	r10, r24
 494:	0b c0       	rjmp	.+22     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
					{
						result = num[0] - (num[1] / num[2]);break;
 496:	e9 80       	ldd	r14, Y+1	; 0x01
 498:	fa 80       	ldd	r15, Y+2	; 0x02
 49a:	8b 81       	ldd	r24, Y+3	; 0x03
 49c:	9c 81       	ldd	r25, Y+4	; 0x04
 49e:	6d 81       	ldd	r22, Y+5	; 0x05
 4a0:	7e 81       	ldd	r23, Y+6	; 0x06
 4a2:	0e 94 d7 07 	call	0xfae	; 0xfae <__udivmodhi4>
 4a6:	e6 1a       	sub	r14, r22
 4a8:	f7 0a       	sbc	r15, r23
 4aa:	23 c0       	rjmp	.+70     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					}
					else if (operation=='/')
 4ac:	9f e2       	ldi	r25, 0x2F	; 47
 4ae:	a9 12       	cpse	r10, r25
 4b0:	0d c0       	rjmp	.+26     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
					{
						result =num[0] / num[1] / num[2];break;
 4b2:	89 81       	ldd	r24, Y+1	; 0x01
 4b4:	9a 81       	ldd	r25, Y+2	; 0x02
 4b6:	6b 81       	ldd	r22, Y+3	; 0x03
 4b8:	7c 81       	ldd	r23, Y+4	; 0x04
 4ba:	0e 94 d7 07 	call	0xfae	; 0xfae <__udivmodhi4>
 4be:	cb 01       	movw	r24, r22
 4c0:	6d 81       	ldd	r22, Y+5	; 0x05
 4c2:	7e 81       	ldd	r23, Y+6	; 0x06
 4c4:	0e 94 d7 07 	call	0xfae	; 0xfae <__udivmodhi4>
 4c8:	7b 01       	movw	r14, r22
 4ca:	13 c0       	rjmp	.+38     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					}
					else if (operation=='*')
 4cc:	2a e2       	ldi	r18, 0x2A	; 42
 4ce:	a2 12       	cpse	r10, r18
 4d0:	10 c0       	rjmp	.+32     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					{
						result = (num[0] * num[1]) / num[2];break;
 4d2:	49 81       	ldd	r20, Y+1	; 0x01
 4d4:	5a 81       	ldd	r21, Y+2	; 0x02
 4d6:	2b 81       	ldd	r18, Y+3	; 0x03
 4d8:	3c 81       	ldd	r19, Y+4	; 0x04
 4da:	42 9f       	mul	r20, r18
 4dc:	c0 01       	movw	r24, r0
 4de:	43 9f       	mul	r20, r19
 4e0:	90 0d       	add	r25, r0
 4e2:	52 9f       	mul	r21, r18
 4e4:	90 0d       	add	r25, r0
 4e6:	11 24       	eor	r1, r1
 4e8:	6d 81       	ldd	r22, Y+5	; 0x05
 4ea:	7e 81       	ldd	r23, Y+6	; 0x06
 4ec:	0e 94 d7 07 	call	0xfae	; 0xfae <__udivmodhi4>
 4f0:	7b 01       	movw	r14, r22
					}
				}
				
				LCD_voidWriteNumber(result);
 4f2:	c7 01       	movw	r24, r14
 4f4:	0e 94 d1 06 	call	0xda2	; 0xda2 <LCD_voidWriteNumber>
 4f8:	3f ef       	ldi	r19, 0xFF	; 255
 4fa:	83 ed       	ldi	r24, 0xD3	; 211
 4fc:	90 e3       	ldi	r25, 0x30	; 48
 4fe:	31 50       	subi	r19, 0x01	; 1
 500:	80 40       	sbci	r24, 0x00	; 0
 502:	90 40       	sbci	r25, 0x00	; 0
 504:	e1 f7       	brne	.-8      	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 506:	00 c0       	rjmp	.+0      	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 508:	00 00       	nop
				_delay_ms(2000);
				
				/*clear array of numbers & counter*/
				for (u8 i = 0; i < 20; i++) {
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	0d c0       	rjmp	.+26     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
				num[i] = '\0';}
 50e:	e8 2f       	mov	r30, r24
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	ee 0f       	add	r30, r30
 514:	ff 1f       	adc	r31, r31
 516:	21 e0       	ldi	r18, 0x01	; 1
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	2c 0f       	add	r18, r28
 51c:	3d 1f       	adc	r19, r29
 51e:	e2 0f       	add	r30, r18
 520:	f3 1f       	adc	r31, r19
 522:	11 82       	std	Z+1, r1	; 0x01
 524:	10 82       	st	Z, r1
				
				LCD_voidWriteNumber(result);
				_delay_ms(2000);
				
				/*clear array of numbers & counter*/
				for (u8 i = 0; i < 20; i++) {
 526:	8f 5f       	subi	r24, 0xFF	; 255
 528:	84 31       	cpi	r24, 0x14	; 20
 52a:	88 f3       	brcs	.-30     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
				num[i] = '\0';}
				Count=0;
				
				LCD_voidSendCommand(1);
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	0e 94 9a 05 	call	0xb34	; 0xb34 <LCD_voidSendCommand>
				_delay_ms(2000);
				
				/*clear array of numbers & counter*/
				for (u8 i = 0; i < 20; i++) {
				num[i] = '\0';}
				Count=0;
 532:	b1 2c       	mov	r11, r1
				
				LCD_voidSendCommand(1);
			}
		}
		
		if (Key=='c')
 534:	13 36       	cpi	r17, 0x63	; 99
 536:	09 f0       	breq	.+2      	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 538:	ea cd       	rjmp	.-1068   	; 0x10e <main+0x52>
		{
			LCD_voidSendCommand(1);
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	0e 94 9a 05 	call	0xb34	; 0xb34 <LCD_voidSendCommand>
 540:	e6 cd       	rjmp	.-1076   	; 0x10e <main+0x52>

Disassembly of section .text.libgcc.div:

00000fae <__udivmodhi4>:
 fae:	aa 1b       	sub	r26, r26
 fb0:	bb 1b       	sub	r27, r27
 fb2:	51 e1       	ldi	r21, 0x11	; 17
 fb4:	07 c0       	rjmp	.+14     	; 0xfc4 <__udivmodhi4_ep>

00000fb6 <__udivmodhi4_loop>:
 fb6:	aa 1f       	adc	r26, r26
 fb8:	bb 1f       	adc	r27, r27
 fba:	a6 17       	cp	r26, r22
 fbc:	b7 07       	cpc	r27, r23
 fbe:	10 f0       	brcs	.+4      	; 0xfc4 <__udivmodhi4_ep>
 fc0:	a6 1b       	sub	r26, r22
 fc2:	b7 0b       	sbc	r27, r23

00000fc4 <__udivmodhi4_ep>:
 fc4:	88 1f       	adc	r24, r24
 fc6:	99 1f       	adc	r25, r25
 fc8:	5a 95       	dec	r21
 fca:	a9 f7       	brne	.-22     	; 0xfb6 <__udivmodhi4_loop>
 fcc:	80 95       	com	r24
 fce:	90 95       	com	r25
 fd0:	bc 01       	movw	r22, r24
 fd2:	cd 01       	movw	r24, r26
 fd4:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000fd6 <__umulhisi3>:
 fd6:	a2 9f       	mul	r26, r18
 fd8:	b0 01       	movw	r22, r0
 fda:	b3 9f       	mul	r27, r19
 fdc:	c0 01       	movw	r24, r0
 fde:	a3 9f       	mul	r26, r19
 fe0:	70 0d       	add	r23, r0
 fe2:	81 1d       	adc	r24, r1
 fe4:	11 24       	eor	r1, r1
 fe6:	91 1d       	adc	r25, r1
 fe8:	b2 9f       	mul	r27, r18
 fea:	70 0d       	add	r23, r0
 fec:	81 1d       	adc	r24, r1
 fee:	11 24       	eor	r1, r1
 ff0:	91 1d       	adc	r25, r1
 ff2:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00001012 <_fini>:
    1012:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00001014 <__funcs_on_exit>:
    1014:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00001016 <__simulator_exit>:
    1016:	08 95       	ret

Disassembly of section .text.exit:

00000ff4 <exit>:
     ff4:	ec 01       	movw	r28, r24
     ff6:	0e 94 0a 08 	call	0x1014	; 0x1014 <__funcs_on_exit>
     ffa:	0e 94 09 08 	call	0x1012	; 0x1012 <_fini>
     ffe:	ce 01       	movw	r24, r28
    1000:	0e 94 0b 08 	call	0x1016	; 0x1016 <__simulator_exit>
    1004:	ce 01       	movw	r24, r28
    1006:	0e 94 07 08 	call	0x100e	; 0x100e <_Exit>

Disassembly of section .text._Exit:

0000100e <_Exit>:
    100e:	0e 94 56 00 	call	0xac	; 0xac <_exit>
