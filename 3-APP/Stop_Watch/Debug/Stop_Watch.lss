
Stop_Watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ae  000001fa  2**0
                  ALLOC
  2 .bss          00000007  00800060  00800060  00000548  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  00000577  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000585  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b97  00000000  00000000  00000715  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008de  00000000  00000000  000022ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000955  00000000  00000000  00002b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  000034e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fa  00000000  00000000  00003878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000588  00000000  00000000  00003b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000040fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000466  00000466  0000053a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004244  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.SevenSegment_voidUpdateDigits 00000078  000000ae  000000ae  00000182  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.SevenSegment_voidDisplay 00000038  00000322  00000322  000003f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.DIO_VoidInit 0000001a  00000376  00000376  0000044a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.EXTI_voidINT1Init 0000001a  00000390  00000390  00000464  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.EXTI_voidINT1Enable 00000008  00000438  00000438  0000050c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.EXTI_voidINT0Init 0000001a  000003aa  000003aa  0000047e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.EXTI_voidINT0Enable 00000008  00000440  00000440  00000514  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.EXTI_voidINT2Init 00000014  000003da  000003da  000004ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.EXTI_voidINT2Enable 00000008  00000448  00000448  0000051c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.EXTINT0_VoidSetCallBack 0000000a  00000410  00000410  000004e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__vector_1 0000004e  000001ea  000001ea  000002be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.EXTINT1_VoidSetCallBack 0000000a  0000041a  0000041a  000004ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_2 0000004e  00000238  00000238  0000030c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.EXTINT2_VoidSetCallBack 0000000a  00000424  00000424  000004f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_3 0000004e  00000286  00000286  0000035a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .bss.EXT_INT2_pf 00000002  00800067  00800067  00000548  2**0
                  ALLOC
 31 .bss.EXT_INT1_pf 00000002  00800069  00800069  00000548  2**0
                  ALLOC
 32 .bss.EXT_INT0_pf 00000002  0080006b  0080006b  00000548  2**0
                  ALLOC
 33 .text.GIE_voidEnable 00000008  00000450  00000450  00000524  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.INT0_ISR 0000001c  0000035a  0000035a  0000042e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.INT1_ISR 00000014  000003ee  000003ee  000004c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.INT2_ISR 0000000e  00000402  00000402  000004d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.Timer1_ISR 00000008  00000458  00000458  0000052c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.main    00000062  00000126  00000126  000001fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.Timer1_voidInit 00000062  00000188  00000188  0000025c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.Timer1_voidSetOCR1AValue 00000006  00000460  00000460  00000534  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.Timer1_voidCompareSetCallBack 0000000a  0000042e  0000042e  00000502  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.__vector_7 0000004e  000002d4  000002d4  000003a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .bss.Compare  00000002  0080006d  0080006d  00000548  2**0
                  ALLOC
 44 .text.__dummy_fini 00000002  0000046e  0000046e  00000542  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.__dummy_funcs_on_exit 00000002  00000470  00000470  00000544  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.__dummy_simulator_exit 00000002  00000472  00000472  00000546  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.exit    00000016  000003c4  000003c4  00000498  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text._Exit   00000004  0000046a  0000046a  0000053e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_1>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_2>
   c:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_3>
  10:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
  14:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
  18:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
  1c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_7>
  20:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
  24:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
  28:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
  2c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
  30:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
  34:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
  38:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
  3c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
  40:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
  44:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
  48:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
  4c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
  50:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 6f       	ori	r16, 0xF0	; 240
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 93 00 	call	0x126	; 0x126 <main>
  a6:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

00000466 <__bad_interrupt>:
 466:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.SevenSegment_voidUpdateDigits:

000000ae <SevenSegment_voidUpdateDigits>:

u8 Clock[6];

void SevenSegment_voidUpdateDigits(void)
{
	Clock[0]++;	//every timer interrupt (every second) increase seconds
  ae:	e0 e6       	ldi	r30, 0x60	; 96
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	8f 5f       	subi	r24, 0xFF	; 255
  b6:	80 83       	st	Z, r24
	/*For Seconds*/
	if (Clock[0]==10)
  b8:	8a 30       	cpi	r24, 0x0A	; 10
  ba:	51 f4       	brne	.+20     	; 0xd0 <SevenSegment_voidUpdateDigits+0x22>
	{
		Clock[0]=0;
  bc:	10 82       	st	Z, r1
		Clock[1]++;
  be:	81 81       	ldd	r24, Z+1	; 0x01
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	81 83       	std	Z+1, r24	; 0x01
		if (Clock[1]==6 && Clock[0]==0)
  c4:	86 30       	cpi	r24, 0x06	; 6
  c6:	21 f4       	brne	.+8      	; 0xd0 <SevenSegment_voidUpdateDigits+0x22>
		{
			Clock[1]=0;
  c8:	11 82       	std	Z+1, r1	; 0x01
			Clock[2]++;
  ca:	82 81       	ldd	r24, Z+2	; 0x02
  cc:	8f 5f       	subi	r24, 0xFF	; 255
  ce:	82 83       	std	Z+2, r24	; 0x02
		}
	}
	/*For Minuets*/
	if (Clock[2]==10)
  d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  d4:	8a 30       	cpi	r24, 0x0A	; 10
  d6:	61 f4       	brne	.+24     	; 0xf0 <SevenSegment_voidUpdateDigits+0x42>
	{
		Clock[2]=0;
  d8:	e0 e6       	ldi	r30, 0x60	; 96
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	12 82       	std	Z+2, r1	; 0x02
		Clock[3]++;
  de:	83 81       	ldd	r24, Z+3	; 0x03
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	83 83       	std	Z+3, r24	; 0x03
		if (Clock[3]==6 && Clock[2]==0)
  e4:	86 30       	cpi	r24, 0x06	; 6
  e6:	21 f4       	brne	.+8      	; 0xf0 <SevenSegment_voidUpdateDigits+0x42>
		{
			Clock[3]=0;
  e8:	13 82       	std	Z+3, r1	; 0x03
			Clock[4]++;
  ea:	84 81       	ldd	r24, Z+4	; 0x04
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	84 83       	std	Z+4, r24	; 0x04
		}
	}
	/*For Hours*/
	if (Clock[4]==10)
  f0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
  f4:	8a 30       	cpi	r24, 0x0A	; 10
  f6:	b1 f4       	brne	.+44     	; 0x124 <SevenSegment_voidUpdateDigits+0x76>
	{
		Clock[4]=0;
  f8:	e0 e6       	ldi	r30, 0x60	; 96
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	14 82       	std	Z+4, r1	; 0x04
		Clock[5]++;
  fe:	85 81       	ldd	r24, Z+5	; 0x05
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	85 83       	std	Z+5, r24	; 0x05
		if (Clock[5]==10 && Clock[4]==0)
 104:	8a 30       	cpi	r24, 0x0A	; 10
 106:	71 f4       	brne	.+28     	; 0x124 <SevenSegment_voidUpdateDigits+0x76>
 108:	06 c0       	rjmp	.+12     	; 0x116 <SevenSegment_voidUpdateDigits+0x68>
		{
			/*Reaches the max limit so reset the timer & Stop Watch*/
			for(int i=0;i<6;i++){
				Clock[i]=0;
 10a:	fc 01       	movw	r30, r24
 10c:	e0 5a       	subi	r30, 0xA0	; 160
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	10 82       	st	Z, r1
		Clock[4]=0;
		Clock[5]++;
		if (Clock[5]==10 && Clock[4]==0)
		{
			/*Reaches the max limit so reset the timer & Stop Watch*/
			for(int i=0;i<6;i++){
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	02 c0       	rjmp	.+4      	; 0x11a <SevenSegment_voidUpdateDigits+0x6c>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	86 30       	cpi	r24, 0x06	; 6
 11c:	91 05       	cpc	r25, r1
 11e:	ac f3       	brlt	.-22     	; 0x10a <SevenSegment_voidUpdateDigits+0x5c>
				Clock[i]=0;
			}
			TCNT1=0;	
 120:	1d bc       	out	0x2d, r1	; 45
 122:	1c bc       	out	0x2c, r1	; 44
 124:	08 95       	ret

Disassembly of section .text.SevenSegment_voidDisplay:

00000322 <SevenSegment_voidDisplay>:
}

void SevenSegment_voidDisplay(void)
{
	/*looping on each digit ,change value of PORTC depend on digit*/
	 for(int i=0;i<6;i++)
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	15 c0       	rjmp	.+42     	; 0x352 <SevenSegment_voidDisplay+0x30>
	 { 
		PORTA=1<<i;
 328:	21 e0       	ldi	r18, 0x01	; 1
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	08 2e       	mov	r0, r24
 32e:	02 c0       	rjmp	.+4      	; 0x334 <SevenSegment_voidDisplay+0x12>
 330:	22 0f       	add	r18, r18
 332:	33 1f       	adc	r19, r19
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <SevenSegment_voidDisplay+0xe>
 338:	2b bb       	out	0x1b, r18	; 27
		PORTC=Clock[i];
 33a:	fc 01       	movw	r30, r24
 33c:	e0 5a       	subi	r30, 0xA0	; 160
 33e:	ff 4f       	sbci	r31, 0xFF	; 255
 340:	20 81       	ld	r18, Z
 342:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 344:	e1 ee       	ldi	r30, 0xE1	; 225
 346:	f4 e0       	ldi	r31, 0x04	; 4
 348:	31 97       	sbiw	r30, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <SevenSegment_voidDisplay+0x26>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <SevenSegment_voidDisplay+0x2c>
 34e:	00 00       	nop
}

void SevenSegment_voidDisplay(void)
{
	/*looping on each digit ,change value of PORTC depend on digit*/
	 for(int i=0;i<6;i++)
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	86 30       	cpi	r24, 0x06	; 6
 354:	91 05       	cpc	r25, r1
 356:	44 f3       	brlt	.-48     	; 0x328 <SevenSegment_voidDisplay+0x6>
	 { 
		PORTA=1<<i;
		PORTC=Clock[i];
		 _delay_ms(5);	
	 }
}
 358:	08 95       	ret

Disassembly of section .text.DIO_VoidInit:

00000376 <DIO_VoidInit>:
#include "DIO_register.h"
#include "DIO_private.h"

void DIO_VoidInit(void)
{
	DDRA = PORTA_DIR;
 376:	8f e3       	ldi	r24, 0x3F	; 63
 378:	8a bb       	out	0x1a, r24	; 26
	DDRB = PORTB_DIR;
 37a:	17 ba       	out	0x17, r1	; 23
	DDRC = PORTC_DIR;
 37c:	8f e0       	ldi	r24, 0x0F	; 15
 37e:	84 bb       	out	0x14, r24	; 20
	DDRD = PORTD_DIR;
 380:	11 ba       	out	0x11, r1	; 17
	
	PORTA = PORTA_INITIAL_VALUE;
 382:	1b ba       	out	0x1b, r1	; 27
	PORTB = PORTB_INITIAL_VALUE;
 384:	84 e0       	ldi	r24, 0x04	; 4
 386:	88 bb       	out	0x18, r24	; 24
	PORTC = PORTC_INITIAL_VALUE;
 388:	15 ba       	out	0x15, r1	; 21
	PORTD = PORTD_INITIAL_VALUE;
 38a:	8c e0       	ldi	r24, 0x0C	; 12
 38c:	82 bb       	out	0x12, r24	; 18
 38e:	08 95       	ret

Disassembly of section .text.EXTI_voidINT1Init:

00000390 <EXTI_voidINT1Init>:
	SET_BIT(GICR,GICR_INT2);
}
void EXTI_voidINT2Disable(void)
{
	/*INT2 Disable*/
	CLR_BIT(GICR,GICR_INT2);
 390:	85 b7       	in	r24, 0x35	; 53
 392:	88 60       	ori	r24, 0x08	; 8
 394:	85 bf       	out	0x35, r24	; 53
 396:	85 b7       	in	r24, 0x35	; 53
 398:	8b 7f       	andi	r24, 0xFB	; 251
 39a:	85 bf       	out	0x35, r24	; 53
 39c:	8b b7       	in	r24, 0x3b	; 59
 39e:	8f 77       	andi	r24, 0x7F	; 127
 3a0:	8b bf       	out	0x3b, r24	; 59
 3a2:	8a b7       	in	r24, 0x3a	; 58
 3a4:	80 68       	ori	r24, 0x80	; 128
 3a6:	8a bf       	out	0x3a, r24	; 58
 3a8:	08 95       	ret

Disassembly of section .text.EXTI_voidINT1Enable:

00000438 <EXTI_voidINT1Enable>:
	 
}
void EXTI_voidINT1Enable(void)
{
	/*INT1 Enable*/
	SET_BIT(GICR,GICR_INT1);
 438:	8b b7       	in	r24, 0x3b	; 59
 43a:	80 68       	ori	r24, 0x80	; 128
 43c:	8b bf       	out	0x3b, r24	; 59
 43e:	08 95       	ret

Disassembly of section .text.EXTI_voidINT0Init:

000003aa <EXTI_voidINT0Init>:
	SET_BIT(GICR,GICR_INT2);
}
void EXTI_voidINT2Disable(void)
{
	/*INT2 Disable*/
	CLR_BIT(GICR,GICR_INT2);
 3aa:	85 b7       	in	r24, 0x35	; 53
 3ac:	82 60       	ori	r24, 0x02	; 2
 3ae:	85 bf       	out	0x35, r24	; 53
 3b0:	85 b7       	in	r24, 0x35	; 53
 3b2:	8e 7f       	andi	r24, 0xFE	; 254
 3b4:	85 bf       	out	0x35, r24	; 53
 3b6:	8b b7       	in	r24, 0x3b	; 59
 3b8:	8f 7b       	andi	r24, 0xBF	; 191
 3ba:	8b bf       	out	0x3b, r24	; 59
 3bc:	8a b7       	in	r24, 0x3a	; 58
 3be:	80 64       	ori	r24, 0x40	; 64
 3c0:	8a bf       	out	0x3a, r24	; 58
 3c2:	08 95       	ret

Disassembly of section .text.EXTI_voidINT0Enable:

00000440 <EXTI_voidINT0Enable>:
	 
}
void EXTI_voidINT0Enable(void)
{
	/*INT0 Enable*/
	SET_BIT(GICR,GICR_INT0);
 440:	8b b7       	in	r24, 0x3b	; 59
 442:	80 64       	ori	r24, 0x40	; 64
 444:	8b bf       	out	0x3b, r24	; 59
 446:	08 95       	ret

Disassembly of section .text.EXTI_voidINT2Init:

000003da <EXTI_voidINT2Init>:
	SET_BIT(GICR,GICR_INT2);
}
void EXTI_voidINT2Disable(void)
{
	/*INT2 Disable*/
	CLR_BIT(GICR,GICR_INT2);
 3da:	84 b7       	in	r24, 0x34	; 52
 3dc:	8f 7b       	andi	r24, 0xBF	; 191
 3de:	84 bf       	out	0x34, r24	; 52
 3e0:	8b b7       	in	r24, 0x3b	; 59
 3e2:	8f 7d       	andi	r24, 0xDF	; 223
 3e4:	8b bf       	out	0x3b, r24	; 59
 3e6:	8a b7       	in	r24, 0x3a	; 58
 3e8:	80 62       	ori	r24, 0x20	; 32
 3ea:	8a bf       	out	0x3a, r24	; 58
 3ec:	08 95       	ret

Disassembly of section .text.EXTI_voidINT2Enable:

00000448 <EXTI_voidINT2Enable>:
	 
}
void EXTI_voidINT2Enable(void)
{
	/*INT2 Enable*/
	SET_BIT(GICR,GICR_INT2);
 448:	8b b7       	in	r24, 0x3b	; 59
 44a:	80 62       	ori	r24, 0x20	; 32
 44c:	8b bf       	out	0x3b, r24	; 59
 44e:	08 95       	ret

Disassembly of section .text.EXTINT0_VoidSetCallBack:

00000410 <EXTINT0_VoidSetCallBack>:
}


void EXTINT0_VoidSetCallBack(void (*Copy_pf) (void))
{
	EXT_INT0_pf = Copy_pf;
 410:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <EXT_INT0_pf+0x1>
 414:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <EXT_INT0_pf>
 418:	08 95       	ret

Disassembly of section .text.__vector_1:

000001ea <__vector_1>:
	SET_BIT(GICR,GICR_INT2);
}
void EXTI_voidINT2Disable(void)
{
	/*INT2 Disable*/
	CLR_BIT(GICR,GICR_INT2);
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	4f 93       	push	r20
 1fa:	5f 93       	push	r21
 1fc:	6f 93       	push	r22
 1fe:	7f 93       	push	r23
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
 20c:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <EXT_INT0_pf>
 210:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <EXT_INT0_pf+0x1>
 214:	09 95       	icall
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	7f 91       	pop	r23
 224:	6f 91       	pop	r22
 226:	5f 91       	pop	r21
 228:	4f 91       	pop	r20
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

Disassembly of section .text.EXTINT1_VoidSetCallBack:

0000041a <EXTINT1_VoidSetCallBack>:
}


void EXTINT1_VoidSetCallBack(void (*Copy_pf) (void))
{
	EXT_INT1_pf = Copy_pf;
 41a:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <EXT_INT1_pf+0x1>
 41e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <EXT_INT1_pf>
 422:	08 95       	ret

Disassembly of section .text.__vector_2:

00000238 <__vector_2>:
	SET_BIT(GICR,GICR_INT2);
}
void EXTI_voidINT2Disable(void)
{
	/*INT2 Disable*/
	CLR_BIT(GICR,GICR_INT2);
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	2f 93       	push	r18
 244:	3f 93       	push	r19
 246:	4f 93       	push	r20
 248:	5f 93       	push	r21
 24a:	6f 93       	push	r22
 24c:	7f 93       	push	r23
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	af 93       	push	r26
 254:	bf 93       	push	r27
 256:	ef 93       	push	r30
 258:	ff 93       	push	r31
 25a:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <EXT_INT1_pf>
 25e:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <EXT_INT1_pf+0x1>
 262:	09 95       	icall
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	bf 91       	pop	r27
 26a:	af 91       	pop	r26
 26c:	9f 91       	pop	r25
 26e:	8f 91       	pop	r24
 270:	7f 91       	pop	r23
 272:	6f 91       	pop	r22
 274:	5f 91       	pop	r21
 276:	4f 91       	pop	r20
 278:	3f 91       	pop	r19
 27a:	2f 91       	pop	r18
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

Disassembly of section .text.EXTINT2_VoidSetCallBack:

00000424 <EXTINT2_VoidSetCallBack>:



void EXTINT2_VoidSetCallBack(void (*Copy_pf) (void))
{
	EXT_INT2_pf = Copy_pf;
 424:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <_end+0x1>
 428:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <_end>
 42c:	08 95       	ret

Disassembly of section .text.__vector_3:

00000286 <__vector_3>:
	SET_BIT(GICR,GICR_INT2);
}
void EXTI_voidINT2Disable(void)
{
	/*INT2 Disable*/
	CLR_BIT(GICR,GICR_INT2);
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	2f 93       	push	r18
 292:	3f 93       	push	r19
 294:	4f 93       	push	r20
 296:	5f 93       	push	r21
 298:	6f 93       	push	r22
 29a:	7f 93       	push	r23
 29c:	8f 93       	push	r24
 29e:	9f 93       	push	r25
 2a0:	af 93       	push	r26
 2a2:	bf 93       	push	r27
 2a4:	ef 93       	push	r30
 2a6:	ff 93       	push	r31
 2a8:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <_end>
 2ac:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <_end+0x1>
 2b0:	09 95       	icall
 2b2:	ff 91       	pop	r31
 2b4:	ef 91       	pop	r30
 2b6:	bf 91       	pop	r27
 2b8:	af 91       	pop	r26
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	7f 91       	pop	r23
 2c0:	6f 91       	pop	r22
 2c2:	5f 91       	pop	r21
 2c4:	4f 91       	pop	r20
 2c6:	3f 91       	pop	r19
 2c8:	2f 91       	pop	r18
 2ca:	0f 90       	pop	r0
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

Disassembly of section .text.GIE_voidEnable:

00000450 <GIE_voidEnable>:
#include "GIE_config.h"


void GIE_voidEnable(void)
{
	SET_BIT(SREG,SREG_I);
 450:	8f b7       	in	r24, 0x3f	; 63
 452:	80 68       	ori	r24, 0x80	; 128
 454:	8f bf       	out	0x3f, r24	; 63
 456:	08 95       	ret

Disassembly of section .text.INT0_ISR:

0000035a <INT0_ISR>:


void INT0_ISR (void)
{
	//RESET Stop Watch
	for(int i=0;i<6;i++){
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	05 c0       	rjmp	.+10     	; 0x36a <INT0_ISR+0x10>
		Clock[i]=0;
 360:	fc 01       	movw	r30, r24
 362:	e0 5a       	subi	r30, 0xA0	; 160
 364:	ff 4f       	sbci	r31, 0xFF	; 255
 366:	10 82       	st	Z, r1


void INT0_ISR (void)
{
	//RESET Stop Watch
	for(int i=0;i<6;i++){
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	86 30       	cpi	r24, 0x06	; 6
 36c:	91 05       	cpc	r25, r1
 36e:	c4 f3       	brlt	.-16     	; 0x360 <INT0_ISR+0x6>
		Clock[i]=0;
	}
	TCNT1=0;	//Timer Start from 0
 370:	1d bc       	out	0x2d, r1	; 45
 372:	1c bc       	out	0x2c, r1	; 44
 374:	08 95       	ret

Disassembly of section .text.INT1_ISR:

000003ee <INT1_ISR>:
}

void INT1_ISR (void)
{
	//PAUSE Stop Watch,No Clock Source
	CLR_BIT(TCCR1B,TCCR1B_CS10);
 3ee:	8e b5       	in	r24, 0x2e	; 46
 3f0:	8e 7f       	andi	r24, 0xFE	; 254
 3f2:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,TCCR1B_CS11);
 3f4:	8e b5       	in	r24, 0x2e	; 46
 3f6:	8d 7f       	andi	r24, 0xFD	; 253
 3f8:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,TCCR1B_CS12);
 3fa:	8e b5       	in	r24, 0x2e	; 46
 3fc:	8b 7f       	andi	r24, 0xFB	; 251
 3fe:	8e bd       	out	0x2e, r24	; 46
 400:	08 95       	ret

Disassembly of section .text.INT2_ISR:

00000402 <INT2_ISR>:
}
void INT2_ISR (void)
{
	//RESUME Stop Watch,Set PreScaler by 1024
	SET_BIT(TCCR1B,TCCR1B_CS10);
 402:	8e b5       	in	r24, 0x2e	; 46
 404:	81 60       	ori	r24, 0x01	; 1
 406:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,TCCR1B_CS12);
 408:	8e b5       	in	r24, 0x2e	; 46
 40a:	84 60       	ori	r24, 0x04	; 4
 40c:	8e bd       	out	0x2e, r24	; 46
 40e:	08 95       	ret

Disassembly of section .text.Timer1_ISR:

00000458 <Timer1_ISR>:
}

void Timer1_ISR (void)
{
	flag = 1;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <flag>
 45e:	08 95       	ret

Disassembly of section .text.main:

00000126 <main>:
u8 flag;
u8 Clock[6];

int main(void)
{
	DIO_VoidInit();
 126:	0e 94 bb 01 	call	0x376	; 0x376 <DIO_VoidInit>
	GIE_voidEnable();
 12a:	0e 94 28 02 	call	0x450	; 0x450 <GIE_voidEnable>
	
	/*RESET Interrupt*/
	EXTI_voidINT0Init();
 12e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <EXTI_voidINT0Init>
	EXTINT0_VoidSetCallBack(INT0_ISR);
 132:	8d ea       	ldi	r24, 0xAD	; 173
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 08 02 	call	0x410	; 0x410 <EXTINT0_VoidSetCallBack>
	EXTI_voidINT0Enable();
 13a:	0e 94 20 02 	call	0x440	; 0x440 <EXTI_voidINT0Enable>
	
	/*PAUSE Interrupt*/
	EXTI_voidINT1Init();
 13e:	0e 94 c8 01 	call	0x390	; 0x390 <EXTI_voidINT1Init>
	EXTINT1_VoidSetCallBack(INT1_ISR);
 142:	87 ef       	ldi	r24, 0xF7	; 247
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 0d 02 	call	0x41a	; 0x41a <EXTINT1_VoidSetCallBack>
	EXTI_voidINT1Enable();
 14a:	0e 94 1c 02 	call	0x438	; 0x438 <EXTI_voidINT1Enable>
	
	/*RESUME Interrupt*/
	EXTI_voidINT2Init();
 14e:	0e 94 ed 01 	call	0x3da	; 0x3da <EXTI_voidINT2Init>
	EXTINT2_VoidSetCallBack(INT2_ISR);
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	92 e0       	ldi	r25, 0x02	; 2
 156:	0e 94 12 02 	call	0x424	; 0x424 <EXTINT2_VoidSetCallBack>
	EXTI_voidINT2Enable();
 15a:	0e 94 24 02 	call	0x448	; 0x448 <EXTI_voidINT2Enable>
	
	/*TIMER Interrupt*/
	Timer1_voidInit();
 15e:	0e 94 c4 00 	call	0x188	; 0x188 <Timer1_voidInit>
	Timer1_voidSetOCR1AValue(7813);	// for 1 sec at Freq=8MHZ, Prescaler=1024;
 162:	85 e8       	ldi	r24, 0x85	; 133
 164:	9e e1       	ldi	r25, 0x1E	; 30
 166:	0e 94 30 02 	call	0x460	; 0x460 <Timer1_voidSetOCR1AValue>
	Timer1_voidCompareSetCallBack(Timer1_ISR);
 16a:	8c e2       	ldi	r24, 0x2C	; 44
 16c:	92 e0       	ldi	r25, 0x02	; 2
 16e:	0e 94 17 02 	call	0x42e	; 0x42e <Timer1_voidCompareSetCallBack>
	
		
    while(1)
    {
		SevenSegment_voidDisplay();
 172:	0e 94 91 01 	call	0x322	; 0x322 <SevenSegment_voidDisplay>
       if(flag==1){
 176:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <flag>
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	d1 f7       	brne	.-12     	; 0x172 <main+0x4c>
	       SevenSegment_voidUpdateDigits();
 17e:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
	       flag=0;
 182:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <flag>
 186:	f5 cf       	rjmp	.-22     	; 0x172 <main+0x4c>

Disassembly of section .text.Timer1_voidInit:

00000188 <Timer1_voidInit>:
	CLR_BIT(TCCR1A,TCCR1A_WGM11);
	CLR_BIT(TCCR1B,TCCR1B_WGM12);
	CLR_BIT(TCCR1B,TCCR1B_WGM13);
	
	#elif Timer1_MODE == CTC_OCR1A
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
 188:	8f b5       	in	r24, 0x2f	; 47
 18a:	8e 7f       	andi	r24, 0xFE	; 254
 18c:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A,TCCR1A_WGM11);
 18e:	8f b5       	in	r24, 0x2f	; 47
 190:	8d 7f       	andi	r24, 0xFD	; 253
 192:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,TCCR1B_WGM12);
 194:	8e b5       	in	r24, 0x2e	; 46
 196:	88 60       	ori	r24, 0x08	; 8
 198:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,TCCR1B_WGM13);
 19a:	8e b5       	in	r24, 0x2e	; 46
 19c:	8f 7e       	andi	r24, 0xEF	; 239
 19e:	8e bd       	out	0x2e, r24	; 46
	#endif
		
	/*Select PreScaler*/
	TCCR1B &= Timer1_PRESCALER_MASK;
 1a0:	8e b5       	in	r24, 0x2e	; 46
 1a2:	88 7f       	andi	r24, 0xF8	; 248
 1a4:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= Timer1_PRESCALLER;
 1a6:	8e b5       	in	r24, 0x2e	; 46
 1a8:	85 60       	ori	r24, 0x05	; 5
 1aa:	8e bd       	out	0x2e, r24	; 46
	
	/*Clear Registers*/
	TCNT1 = 0;
 1ac:	1d bc       	out	0x2d, r1	; 45
 1ae:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 0;
 1b0:	1b bc       	out	0x2b, r1	; 43
 1b2:	1a bc       	out	0x2a, r1	; 42
	ICR1 = 0;
 1b4:	17 bc       	out	0x27, r1	; 39
 1b6:	16 bc       	out	0x26, r1	; 38
	
	/*Disable Interrupts*/
	CLR_BIT(TIMSK,TIMSK_TOIE1);
 1b8:	89 b7       	in	r24, 0x39	; 57
 1ba:	8b 7f       	andi	r24, 0xFB	; 251
 1bc:	89 bf       	out	0x39, r24	; 57
	CLR_BIT(TIMSK,TIMSK_OCIE1B);
 1be:	89 b7       	in	r24, 0x39	; 57
 1c0:	87 7f       	andi	r24, 0xF7	; 247
 1c2:	89 bf       	out	0x39, r24	; 57
	CLR_BIT(TIMSK,TIMSK_TICIE1);
 1c4:	89 b7       	in	r24, 0x39	; 57
 1c6:	8f 7d       	andi	r24, 0xDF	; 223
 1c8:	89 bf       	out	0x39, r24	; 57
	
	/*Enable CM Interrupt*/
	SET_BIT(TIMSK,TIMSK_OCIE1A);
 1ca:	89 b7       	in	r24, 0x39	; 57
 1cc:	80 61       	ori	r24, 0x10	; 16
 1ce:	89 bf       	out	0x39, r24	; 57
	
	
	/*Disable Flags*/
	SET_BIT(TIFR,TIFR_TOV1);
 1d0:	88 b7       	in	r24, 0x38	; 56
 1d2:	84 60       	ori	r24, 0x04	; 4
 1d4:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR,TIFR_OCF1B);
 1d6:	88 b7       	in	r24, 0x38	; 56
 1d8:	88 60       	ori	r24, 0x08	; 8
 1da:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR,TIFR_OCF1A);
 1dc:	88 b7       	in	r24, 0x38	; 56
 1de:	80 61       	ori	r24, 0x10	; 16
 1e0:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR,TIFR_ICF1);	
 1e2:	88 b7       	in	r24, 0x38	; 56
 1e4:	80 62       	ori	r24, 0x20	; 32
 1e6:	88 bf       	out	0x38, r24	; 56
 1e8:	08 95       	ret

Disassembly of section .text.Timer1_voidSetOCR1AValue:

00000460 <Timer1_voidSetOCR1AValue>:
}

void Timer1_voidSetOCR1AValue(u16 Value)
{
	OCR1A = Value;
 460:	9b bd       	out	0x2b, r25	; 43
 462:	8a bd       	out	0x2a, r24	; 42
 464:	08 95       	ret

Disassembly of section .text.Timer1_voidCompareSetCallBack:

0000042e <Timer1_voidCompareSetCallBack>:
}

void Timer1_voidCompareSetCallBack(void(*Copy_pf)(void))
{
	Compare = Copy_pf;
 42e:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <Compare+0x1>
 432:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Compare>
 436:	08 95       	ret

Disassembly of section .text.__vector_7:

000002d4 <__vector_7>:
}

/*CTC Vector*/
void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
 2d4:	1f 92       	push	r1
 2d6:	0f 92       	push	r0
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	0f 92       	push	r0
 2dc:	11 24       	eor	r1, r1
 2de:	2f 93       	push	r18
 2e0:	3f 93       	push	r19
 2e2:	4f 93       	push	r20
 2e4:	5f 93       	push	r21
 2e6:	6f 93       	push	r22
 2e8:	7f 93       	push	r23
 2ea:	8f 93       	push	r24
 2ec:	9f 93       	push	r25
 2ee:	af 93       	push	r26
 2f0:	bf 93       	push	r27
 2f2:	ef 93       	push	r30
 2f4:	ff 93       	push	r31
	Compare();
 2f6:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <Compare>
 2fa:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <Compare+0x1>
 2fe:	09 95       	icall
 300:	ff 91       	pop	r31
 302:	ef 91       	pop	r30
 304:	bf 91       	pop	r27
 306:	af 91       	pop	r26
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	7f 91       	pop	r23
 30e:	6f 91       	pop	r22
 310:	5f 91       	pop	r21
 312:	4f 91       	pop	r20
 314:	3f 91       	pop	r19
 316:	2f 91       	pop	r18
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

Disassembly of section .text.__dummy_fini:

0000046e <_fini>:
 46e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000470 <__funcs_on_exit>:
 470:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000472 <__simulator_exit>:
 472:	08 95       	ret

Disassembly of section .text.exit:

000003c4 <exit>:
 3c4:	ec 01       	movw	r28, r24
 3c6:	0e 94 38 02 	call	0x470	; 0x470 <__funcs_on_exit>
 3ca:	0e 94 37 02 	call	0x46e	; 0x46e <_fini>
 3ce:	ce 01       	movw	r24, r28
 3d0:	0e 94 39 02 	call	0x472	; 0x472 <__simulator_exit>
 3d4:	ce 01       	movw	r24, r28
 3d6:	0e 94 35 02 	call	0x46a	; 0x46a <_Exit>

Disassembly of section .text._Exit:

0000046a <_Exit>:
 46a:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
