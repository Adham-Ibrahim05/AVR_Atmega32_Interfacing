
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000f76  0000102a  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000102a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  00001059  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00001075  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002f4e  00000000  00000000  0000114d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000091f  00000000  00000000  0000409b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000eff  00000000  00000000  000049ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d4  00000000  00000000  000058bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ac  00000000  00000000  00005a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000017bf  00000000  00000000  00005d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000074fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000f50  00000f50  00001004  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007594  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.DIO_voidSetPinDirection 000000e6  000008fe  000008fe  000009b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.DIO_voidSetPinValue 000000e6  000009e4  000009e4  00000a98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.DIO_u8GetPinValue 00000086  00000dda  00000dda  00000e8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.KPD_u8Init 000000a2  00000d38  00000d38  00000dec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.KPD_u8GetPressedKey 000000ba  00000c7e  00000c7e  00000d32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .rodata.KPD_Arr.1602 00000010  00800060  00000f5e  00001012  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 20 .rodata.Row_Arr.1604 00000004  00800070  00000f6e  00001022  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .rodata.Coloumn_Arr.1603 00000004  00800074  00000f72  00001026  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .text.LCD_voidSendCommand 000000da  00000aca  00000aca  00000b7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCD_voidInit 0000032a  000004d8  000004d8  0000058c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.LCD_voidSendData 000000da  00000ba4  00000ba4  00000c58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.LCD_voidSendString 00000036  00000edc  00000edc  00000f90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.LCD_voidGoToXY 000000fc  00000802  00000802  000008b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.LCD_voidWriteNumber 0000007c  00000e60  00000e60  00000f14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .progmemx.data 0000000b  000000b0  000000b0  00000164  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 29 .text.main    0000041c  000000bc  000000bc  00000170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.libgcc.div 00000028  00000f12  00000f12  00000fc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__dummy_fini 00000002  00000f58  00000f58  0000100c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__dummy_funcs_on_exit 00000002  00000f5a  00000f5a  0000100e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__dummy_simulator_exit 00000002  00000f5c  00000f5c  00001010  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.exit    00000016  00000f3a  00000f3a  00000fee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text._Exit   00000004  00000f54  00000f54  00001008  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>
   8:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>
   c:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>
  10:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>
  14:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>
  18:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>
  1c:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>
  20:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>
  24:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>
  28:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>
  2c:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>
  30:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>
  34:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>
  38:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>
  3c:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>
  40:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>
  44:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>
  48:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>
  4c:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>
  50:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 78       	andi	r16, 0x80	; 128
  58:	00 0f       	add	r16, r16
  5a:	5e 00       	.word	0x005e	; ????

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d8 e0       	ldi	r29, 0x08	; 8
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	e4 e5       	ldi	r30, 0x54	; 84
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	17 c0       	rjmp	.+46     	; 0x9e <__do_clear_bss+0x8>
  70:	b5 91       	lpm	r27, Z+
  72:	a5 91       	lpm	r26, Z+
  74:	35 91       	lpm	r19, Z+
  76:	25 91       	lpm	r18, Z+
  78:	05 91       	lpm	r16, Z+
  7a:	07 fd       	sbrc	r16, 7
  7c:	0c c0       	rjmp	.+24     	; 0x96 <__do_clear_bss>
  7e:	95 91       	lpm	r25, Z+
  80:	85 91       	lpm	r24, Z+
  82:	ef 01       	movw	r28, r30
  84:	f9 2f       	mov	r31, r25
  86:	e8 2f       	mov	r30, r24
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 17       	cp	r26, r18
  8e:	b3 07       	cpc	r27, r19
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0x20>
  92:	fe 01       	movw	r30, r28
  94:	04 c0       	rjmp	.+8      	; 0x9e <__do_clear_bss+0x8>

00000096 <__do_clear_bss>:
  96:	1d 92       	st	X+, r1
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	e1 f7       	brne	.-8      	; 0x96 <__do_clear_bss>
  9e:	eb 35       	cpi	r30, 0x5B	; 91
  a0:	f4 07       	cpc	r31, r20
  a2:	31 f7       	brne	.-52     	; 0x70 <__do_copy_data+0x8>
  a4:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  a8:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <exit>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

Disassembly of section .text:

00000f50 <__bad_interrupt>:
 f50:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.DIO_voidSetPinDirection:

000008fe <DIO_voidSetPinDirection>:
	switch(PORT_ID)
	{
		case DIO_PORTA: PORTA= Value;break;
		case DIO_PORTB: PORTB= Value;break;
		case DIO_PORTC: PORTC= Value;break;
		case DIO_PORTD: PORTD= Value;break;
 8fe:	68 30       	cpi	r22, 0x08	; 8
 900:	08 f0       	brcs	.+2      	; 0x904 <DIO_voidSetPinDirection+0x6>
 902:	6f c0       	rjmp	.+222    	; 0x9e2 <DIO_voidSetPinDirection+0xe4>
 904:	41 11       	cpse	r20, r1
 906:	38 c0       	rjmp	.+112    	; 0x978 <DIO_voidSetPinDirection+0x7a>
 908:	81 30       	cpi	r24, 0x01	; 1
 90a:	91 f0       	breq	.+36     	; 0x930 <DIO_voidSetPinDirection+0x32>
 90c:	28 f0       	brcs	.+10     	; 0x918 <DIO_voidSetPinDirection+0x1a>
 90e:	82 30       	cpi	r24, 0x02	; 2
 910:	d9 f0       	breq	.+54     	; 0x948 <DIO_voidSetPinDirection+0x4a>
 912:	83 30       	cpi	r24, 0x03	; 3
 914:	29 f1       	breq	.+74     	; 0x960 <DIO_voidSetPinDirection+0x62>
 916:	08 95       	ret
 918:	2a b3       	in	r18, 0x1a	; 26
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	02 c0       	rjmp	.+4      	; 0x924 <DIO_voidSetPinDirection+0x26>
 920:	88 0f       	add	r24, r24
 922:	99 1f       	adc	r25, r25
 924:	6a 95       	dec	r22
 926:	e2 f7       	brpl	.-8      	; 0x920 <DIO_voidSetPinDirection+0x22>
 928:	80 95       	com	r24
 92a:	82 23       	and	r24, r18
 92c:	8a bb       	out	0x1a, r24	; 26
 92e:	08 95       	ret
 930:	27 b3       	in	r18, 0x17	; 23
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	02 c0       	rjmp	.+4      	; 0x93c <DIO_voidSetPinDirection+0x3e>
 938:	88 0f       	add	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	6a 95       	dec	r22
 93e:	e2 f7       	brpl	.-8      	; 0x938 <DIO_voidSetPinDirection+0x3a>
 940:	80 95       	com	r24
 942:	82 23       	and	r24, r18
 944:	87 bb       	out	0x17, r24	; 23
 946:	08 95       	ret
 948:	24 b3       	in	r18, 0x14	; 20
 94a:	81 e0       	ldi	r24, 0x01	; 1
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	02 c0       	rjmp	.+4      	; 0x954 <DIO_voidSetPinDirection+0x56>
 950:	88 0f       	add	r24, r24
 952:	99 1f       	adc	r25, r25
 954:	6a 95       	dec	r22
 956:	e2 f7       	brpl	.-8      	; 0x950 <DIO_voidSetPinDirection+0x52>
 958:	80 95       	com	r24
 95a:	82 23       	and	r24, r18
 95c:	84 bb       	out	0x14, r24	; 20
 95e:	08 95       	ret
 960:	21 b3       	in	r18, 0x11	; 17
 962:	81 e0       	ldi	r24, 0x01	; 1
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	02 c0       	rjmp	.+4      	; 0x96c <DIO_voidSetPinDirection+0x6e>
 968:	88 0f       	add	r24, r24
 96a:	99 1f       	adc	r25, r25
 96c:	6a 95       	dec	r22
 96e:	e2 f7       	brpl	.-8      	; 0x968 <DIO_voidSetPinDirection+0x6a>
 970:	80 95       	com	r24
 972:	82 23       	and	r24, r18
 974:	81 bb       	out	0x11, r24	; 17
 976:	08 95       	ret
 978:	41 30       	cpi	r20, 0x01	; 1
 97a:	99 f5       	brne	.+102    	; 0x9e2 <DIO_voidSetPinDirection+0xe4>
 97c:	81 30       	cpi	r24, 0x01	; 1
 97e:	89 f0       	breq	.+34     	; 0x9a2 <DIO_voidSetPinDirection+0xa4>
 980:	28 f0       	brcs	.+10     	; 0x98c <DIO_voidSetPinDirection+0x8e>
 982:	82 30       	cpi	r24, 0x02	; 2
 984:	c9 f0       	breq	.+50     	; 0x9b8 <DIO_voidSetPinDirection+0xba>
 986:	83 30       	cpi	r24, 0x03	; 3
 988:	11 f1       	breq	.+68     	; 0x9ce <DIO_voidSetPinDirection+0xd0>
 98a:	08 95       	ret
 98c:	2a b3       	in	r18, 0x1a	; 26
 98e:	81 e0       	ldi	r24, 0x01	; 1
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	02 c0       	rjmp	.+4      	; 0x998 <DIO_voidSetPinDirection+0x9a>
 994:	88 0f       	add	r24, r24
 996:	99 1f       	adc	r25, r25
 998:	6a 95       	dec	r22
 99a:	e2 f7       	brpl	.-8      	; 0x994 <DIO_voidSetPinDirection+0x96>
 99c:	82 2b       	or	r24, r18
 99e:	8a bb       	out	0x1a, r24	; 26
 9a0:	08 95       	ret
 9a2:	27 b3       	in	r18, 0x17	; 23
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	02 c0       	rjmp	.+4      	; 0x9ae <DIO_voidSetPinDirection+0xb0>
 9aa:	88 0f       	add	r24, r24
 9ac:	99 1f       	adc	r25, r25
 9ae:	6a 95       	dec	r22
 9b0:	e2 f7       	brpl	.-8      	; 0x9aa <DIO_voidSetPinDirection+0xac>
 9b2:	82 2b       	or	r24, r18
 9b4:	87 bb       	out	0x17, r24	; 23
 9b6:	08 95       	ret
 9b8:	24 b3       	in	r18, 0x14	; 20
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	02 c0       	rjmp	.+4      	; 0x9c4 <DIO_voidSetPinDirection+0xc6>
 9c0:	88 0f       	add	r24, r24
 9c2:	99 1f       	adc	r25, r25
 9c4:	6a 95       	dec	r22
 9c6:	e2 f7       	brpl	.-8      	; 0x9c0 <DIO_voidSetPinDirection+0xc2>
 9c8:	82 2b       	or	r24, r18
 9ca:	84 bb       	out	0x14, r24	; 20
 9cc:	08 95       	ret
 9ce:	21 b3       	in	r18, 0x11	; 17
 9d0:	81 e0       	ldi	r24, 0x01	; 1
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	02 c0       	rjmp	.+4      	; 0x9da <DIO_voidSetPinDirection+0xdc>
 9d6:	88 0f       	add	r24, r24
 9d8:	99 1f       	adc	r25, r25
 9da:	6a 95       	dec	r22
 9dc:	e2 f7       	brpl	.-8      	; 0x9d6 <DIO_voidSetPinDirection+0xd8>
 9de:	82 2b       	or	r24, r18
 9e0:	81 bb       	out	0x11, r24	; 17
 9e2:	08 95       	ret

Disassembly of section .text.DIO_voidSetPinValue:

000009e4 <DIO_voidSetPinValue>:
 9e4:	68 30       	cpi	r22, 0x08	; 8
 9e6:	08 f0       	brcs	.+2      	; 0x9ea <DIO_voidSetPinValue+0x6>
 9e8:	6f c0       	rjmp	.+222    	; 0xac8 <DIO_voidSetPinValue+0xe4>
 9ea:	41 11       	cpse	r20, r1
 9ec:	38 c0       	rjmp	.+112    	; 0xa5e <DIO_voidSetPinValue+0x7a>
 9ee:	81 30       	cpi	r24, 0x01	; 1
 9f0:	91 f0       	breq	.+36     	; 0xa16 <DIO_voidSetPinValue+0x32>
 9f2:	28 f0       	brcs	.+10     	; 0x9fe <DIO_voidSetPinValue+0x1a>
 9f4:	82 30       	cpi	r24, 0x02	; 2
 9f6:	d9 f0       	breq	.+54     	; 0xa2e <DIO_voidSetPinValue+0x4a>
 9f8:	83 30       	cpi	r24, 0x03	; 3
 9fa:	29 f1       	breq	.+74     	; 0xa46 <DIO_voidSetPinValue+0x62>
 9fc:	08 95       	ret
 9fe:	2b b3       	in	r18, 0x1b	; 27
 a00:	81 e0       	ldi	r24, 0x01	; 1
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	02 c0       	rjmp	.+4      	; 0xa0a <DIO_voidSetPinValue+0x26>
 a06:	88 0f       	add	r24, r24
 a08:	99 1f       	adc	r25, r25
 a0a:	6a 95       	dec	r22
 a0c:	e2 f7       	brpl	.-8      	; 0xa06 <DIO_voidSetPinValue+0x22>
 a0e:	80 95       	com	r24
 a10:	82 23       	and	r24, r18
 a12:	8b bb       	out	0x1b, r24	; 27
 a14:	08 95       	ret
 a16:	28 b3       	in	r18, 0x18	; 24
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	02 c0       	rjmp	.+4      	; 0xa22 <DIO_voidSetPinValue+0x3e>
 a1e:	88 0f       	add	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	6a 95       	dec	r22
 a24:	e2 f7       	brpl	.-8      	; 0xa1e <DIO_voidSetPinValue+0x3a>
 a26:	80 95       	com	r24
 a28:	82 23       	and	r24, r18
 a2a:	88 bb       	out	0x18, r24	; 24
 a2c:	08 95       	ret
 a2e:	25 b3       	in	r18, 0x15	; 21
 a30:	81 e0       	ldi	r24, 0x01	; 1
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	02 c0       	rjmp	.+4      	; 0xa3a <DIO_voidSetPinValue+0x56>
 a36:	88 0f       	add	r24, r24
 a38:	99 1f       	adc	r25, r25
 a3a:	6a 95       	dec	r22
 a3c:	e2 f7       	brpl	.-8      	; 0xa36 <DIO_voidSetPinValue+0x52>
 a3e:	80 95       	com	r24
 a40:	82 23       	and	r24, r18
 a42:	85 bb       	out	0x15, r24	; 21
 a44:	08 95       	ret
 a46:	22 b3       	in	r18, 0x12	; 18
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	02 c0       	rjmp	.+4      	; 0xa52 <DIO_voidSetPinValue+0x6e>
 a4e:	88 0f       	add	r24, r24
 a50:	99 1f       	adc	r25, r25
 a52:	6a 95       	dec	r22
 a54:	e2 f7       	brpl	.-8      	; 0xa4e <DIO_voidSetPinValue+0x6a>
 a56:	80 95       	com	r24
 a58:	82 23       	and	r24, r18
 a5a:	82 bb       	out	0x12, r24	; 18
 a5c:	08 95       	ret
 a5e:	41 30       	cpi	r20, 0x01	; 1
 a60:	99 f5       	brne	.+102    	; 0xac8 <DIO_voidSetPinValue+0xe4>
 a62:	81 30       	cpi	r24, 0x01	; 1
 a64:	89 f0       	breq	.+34     	; 0xa88 <DIO_voidSetPinValue+0xa4>
 a66:	28 f0       	brcs	.+10     	; 0xa72 <DIO_voidSetPinValue+0x8e>
 a68:	82 30       	cpi	r24, 0x02	; 2
 a6a:	c9 f0       	breq	.+50     	; 0xa9e <DIO_voidSetPinValue+0xba>
 a6c:	83 30       	cpi	r24, 0x03	; 3
 a6e:	11 f1       	breq	.+68     	; 0xab4 <DIO_voidSetPinValue+0xd0>
 a70:	08 95       	ret
 a72:	2b b3       	in	r18, 0x1b	; 27
 a74:	81 e0       	ldi	r24, 0x01	; 1
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	02 c0       	rjmp	.+4      	; 0xa7e <DIO_voidSetPinValue+0x9a>
 a7a:	88 0f       	add	r24, r24
 a7c:	99 1f       	adc	r25, r25
 a7e:	6a 95       	dec	r22
 a80:	e2 f7       	brpl	.-8      	; 0xa7a <DIO_voidSetPinValue+0x96>
 a82:	82 2b       	or	r24, r18
 a84:	8b bb       	out	0x1b, r24	; 27
 a86:	08 95       	ret
 a88:	28 b3       	in	r18, 0x18	; 24
 a8a:	81 e0       	ldi	r24, 0x01	; 1
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	02 c0       	rjmp	.+4      	; 0xa94 <DIO_voidSetPinValue+0xb0>
 a90:	88 0f       	add	r24, r24
 a92:	99 1f       	adc	r25, r25
 a94:	6a 95       	dec	r22
 a96:	e2 f7       	brpl	.-8      	; 0xa90 <DIO_voidSetPinValue+0xac>
 a98:	82 2b       	or	r24, r18
 a9a:	88 bb       	out	0x18, r24	; 24
 a9c:	08 95       	ret
 a9e:	25 b3       	in	r18, 0x15	; 21
 aa0:	81 e0       	ldi	r24, 0x01	; 1
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	02 c0       	rjmp	.+4      	; 0xaaa <DIO_voidSetPinValue+0xc6>
 aa6:	88 0f       	add	r24, r24
 aa8:	99 1f       	adc	r25, r25
 aaa:	6a 95       	dec	r22
 aac:	e2 f7       	brpl	.-8      	; 0xaa6 <DIO_voidSetPinValue+0xc2>
 aae:	82 2b       	or	r24, r18
 ab0:	85 bb       	out	0x15, r24	; 21
 ab2:	08 95       	ret
 ab4:	22 b3       	in	r18, 0x12	; 18
 ab6:	81 e0       	ldi	r24, 0x01	; 1
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <DIO_voidSetPinValue+0xdc>
 abc:	88 0f       	add	r24, r24
 abe:	99 1f       	adc	r25, r25
 ac0:	6a 95       	dec	r22
 ac2:	e2 f7       	brpl	.-8      	; 0xabc <DIO_voidSetPinValue+0xd8>
 ac4:	82 2b       	or	r24, r18
 ac6:	82 bb       	out	0x12, r24	; 18
 ac8:	08 95       	ret

Disassembly of section .text.DIO_u8GetPinValue:

00000dda <DIO_u8GetPinValue>:
}

u8 DIO_u8GetPinValue(u8 PORT_ID,u8 PIN_ID,u8* Value)
{
	u8 NULL_PtrErrorState = 0;
	if(Value!=NULL && PIN_ID<=PIN7)
 dda:	41 15       	cp	r20, r1
 ddc:	51 05       	cpc	r21, r1
 dde:	d1 f1       	breq	.+116    	; 0xe54 <DIO_u8GetPinValue+0x7a>
 de0:	68 30       	cpi	r22, 0x08	; 8
 de2:	d0 f5       	brcc	.+116    	; 0xe58 <DIO_u8GetPinValue+0x7e>
	{
		switch(PORT_ID)
 de4:	81 30       	cpi	r24, 0x01	; 1
 de6:	91 f0       	breq	.+36     	; 0xe0c <DIO_u8GetPinValue+0x32>
 de8:	28 f0       	brcs	.+10     	; 0xdf4 <DIO_u8GetPinValue+0x1a>
 dea:	82 30       	cpi	r24, 0x02	; 2
 dec:	d9 f0       	breq	.+54     	; 0xe24 <DIO_u8GetPinValue+0x4a>
 dee:	83 30       	cpi	r24, 0x03	; 3
 df0:	29 f1       	breq	.+74     	; 0xe3c <DIO_u8GetPinValue+0x62>
 df2:	34 c0       	rjmp	.+104    	; 0xe5c <DIO_u8GetPinValue+0x82>
		{
			case DIO_PORTA: *Value = GET_BIT(PINA,PIN_ID); break;
 df4:	89 b3       	in	r24, 0x19	; 25
 df6:	90 e0       	ldi	r25, 0x00	; 0
 df8:	02 c0       	rjmp	.+4      	; 0xdfe <DIO_u8GetPinValue+0x24>
 dfa:	95 95       	asr	r25
 dfc:	87 95       	ror	r24
 dfe:	6a 95       	dec	r22
 e00:	e2 f7       	brpl	.-8      	; 0xdfa <DIO_u8GetPinValue+0x20>
 e02:	81 70       	andi	r24, 0x01	; 1
 e04:	fa 01       	movw	r30, r20
 e06:	80 83       	st	Z, r24
	}
}

u8 DIO_u8GetPinValue(u8 PORT_ID,u8 PIN_ID,u8* Value)
{
	u8 NULL_PtrErrorState = 0;
 e08:	80 e0       	ldi	r24, 0x00	; 0
	if(Value!=NULL && PIN_ID<=PIN7)
	{
		switch(PORT_ID)
		{
			case DIO_PORTA: *Value = GET_BIT(PINA,PIN_ID); break;
 e0a:	08 95       	ret
			case DIO_PORTB: *Value = GET_BIT(PINB,PIN_ID); break;
 e0c:	86 b3       	in	r24, 0x16	; 22
 e0e:	90 e0       	ldi	r25, 0x00	; 0
 e10:	02 c0       	rjmp	.+4      	; 0xe16 <DIO_u8GetPinValue+0x3c>
 e12:	95 95       	asr	r25
 e14:	87 95       	ror	r24
 e16:	6a 95       	dec	r22
 e18:	e2 f7       	brpl	.-8      	; 0xe12 <DIO_u8GetPinValue+0x38>
 e1a:	81 70       	andi	r24, 0x01	; 1
 e1c:	fa 01       	movw	r30, r20
 e1e:	80 83       	st	Z, r24
	}
}

u8 DIO_u8GetPinValue(u8 PORT_ID,u8 PIN_ID,u8* Value)
{
	u8 NULL_PtrErrorState = 0;
 e20:	80 e0       	ldi	r24, 0x00	; 0
	if(Value!=NULL && PIN_ID<=PIN7)
	{
		switch(PORT_ID)
		{
			case DIO_PORTA: *Value = GET_BIT(PINA,PIN_ID); break;
			case DIO_PORTB: *Value = GET_BIT(PINB,PIN_ID); break;
 e22:	08 95       	ret
			case DIO_PORTC: *Value = GET_BIT(PINC,PIN_ID); break;
 e24:	83 b3       	in	r24, 0x13	; 19
 e26:	90 e0       	ldi	r25, 0x00	; 0
 e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_u8GetPinValue+0x54>
 e2a:	95 95       	asr	r25
 e2c:	87 95       	ror	r24
 e2e:	6a 95       	dec	r22
 e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_u8GetPinValue+0x50>
 e32:	81 70       	andi	r24, 0x01	; 1
 e34:	fa 01       	movw	r30, r20
 e36:	80 83       	st	Z, r24
	}
}

u8 DIO_u8GetPinValue(u8 PORT_ID,u8 PIN_ID,u8* Value)
{
	u8 NULL_PtrErrorState = 0;
 e38:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PORT_ID)
		{
			case DIO_PORTA: *Value = GET_BIT(PINA,PIN_ID); break;
			case DIO_PORTB: *Value = GET_BIT(PINB,PIN_ID); break;
			case DIO_PORTC: *Value = GET_BIT(PINC,PIN_ID); break;
 e3a:	08 95       	ret
			case DIO_PORTD: *Value = GET_BIT(PIND,PIN_ID); break;
 e3c:	80 b3       	in	r24, 0x10	; 16
 e3e:	90 e0       	ldi	r25, 0x00	; 0
 e40:	02 c0       	rjmp	.+4      	; 0xe46 <DIO_u8GetPinValue+0x6c>
 e42:	95 95       	asr	r25
 e44:	87 95       	ror	r24
 e46:	6a 95       	dec	r22
 e48:	e2 f7       	brpl	.-8      	; 0xe42 <DIO_u8GetPinValue+0x68>
 e4a:	81 70       	andi	r24, 0x01	; 1
 e4c:	fa 01       	movw	r30, r20
 e4e:	80 83       	st	Z, r24
	}
}

u8 DIO_u8GetPinValue(u8 PORT_ID,u8 PIN_ID,u8* Value)
{
	u8 NULL_PtrErrorState = 0;
 e50:	80 e0       	ldi	r24, 0x00	; 0
		switch(PORT_ID)
		{
			case DIO_PORTA: *Value = GET_BIT(PINA,PIN_ID); break;
			case DIO_PORTB: *Value = GET_BIT(PINB,PIN_ID); break;
			case DIO_PORTC: *Value = GET_BIT(PINC,PIN_ID); break;
			case DIO_PORTD: *Value = GET_BIT(PIND,PIN_ID); break;
 e52:	08 95       	ret
		}
	}
	else
	{
		NULL_PtrErrorState = 1;
 e54:	81 e0       	ldi	r24, 0x01	; 1
 e56:	08 95       	ret
 e58:	81 e0       	ldi	r24, 0x01	; 1
 e5a:	08 95       	ret
	}
}

u8 DIO_u8GetPinValue(u8 PORT_ID,u8 PIN_ID,u8* Value)
{
	u8 NULL_PtrErrorState = 0;
 e5c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		NULL_PtrErrorState = 1;
	}
	return NULL_PtrErrorState;
}
 e5e:	08 95       	ret

Disassembly of section .text.KPD_u8Init:

00000d38 <KPD_u8Init>:
#include "KPD_register.h"
#include "KPD_private.h"

void KPD_u8Init()
{
	DIO_voidSetPinDirection(COLOUMN_PORT,COLOUMN1,PIN_OUTPUT);
 d38:	41 e0       	ldi	r20, 0x01	; 1
 d3a:	67 e0       	ldi	r22, 0x07	; 7
 d3c:	83 e0       	ldi	r24, 0x03	; 3
 d3e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(COLOUMN_PORT,COLOUMN2,PIN_OUTPUT);
 d42:	41 e0       	ldi	r20, 0x01	; 1
 d44:	66 e0       	ldi	r22, 0x06	; 6
 d46:	83 e0       	ldi	r24, 0x03	; 3
 d48:	0e 94 7f 04 	call	0x8fe	; 0x8fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(COLOUMN_PORT,COLOUMN3,PIN_OUTPUT);
 d4c:	41 e0       	ldi	r20, 0x01	; 1
 d4e:	65 e0       	ldi	r22, 0x05	; 5
 d50:	83 e0       	ldi	r24, 0x03	; 3
 d52:	0e 94 7f 04 	call	0x8fe	; 0x8fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(COLOUMN_PORT,COLOUMN4,PIN_OUTPUT);
 d56:	41 e0       	ldi	r20, 0x01	; 1
 d58:	63 e0       	ldi	r22, 0x03	; 3
 d5a:	83 e0       	ldi	r24, 0x03	; 3
 d5c:	0e 94 7f 04 	call	0x8fe	; 0x8fe <DIO_voidSetPinDirection>
	/*Set Column pin as initially high*/
	DIO_voidSetPinValue(COLOUMN_PORT,COLOUMN1,PIN_HIGH);
 d60:	41 e0       	ldi	r20, 0x01	; 1
 d62:	67 e0       	ldi	r22, 0x07	; 7
 d64:	83 e0       	ldi	r24, 0x03	; 3
 d66:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(COLOUMN_PORT,COLOUMN2,PIN_HIGH);
 d6a:	41 e0       	ldi	r20, 0x01	; 1
 d6c:	66 e0       	ldi	r22, 0x06	; 6
 d6e:	83 e0       	ldi	r24, 0x03	; 3
 d70:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(COLOUMN_PORT,COLOUMN3,PIN_HIGH);
 d74:	41 e0       	ldi	r20, 0x01	; 1
 d76:	65 e0       	ldi	r22, 0x05	; 5
 d78:	83 e0       	ldi	r24, 0x03	; 3
 d7a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(COLOUMN_PORT,COLOUMN4,PIN_HIGH);
 d7e:	41 e0       	ldi	r20, 0x01	; 1
 d80:	63 e0       	ldi	r22, 0x03	; 3
 d82:	83 e0       	ldi	r24, 0x03	; 3
 d84:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	
	DIO_voidSetPinDirection(ROW_PORT,ROW1,PIN_INPUT);
 d88:	40 e0       	ldi	r20, 0x00	; 0
 d8a:	65 e0       	ldi	r22, 0x05	; 5
 d8c:	82 e0       	ldi	r24, 0x02	; 2
 d8e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ROW_PORT,ROW2,PIN_INPUT);
 d92:	40 e0       	ldi	r20, 0x00	; 0
 d94:	64 e0       	ldi	r22, 0x04	; 4
 d96:	82 e0       	ldi	r24, 0x02	; 2
 d98:	0e 94 7f 04 	call	0x8fe	; 0x8fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ROW_PORT,ROW3,PIN_INPUT);
 d9c:	40 e0       	ldi	r20, 0x00	; 0
 d9e:	63 e0       	ldi	r22, 0x03	; 3
 da0:	82 e0       	ldi	r24, 0x02	; 2
 da2:	0e 94 7f 04 	call	0x8fe	; 0x8fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ROW_PORT,ROW4,PIN_INPUT);
 da6:	40 e0       	ldi	r20, 0x00	; 0
 da8:	62 e0       	ldi	r22, 0x02	; 2
 daa:	82 e0       	ldi	r24, 0x02	; 2
 dac:	0e 94 7f 04 	call	0x8fe	; 0x8fe <DIO_voidSetPinDirection>
	/*Set Row pin as initially high*/
	DIO_voidSetPinValue(ROW_PORT,ROW1,PIN_HIGH);
 db0:	41 e0       	ldi	r20, 0x01	; 1
 db2:	65 e0       	ldi	r22, 0x05	; 5
 db4:	82 e0       	ldi	r24, 0x02	; 2
 db6:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ROW_PORT,ROW2,PIN_HIGH);
 dba:	41 e0       	ldi	r20, 0x01	; 1
 dbc:	64 e0       	ldi	r22, 0x04	; 4
 dbe:	82 e0       	ldi	r24, 0x02	; 2
 dc0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ROW_PORT,ROW3,PIN_HIGH);
 dc4:	41 e0       	ldi	r20, 0x01	; 1
 dc6:	63 e0       	ldi	r22, 0x03	; 3
 dc8:	82 e0       	ldi	r24, 0x02	; 2
 dca:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ROW_PORT,ROW4,PIN_HIGH);
 dce:	41 e0       	ldi	r20, 0x01	; 1
 dd0:	62 e0       	ldi	r22, 0x02	; 2
 dd2:	82 e0       	ldi	r24, 0x02	; 2
 dd4:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 dd8:	08 95       	ret

Disassembly of section .text.KPD_u8GetPressedKey:

00000c7e <KPD_u8GetPressedKey>:
}

u8 KPD_u8GetPressedKey()
{
 c7e:	cf 92       	push	r12
 c80:	df 92       	push	r13
 c82:	ef 92       	push	r14
 c84:	ff 92       	push	r15
 c86:	0f 93       	push	r16
 c88:	1f 93       	push	r17
 c8a:	cf 93       	push	r28
 c8c:	df 93       	push	r29
 c8e:	0f 92       	push	r0
 c90:	cd b7       	in	r28, 0x3d	; 61
 c92:	de b7       	in	r29, 0x3e	; 62

	static u8 KPD_Arr[ROW_NUM][COLOUMN_NUM] = KPD_ARR_VAL;
	static u8 Coloumn_Arr [COLOUMN_NUM] = {COLOUMN1,COLOUMN2,COLOUMN3,COLOUMN4};
	static u8 Row_Arr [ROW_NUM] = {ROW1,ROW2,ROW3,ROW4};
	
	for(u8 Coloumn_Idx=0 ; Coloumn_Idx<COLOUMN_NUM ; Coloumn_Idx++)
 c94:	00 e0       	ldi	r16, 0x00	; 0
 c96:	42 c0       	rjmp	.+132    	; 0xd1c <KPD_u8GetPressedKey+0x9e>
	{
		/*Activate Current Column*/
		DIO_voidSetPinValue(COLOUMN_PORT,Coloumn_Arr[Coloumn_Idx],PIN_LOW);
 c98:	c0 2e       	mov	r12, r16
 c9a:	d1 2c       	mov	r13, r1
 c9c:	f6 01       	movw	r30, r12
 c9e:	ec 58       	subi	r30, 0x8C	; 140
 ca0:	ff 4f       	sbci	r31, 0xFF	; 255
 ca2:	40 e0       	ldi	r20, 0x00	; 0
 ca4:	60 81       	ld	r22, Z
 ca6:	83 e0       	ldi	r24, 0x03	; 3
 ca8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
		for(u8 Row_Idx=0 ; Row_Idx<ROW_NUM ; Row_Idx++)
 cac:	10 e0       	ldi	r17, 0x00	; 0
 cae:	2b c0       	rjmp	.+86     	; 0xd06 <KPD_u8GetPressedKey+0x88>
		{
			/*Read Current Row*/
			DIO_u8GetPinValue(ROW_PORT,Row_Arr[Row_Idx],&Key_Status);
 cb0:	e1 2e       	mov	r14, r17
 cb2:	f1 2c       	mov	r15, r1
 cb4:	f7 01       	movw	r30, r14
 cb6:	e0 59       	subi	r30, 0x90	; 144
 cb8:	ff 4f       	sbci	r31, 0xFF	; 255
 cba:	ae 01       	movw	r20, r28
 cbc:	4f 5f       	subi	r20, 0xFF	; 255
 cbe:	5f 4f       	sbci	r21, 0xFF	; 255
 cc0:	60 81       	ld	r22, Z
 cc2:	82 e0       	ldi	r24, 0x02	; 2
 cc4:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_u8GetPinValue>
			/*Check for status of the switch*/
			if(Key_Status==PIN_LOW)
 cc8:	89 81       	ldd	r24, Y+1	; 0x01
 cca:	81 11       	cpse	r24, r1
 ccc:	1b c0       	rjmp	.+54     	; 0xd04 <KPD_u8GetPressedKey+0x86>
			{
				Pressed_Key = KPD_Arr[Row_Idx][Coloumn_Idx];
 cce:	c7 01       	movw	r24, r14
 cd0:	88 0f       	add	r24, r24
 cd2:	99 1f       	adc	r25, r25
 cd4:	88 0f       	add	r24, r24
 cd6:	99 1f       	adc	r25, r25
 cd8:	80 5a       	subi	r24, 0xA0	; 160
 cda:	9f 4f       	sbci	r25, 0xFF	; 255
 cdc:	fc 01       	movw	r30, r24
 cde:	ec 0d       	add	r30, r12
 ce0:	fd 1d       	adc	r31, r13
 ce2:	10 81       	ld	r17, Z
				/*Polling for the Switch until released*/
				while(Key_Status==PIN_LOW)
 ce4:	0a c0       	rjmp	.+20     	; 0xcfa <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(ROW_PORT,Row_Arr[Row_Idx],&Key_Status);
 ce6:	ae 01       	movw	r20, r28
 ce8:	4f 5f       	subi	r20, 0xFF	; 255
 cea:	5f 4f       	sbci	r21, 0xFF	; 255
 cec:	f7 01       	movw	r30, r14
 cee:	e0 59       	subi	r30, 0x90	; 144
 cf0:	ff 4f       	sbci	r31, 0xFF	; 255
 cf2:	60 81       	ld	r22, Z
 cf4:	82 e0       	ldi	r24, 0x02	; 2
 cf6:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_u8GetPinValue>
			/*Check for status of the switch*/
			if(Key_Status==PIN_LOW)
			{
				Pressed_Key = KPD_Arr[Row_Idx][Coloumn_Idx];
				/*Polling for the Switch until released*/
				while(Key_Status==PIN_LOW)
 cfa:	99 81       	ldd	r25, Y+1	; 0x01
 cfc:	99 23       	and	r25, r25
 cfe:	99 f3       	breq	.-26     	; 0xce6 <KPD_u8GetPressedKey+0x68>
				{
					DIO_u8GetPinValue(ROW_PORT,Row_Arr[Row_Idx],&Key_Status);
				}
				return Pressed_Key;
 d00:	81 2f       	mov	r24, r17
 d02:	10 c0       	rjmp	.+32     	; 0xd24 <KPD_u8GetPressedKey+0xa6>
	
	for(u8 Coloumn_Idx=0 ; Coloumn_Idx<COLOUMN_NUM ; Coloumn_Idx++)
	{
		/*Activate Current Column*/
		DIO_voidSetPinValue(COLOUMN_PORT,Coloumn_Arr[Coloumn_Idx],PIN_LOW);
		for(u8 Row_Idx=0 ; Row_Idx<ROW_NUM ; Row_Idx++)
 d04:	1f 5f       	subi	r17, 0xFF	; 255
 d06:	14 30       	cpi	r17, 0x04	; 4
 d08:	98 f2       	brcs	.-90     	; 0xcb0 <KPD_u8GetPressedKey+0x32>
				}
				return Pressed_Key;
			}
		}
		/*Deactivate Current Column*/
		DIO_voidSetPinValue(COLOUMN_PORT,Coloumn_Arr[Coloumn_Idx],PIN_HIGH);
 d0a:	f6 01       	movw	r30, r12
 d0c:	ec 58       	subi	r30, 0x8C	; 140
 d0e:	ff 4f       	sbci	r31, 0xFF	; 255
 d10:	41 e0       	ldi	r20, 0x01	; 1
 d12:	60 81       	ld	r22, Z
 d14:	83 e0       	ldi	r24, 0x03	; 3
 d16:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>

	static u8 KPD_Arr[ROW_NUM][COLOUMN_NUM] = KPD_ARR_VAL;
	static u8 Coloumn_Arr [COLOUMN_NUM] = {COLOUMN1,COLOUMN2,COLOUMN3,COLOUMN4};
	static u8 Row_Arr [ROW_NUM] = {ROW1,ROW2,ROW3,ROW4};
	
	for(u8 Coloumn_Idx=0 ; Coloumn_Idx<COLOUMN_NUM ; Coloumn_Idx++)
 d1a:	0f 5f       	subi	r16, 0xFF	; 255
 d1c:	04 30       	cpi	r16, 0x04	; 4
 d1e:	08 f4       	brcc	.+2      	; 0xd22 <KPD_u8GetPressedKey+0xa4>
 d20:	bb cf       	rjmp	.-138    	; 0xc98 <KPD_u8GetPressedKey+0x1a>
			}
		}
		/*Deactivate Current Column*/
		DIO_voidSetPinValue(COLOUMN_PORT,Coloumn_Arr[Coloumn_Idx],PIN_HIGH);
	}
	return Pressed_Key;
 d22:	8f ef       	ldi	r24, 0xFF	; 255
 d24:	0f 90       	pop	r0
 d26:	df 91       	pop	r29
 d28:	cf 91       	pop	r28
 d2a:	1f 91       	pop	r17
 d2c:	0f 91       	pop	r16
 d2e:	ff 90       	pop	r15
 d30:	ef 90       	pop	r14
 d32:	df 90       	pop	r13
 d34:	cf 90       	pop	r12
 d36:	08 95       	ret

Disassembly of section .text.LCD_voidSendCommand:

00000aca <LCD_voidSendCommand>:
#include "LCD_private.h"
#include "LCD_register.h"
#include <util/delay.h>

void LCD_voidSendCommand(u8 Command)
{
 aca:	cf 93       	push	r28
 acc:	c8 2f       	mov	r28, r24
	/*Set RS pin to low for command*/
	DIO_voidSetPinValue(CTRL_PORT,RS,PIN_LOW);
 ace:	40 e0       	ldi	r20, 0x00	; 0
 ad0:	63 e0       	ldi	r22, 0x03	; 3
 ad2:	80 e0       	ldi	r24, 0x00	; 0
 ad4:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	
	/*Send Command to data pins*/
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Command,4));
 ad8:	c4 fb       	bst	r28, 4
 ada:	44 27       	eor	r20, r20
 adc:	40 f9       	bld	r20, 0
 ade:	60 e0       	ldi	r22, 0x00	; 0
 ae0:	81 e0       	ldi	r24, 0x01	; 1
 ae2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Command,5));
 ae6:	c5 fb       	bst	r28, 5
 ae8:	44 27       	eor	r20, r20
 aea:	40 f9       	bld	r20, 0
 aec:	61 e0       	ldi	r22, 0x01	; 1
 aee:	81 e0       	ldi	r24, 0x01	; 1
 af0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Command,6));
 af4:	c6 fb       	bst	r28, 6
 af6:	44 27       	eor	r20, r20
 af8:	40 f9       	bld	r20, 0
 afa:	62 e0       	ldi	r22, 0x02	; 2
 afc:	81 e0       	ldi	r24, 0x01	; 1
 afe:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,GET_BIT(Command,7));
 b02:	4c 2f       	mov	r20, r28
 b04:	44 1f       	adc	r20, r20
 b06:	44 27       	eor	r20, r20
 b08:	44 1f       	adc	r20, r20
 b0a:	64 e0       	ldi	r22, 0x04	; 4
 b0c:	81 e0       	ldi	r24, 0x01	; 1
 b0e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	
	/*Enable Trigger Pulses*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 b12:	41 e0       	ldi	r20, 0x01	; 1
 b14:	62 e0       	ldi	r22, 0x02	; 2
 b16:	80 e0       	ldi	r24, 0x00	; 0
 b18:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b1c:	89 ef       	ldi	r24, 0xF9	; 249
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	01 97       	sbiw	r24, 0x01	; 1
 b22:	f1 f7       	brne	.-4      	; 0xb20 <LCD_voidSendCommand+0x56>
 b24:	00 c0       	rjmp	.+0      	; 0xb26 <LCD_voidSendCommand+0x5c>
 b26:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 b28:	40 e0       	ldi	r20, 0x00	; 0
 b2a:	62 e0       	ldi	r22, 0x02	; 2
 b2c:	80 e0       	ldi	r24, 0x00	; 0
 b2e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 b32:	89 ef       	ldi	r24, 0xF9	; 249
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	01 97       	sbiw	r24, 0x01	; 1
 b38:	f1 f7       	brne	.-4      	; 0xb36 <LCD_voidSendCommand+0x6c>
 b3a:	00 c0       	rjmp	.+0      	; 0xb3c <LCD_voidSendCommand+0x72>
 b3c:	00 00       	nop
	_delay_ms(1);
	
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Command,0));
 b3e:	4c 2f       	mov	r20, r28
 b40:	41 70       	andi	r20, 0x01	; 1
 b42:	60 e0       	ldi	r22, 0x00	; 0
 b44:	81 e0       	ldi	r24, 0x01	; 1
 b46:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Command,1));
 b4a:	c1 fb       	bst	r28, 1
 b4c:	44 27       	eor	r20, r20
 b4e:	40 f9       	bld	r20, 0
 b50:	61 e0       	ldi	r22, 0x01	; 1
 b52:	81 e0       	ldi	r24, 0x01	; 1
 b54:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Command,2));
 b58:	c2 fb       	bst	r28, 2
 b5a:	44 27       	eor	r20, r20
 b5c:	40 f9       	bld	r20, 0
 b5e:	62 e0       	ldi	r22, 0x02	; 2
 b60:	81 e0       	ldi	r24, 0x01	; 1
 b62:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,GET_BIT(Command,3));
 b66:	c3 fb       	bst	r28, 3
 b68:	44 27       	eor	r20, r20
 b6a:	40 f9       	bld	r20, 0
 b6c:	64 e0       	ldi	r22, 0x04	; 4
 b6e:	81 e0       	ldi	r24, 0x01	; 1
 b70:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	
	/*Enable Trigger Pulses*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 b74:	41 e0       	ldi	r20, 0x01	; 1
 b76:	62 e0       	ldi	r22, 0x02	; 2
 b78:	80 e0       	ldi	r24, 0x00	; 0
 b7a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 b7e:	89 ef       	ldi	r24, 0xF9	; 249
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	01 97       	sbiw	r24, 0x01	; 1
 b84:	f1 f7       	brne	.-4      	; 0xb82 <LCD_voidSendCommand+0xb8>
 b86:	00 c0       	rjmp	.+0      	; 0xb88 <LCD_voidSendCommand+0xbe>
 b88:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 b8a:	40 e0       	ldi	r20, 0x00	; 0
 b8c:	62 e0       	ldi	r22, 0x02	; 2
 b8e:	80 e0       	ldi	r24, 0x00	; 0
 b90:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 b94:	83 ef       	ldi	r24, 0xF3	; 243
 b96:	91 e0       	ldi	r25, 0x01	; 1
 b98:	01 97       	sbiw	r24, 0x01	; 1
 b9a:	f1 f7       	brne	.-4      	; 0xb98 <LCD_voidSendCommand+0xce>
 b9c:	00 c0       	rjmp	.+0      	; 0xb9e <LCD_voidSendCommand+0xd4>
 b9e:	00 00       	nop
	_delay_ms(2);
}
 ba0:	cf 91       	pop	r28
 ba2:	08 95       	ret

Disassembly of section .text.LCD_voidInit:

000004d8 <LCD_voidInit>:
 4d8:	85 e4       	ldi	r24, 0x45	; 69
 4da:	9e e1       	ldi	r25, 0x1E	; 30
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <LCD_voidInit+0x4>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <LCD_voidInit+0xa>
 4e2:	00 00       	nop

void LCD_voidInit()
{
	_delay_ms(31);
	DIO_voidSetPinDirection(CTRL_PORT,RS,PIN_OUTPUT);
 4e4:	41 e0       	ldi	r20, 0x01	; 1
 4e6:	63 e0       	ldi	r22, 0x03	; 3
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	0e 94 7f 04 	call	0x8fe	; 0x8fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CTRL_PORT,EN,PIN_OUTPUT);
 4ee:	41 e0       	ldi	r20, 0x01	; 1
 4f0:	62 e0       	ldi	r22, 0x02	; 2
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	0e 94 7f 04 	call	0x8fe	; 0x8fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DATA_PORT,D4,PIN_OUTPUT);
 4f8:	41 e0       	ldi	r20, 0x01	; 1
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	0e 94 7f 04 	call	0x8fe	; 0x8fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DATA_PORT,D5,PIN_OUTPUT);
 502:	41 e0       	ldi	r20, 0x01	; 1
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 7f 04 	call	0x8fe	; 0x8fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DATA_PORT,D6,PIN_OUTPUT);
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	62 e0       	ldi	r22, 0x02	; 2
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	0e 94 7f 04 	call	0x8fe	; 0x8fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DATA_PORT,D7,PIN_OUTPUT);
 516:	41 e0       	ldi	r20, 0x01	; 1
 518:	64 e0       	ldi	r22, 0x04	; 4
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	0e 94 7f 04 	call	0x8fe	; 0x8fe <DIO_voidSetPinDirection>
	
	/*1/Function Set*/
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_LOW);
 520:	40 e0       	ldi	r20, 0x00	; 0
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_HIGH);
 52a:	41 e0       	ldi	r20, 0x01	; 1
 52c:	61 e0       	ldi	r22, 0x01	; 1
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);
 534:	40 e0       	ldi	r20, 0x00	; 0
 536:	62 e0       	ldi	r22, 0x02	; 2
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 53e:	40 e0       	ldi	r20, 0x00	; 0
 540:	64 e0       	ldi	r22, 0x04	; 4
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 548:	41 e0       	ldi	r20, 0x01	; 1
 54a:	62 e0       	ldi	r22, 0x02	; 2
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 552:	83 ef       	ldi	r24, 0xF3	; 243
 554:	91 e0       	ldi	r25, 0x01	; 1
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	f1 f7       	brne	.-4      	; 0x556 <LCD_voidInit+0x7e>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <LCD_voidInit+0x84>
 55c:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 55e:	40 e0       	ldi	r20, 0x00	; 0
 560:	62 e0       	ldi	r22, 0x02	; 2
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 568:	83 ef       	ldi	r24, 0xF3	; 243
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	01 97       	sbiw	r24, 0x01	; 1
 56e:	f1 f7       	brne	.-4      	; 0x56c <LCD_voidInit+0x94>
 570:	00 c0       	rjmp	.+0      	; 0x572 <LCD_voidInit+0x9a>
 572:	00 00       	nop
	_delay_ms(2);
	
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_LOW);
 574:	40 e0       	ldi	r20, 0x00	; 0
 576:	60 e0       	ldi	r22, 0x00	; 0
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_HIGH);
 57e:	41 e0       	ldi	r20, 0x01	; 1
 580:	61 e0       	ldi	r22, 0x01	; 1
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);
 588:	40 e0       	ldi	r20, 0x00	; 0
 58a:	62 e0       	ldi	r22, 0x02	; 2
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 592:	40 e0       	ldi	r20, 0x00	; 0
 594:	64 e0       	ldi	r22, 0x04	; 4
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 59c:	41 e0       	ldi	r20, 0x01	; 1
 59e:	62 e0       	ldi	r22, 0x02	; 2
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 5a6:	83 ef       	ldi	r24, 0xF3	; 243
 5a8:	91 e0       	ldi	r25, 0x01	; 1
 5aa:	01 97       	sbiw	r24, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <LCD_voidInit+0xd2>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <LCD_voidInit+0xd8>
 5b0:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 5b2:	40 e0       	ldi	r20, 0x00	; 0
 5b4:	62 e0       	ldi	r22, 0x02	; 2
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 5bc:	83 ef       	ldi	r24, 0xF3	; 243
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <LCD_voidInit+0xe8>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <LCD_voidInit+0xee>
 5c6:	00 00       	nop
	_delay_ms(2);
	
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);// fONT 5*8
 5c8:	40 e0       	ldi	r20, 0x00	; 0
 5ca:	62 e0       	ldi	r22, 0x02	; 2
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_HIGH);// 2 lines
 5d2:	41 e0       	ldi	r20, 0x01	; 1
 5d4:	64 e0       	ldi	r22, 0x04	; 4
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,PIN2,PIN_HIGH);
 5dc:	41 e0       	ldi	r20, 0x01	; 1
 5de:	62 e0       	ldi	r22, 0x02	; 2
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 5e6:	83 ef       	ldi	r24, 0xF3	; 243
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	01 97       	sbiw	r24, 0x01	; 1
 5ec:	f1 f7       	brne	.-4      	; 0x5ea <LCD_voidInit+0x112>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <LCD_voidInit+0x118>
 5f0:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,PIN2,PIN_LOW);
 5f2:	40 e0       	ldi	r20, 0x00	; 0
 5f4:	62 e0       	ldi	r22, 0x02	; 2
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 5fc:	83 ef       	ldi	r24, 0xF3	; 243
 5fe:	91 e0       	ldi	r25, 0x01	; 1
 600:	01 97       	sbiw	r24, 0x01	; 1
 602:	f1 f7       	brne	.-4      	; 0x600 <LCD_voidInit+0x128>
 604:	00 c0       	rjmp	.+0      	; 0x606 <LCD_voidInit+0x12e>
 606:	00 00       	nop
	_delay_ms(2);
	
	/*2/Display on off control: display enable, disable cursor, no blink cursor*/
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_LOW);
 608:	40 e0       	ldi	r20, 0x00	; 0
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_LOW);
 612:	40 e0       	ldi	r20, 0x00	; 0
 614:	61 e0       	ldi	r22, 0x01	; 1
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	62 e0       	ldi	r22, 0x02	; 2
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 626:	40 e0       	ldi	r20, 0x00	; 0
 628:	64 e0       	ldi	r22, 0x04	; 4
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 630:	41 e0       	ldi	r20, 0x01	; 1
 632:	62 e0       	ldi	r22, 0x02	; 2
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 63a:	83 ef       	ldi	r24, 0xF3	; 243
 63c:	91 e0       	ldi	r25, 0x01	; 1
 63e:	01 97       	sbiw	r24, 0x01	; 1
 640:	f1 f7       	brne	.-4      	; 0x63e <LCD_voidInit+0x166>
 642:	00 c0       	rjmp	.+0      	; 0x644 <LCD_voidInit+0x16c>
 644:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 646:	40 e0       	ldi	r20, 0x00	; 0
 648:	62 e0       	ldi	r22, 0x02	; 2
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 650:	83 ef       	ldi	r24, 0xF3	; 243
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <LCD_voidInit+0x17c>
 658:	00 c0       	rjmp	.+0      	; 0x65a <LCD_voidInit+0x182>
 65a:	00 00       	nop
	_delay_ms(2);
	
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_LOW);
 65c:	40 e0       	ldi	r20, 0x00	; 0
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_LOW);
 666:	40 e0       	ldi	r20, 0x00	; 0
 668:	61 e0       	ldi	r22, 0x01	; 1
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_HIGH);
 670:	41 e0       	ldi	r20, 0x01	; 1
 672:	62 e0       	ldi	r22, 0x02	; 2
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_HIGH);
 67a:	41 e0       	ldi	r20, 0x01	; 1
 67c:	64 e0       	ldi	r22, 0x04	; 4
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 684:	41 e0       	ldi	r20, 0x01	; 1
 686:	62 e0       	ldi	r22, 0x02	; 2
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 68e:	83 ef       	ldi	r24, 0xF3	; 243
 690:	91 e0       	ldi	r25, 0x01	; 1
 692:	01 97       	sbiw	r24, 0x01	; 1
 694:	f1 f7       	brne	.-4      	; 0x692 <LCD_voidInit+0x1ba>
 696:	00 c0       	rjmp	.+0      	; 0x698 <LCD_voidInit+0x1c0>
 698:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 69a:	40 e0       	ldi	r20, 0x00	; 0
 69c:	62 e0       	ldi	r22, 0x02	; 2
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 6a4:	83 ef       	ldi	r24, 0xF3	; 243
 6a6:	91 e0       	ldi	r25, 0x01	; 1
 6a8:	01 97       	sbiw	r24, 0x01	; 1
 6aa:	f1 f7       	brne	.-4      	; 0x6a8 <LCD_voidInit+0x1d0>
 6ac:	00 c0       	rjmp	.+0      	; 0x6ae <LCD_voidInit+0x1d6>
 6ae:	00 00       	nop
	_delay_ms(2);
	
	/*3/Clear display*/
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_LOW);
 6b0:	40 e0       	ldi	r20, 0x00	; 0
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_LOW);
 6ba:	40 e0       	ldi	r20, 0x00	; 0
 6bc:	61 e0       	ldi	r22, 0x01	; 1
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);
 6c4:	40 e0       	ldi	r20, 0x00	; 0
 6c6:	62 e0       	ldi	r22, 0x02	; 2
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 6ce:	40 e0       	ldi	r20, 0x00	; 0
 6d0:	64 e0       	ldi	r22, 0x04	; 4
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 6d8:	41 e0       	ldi	r20, 0x01	; 1
 6da:	62 e0       	ldi	r22, 0x02	; 2
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 6e2:	83 ef       	ldi	r24, 0xF3	; 243
 6e4:	91 e0       	ldi	r25, 0x01	; 1
 6e6:	01 97       	sbiw	r24, 0x01	; 1
 6e8:	f1 f7       	brne	.-4      	; 0x6e6 <LCD_voidInit+0x20e>
 6ea:	00 c0       	rjmp	.+0      	; 0x6ec <LCD_voidInit+0x214>
 6ec:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 6ee:	40 e0       	ldi	r20, 0x00	; 0
 6f0:	62 e0       	ldi	r22, 0x02	; 2
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 6f8:	83 ef       	ldi	r24, 0xF3	; 243
 6fa:	91 e0       	ldi	r25, 0x01	; 1
 6fc:	01 97       	sbiw	r24, 0x01	; 1
 6fe:	f1 f7       	brne	.-4      	; 0x6fc <LCD_voidInit+0x224>
 700:	00 c0       	rjmp	.+0      	; 0x702 <LCD_voidInit+0x22a>
 702:	00 00       	nop
	_delay_ms(2);
	
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_HIGH);
 704:	41 e0       	ldi	r20, 0x01	; 1
 706:	60 e0       	ldi	r22, 0x00	; 0
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_LOW);
 70e:	40 e0       	ldi	r20, 0x00	; 0
 710:	61 e0       	ldi	r22, 0x01	; 1
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);
 718:	40 e0       	ldi	r20, 0x00	; 0
 71a:	62 e0       	ldi	r22, 0x02	; 2
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 722:	40 e0       	ldi	r20, 0x00	; 0
 724:	64 e0       	ldi	r22, 0x04	; 4
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 72c:	41 e0       	ldi	r20, 0x01	; 1
 72e:	62 e0       	ldi	r22, 0x02	; 2
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 736:	83 ef       	ldi	r24, 0xF3	; 243
 738:	91 e0       	ldi	r25, 0x01	; 1
 73a:	01 97       	sbiw	r24, 0x01	; 1
 73c:	f1 f7       	brne	.-4      	; 0x73a <LCD_voidInit+0x262>
 73e:	00 c0       	rjmp	.+0      	; 0x740 <LCD_voidInit+0x268>
 740:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 742:	40 e0       	ldi	r20, 0x00	; 0
 744:	62 e0       	ldi	r22, 0x02	; 2
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 74c:	83 ef       	ldi	r24, 0xF3	; 243
 74e:	91 e0       	ldi	r25, 0x01	; 1
 750:	01 97       	sbiw	r24, 0x01	; 1
 752:	f1 f7       	brne	.-4      	; 0x750 <LCD_voidInit+0x278>
 754:	00 c0       	rjmp	.+0      	; 0x756 <LCD_voidInit+0x27e>
 756:	00 00       	nop
	_delay_ms(2);

	/*4/Entry Mode*/
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_LOW);
 758:	40 e0       	ldi	r20, 0x00	; 0
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_LOW);
 762:	40 e0       	ldi	r20, 0x00	; 0
 764:	61 e0       	ldi	r22, 0x01	; 1
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_LOW);
 76c:	40 e0       	ldi	r20, 0x00	; 0
 76e:	62 e0       	ldi	r22, 0x02	; 2
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 776:	40 e0       	ldi	r20, 0x00	; 0
 778:	64 e0       	ldi	r22, 0x04	; 4
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 780:	41 e0       	ldi	r20, 0x01	; 1
 782:	62 e0       	ldi	r22, 0x02	; 2
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 78a:	83 ef       	ldi	r24, 0xF3	; 243
 78c:	91 e0       	ldi	r25, 0x01	; 1
 78e:	01 97       	sbiw	r24, 0x01	; 1
 790:	f1 f7       	brne	.-4      	; 0x78e <LCD_voidInit+0x2b6>
 792:	00 c0       	rjmp	.+0      	; 0x794 <LCD_voidInit+0x2bc>
 794:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 796:	40 e0       	ldi	r20, 0x00	; 0
 798:	62 e0       	ldi	r22, 0x02	; 2
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 7a0:	83 ef       	ldi	r24, 0xF3	; 243
 7a2:	91 e0       	ldi	r25, 0x01	; 1
 7a4:	01 97       	sbiw	r24, 0x01	; 1
 7a6:	f1 f7       	brne	.-4      	; 0x7a4 <LCD_voidInit+0x2cc>
 7a8:	00 c0       	rjmp	.+0      	; 0x7aa <LCD_voidInit+0x2d2>
 7aa:	00 00       	nop
	_delay_ms(2);
	
	DIO_voidSetPinValue(DATA_PORT,D4,PIN_HIGH);
 7ac:	41 e0       	ldi	r20, 0x01	; 1
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,PIN_HIGH);
 7b6:	41 e0       	ldi	r20, 0x01	; 1
 7b8:	61 e0       	ldi	r22, 0x01	; 1
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,PIN_HIGH);
 7c0:	41 e0       	ldi	r20, 0x01	; 1
 7c2:	62 e0       	ldi	r22, 0x02	; 2
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_LOW);
 7ca:	40 e0       	ldi	r20, 0x00	; 0
 7cc:	64 e0       	ldi	r22, 0x04	; 4
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 7d4:	41 e0       	ldi	r20, 0x01	; 1
 7d6:	62 e0       	ldi	r22, 0x02	; 2
 7d8:	80 e0       	ldi	r24, 0x00	; 0
 7da:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 7de:	83 ef       	ldi	r24, 0xF3	; 243
 7e0:	91 e0       	ldi	r25, 0x01	; 1
 7e2:	01 97       	sbiw	r24, 0x01	; 1
 7e4:	f1 f7       	brne	.-4      	; 0x7e2 <LCD_voidInit+0x30a>
 7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <LCD_voidInit+0x310>
 7e8:	00 00       	nop
	_delay_ms(2);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 7ea:	40 e0       	ldi	r20, 0x00	; 0
 7ec:	62 e0       	ldi	r22, 0x02	; 2
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 7f4:	83 ef       	ldi	r24, 0xF3	; 243
 7f6:	91 e0       	ldi	r25, 0x01	; 1
 7f8:	01 97       	sbiw	r24, 0x01	; 1
 7fa:	f1 f7       	brne	.-4      	; 0x7f8 <LCD_voidInit+0x320>
 7fc:	00 c0       	rjmp	.+0      	; 0x7fe <LCD_voidInit+0x326>
 7fe:	00 00       	nop
 800:	08 95       	ret

Disassembly of section .text.LCD_voidSendData:

00000ba4 <LCD_voidSendData>:
	_delay_ms(2);
}

void LCD_voidSendData(u8 Data)
{
 ba4:	cf 93       	push	r28
 ba6:	c8 2f       	mov	r28, r24
	/*Set RS pin to high for Data*/
	DIO_voidSetPinValue(CTRL_PORT,RS,PIN_HIGH);
 ba8:	41 e0       	ldi	r20, 0x01	; 1
 baa:	63 e0       	ldi	r22, 0x03	; 3
 bac:	80 e0       	ldi	r24, 0x00	; 0
 bae:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	
	/*Send Data*/
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Data,4));
 bb2:	c4 fb       	bst	r28, 4
 bb4:	44 27       	eor	r20, r20
 bb6:	40 f9       	bld	r20, 0
 bb8:	60 e0       	ldi	r22, 0x00	; 0
 bba:	81 e0       	ldi	r24, 0x01	; 1
 bbc:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Data,5));
 bc0:	c5 fb       	bst	r28, 5
 bc2:	44 27       	eor	r20, r20
 bc4:	40 f9       	bld	r20, 0
 bc6:	61 e0       	ldi	r22, 0x01	; 1
 bc8:	81 e0       	ldi	r24, 0x01	; 1
 bca:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Data,6));
 bce:	c6 fb       	bst	r28, 6
 bd0:	44 27       	eor	r20, r20
 bd2:	40 f9       	bld	r20, 0
 bd4:	62 e0       	ldi	r22, 0x02	; 2
 bd6:	81 e0       	ldi	r24, 0x01	; 1
 bd8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,GET_BIT(Data,7));
 bdc:	4c 2f       	mov	r20, r28
 bde:	44 1f       	adc	r20, r20
 be0:	44 27       	eor	r20, r20
 be2:	44 1f       	adc	r20, r20
 be4:	64 e0       	ldi	r22, 0x04	; 4
 be6:	81 e0       	ldi	r24, 0x01	; 1
 be8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 bec:	41 e0       	ldi	r20, 0x01	; 1
 bee:	62 e0       	ldi	r22, 0x02	; 2
 bf0:	80 e0       	ldi	r24, 0x00	; 0
 bf2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 bf6:	89 ef       	ldi	r24, 0xF9	; 249
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	01 97       	sbiw	r24, 0x01	; 1
 bfc:	f1 f7       	brne	.-4      	; 0xbfa <LCD_voidSendData+0x56>
 bfe:	00 c0       	rjmp	.+0      	; 0xc00 <LCD_voidSendData+0x5c>
 c00:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 c02:	40 e0       	ldi	r20, 0x00	; 0
 c04:	62 e0       	ldi	r22, 0x02	; 2
 c06:	80 e0       	ldi	r24, 0x00	; 0
 c08:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 c0c:	89 ef       	ldi	r24, 0xF9	; 249
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	01 97       	sbiw	r24, 0x01	; 1
 c12:	f1 f7       	brne	.-4      	; 0xc10 <LCD_voidSendData+0x6c>
 c14:	00 c0       	rjmp	.+0      	; 0xc16 <LCD_voidSendData+0x72>
 c16:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Data,0));
 c18:	4c 2f       	mov	r20, r28
 c1a:	41 70       	andi	r20, 0x01	; 1
 c1c:	60 e0       	ldi	r22, 0x00	; 0
 c1e:	81 e0       	ldi	r24, 0x01	; 1
 c20:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Data,1));
 c24:	c1 fb       	bst	r28, 1
 c26:	44 27       	eor	r20, r20
 c28:	40 f9       	bld	r20, 0
 c2a:	61 e0       	ldi	r22, 0x01	; 1
 c2c:	81 e0       	ldi	r24, 0x01	; 1
 c2e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Data,2));
 c32:	c2 fb       	bst	r28, 2
 c34:	44 27       	eor	r20, r20
 c36:	40 f9       	bld	r20, 0
 c38:	62 e0       	ldi	r22, 0x02	; 2
 c3a:	81 e0       	ldi	r24, 0x01	; 1
 c3c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,GET_BIT(Data,3));
 c40:	c3 fb       	bst	r28, 3
 c42:	44 27       	eor	r20, r20
 c44:	40 f9       	bld	r20, 0
 c46:	64 e0       	ldi	r22, 0x04	; 4
 c48:	81 e0       	ldi	r24, 0x01	; 1
 c4a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 c4e:	41 e0       	ldi	r20, 0x01	; 1
 c50:	62 e0       	ldi	r22, 0x02	; 2
 c52:	80 e0       	ldi	r24, 0x00	; 0
 c54:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 c58:	89 ef       	ldi	r24, 0xF9	; 249
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	01 97       	sbiw	r24, 0x01	; 1
 c5e:	f1 f7       	brne	.-4      	; 0xc5c <LCD_voidSendData+0xb8>
 c60:	00 c0       	rjmp	.+0      	; 0xc62 <LCD_voidSendData+0xbe>
 c62:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 c64:	40 e0       	ldi	r20, 0x00	; 0
 c66:	62 e0       	ldi	r22, 0x02	; 2
 c68:	80 e0       	ldi	r24, 0x00	; 0
 c6a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 c6e:	89 ef       	ldi	r24, 0xF9	; 249
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	01 97       	sbiw	r24, 0x01	; 1
 c74:	f1 f7       	brne	.-4      	; 0xc72 <LCD_voidSendData+0xce>
 c76:	00 c0       	rjmp	.+0      	; 0xc78 <LCD_voidSendData+0xd4>
 c78:	00 00       	nop
	_delay_ms(1);
}
 c7a:	cf 91       	pop	r28
 c7c:	08 95       	ret

Disassembly of section .text.LCD_voidSendString:

00000edc <LCD_voidSendString>:

void LCD_voidSendString(const char *String)
{
 edc:	cf 92       	push	r12
 ede:	df 92       	push	r13
 ee0:	ef 92       	push	r14
 ee2:	cf 93       	push	r28
 ee4:	6b 01       	movw	r12, r22
 ee6:	e8 2e       	mov	r14, r24
	u8 Counter=0;
 ee8:	c0 e0       	ldi	r28, 0x00	; 0
	while(String[Counter]!='\0')
 eea:	03 c0       	rjmp	.+6      	; 0xef2 <LCD_voidSendString+0x16>
	{
		LCD_voidSendData(String[Counter]);
 eec:	0e 94 d2 05 	call	0xba4	; 0xba4 <LCD_voidSendData>
		Counter++;
 ef0:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_voidSendString(const char *String)
{
	u8 Counter=0;
	while(String[Counter]!='\0')
 ef2:	ae 2d       	mov	r26, r14
 ef4:	c6 01       	movw	r24, r12
 ef6:	8c 0f       	add	r24, r28
 ef8:	91 1d       	adc	r25, r1
 efa:	a1 1d       	adc	r26, r1
 efc:	fc 01       	movw	r30, r24
 efe:	84 91       	lpm	r24, Z
 f00:	a7 fd       	sbrc	r26, 7
 f02:	80 81       	ld	r24, Z
 f04:	81 11       	cpse	r24, r1
 f06:	f2 cf       	rjmp	.-28     	; 0xeec <LCD_voidSendString+0x10>
	{
		LCD_voidSendData(String[Counter]);
		Counter++;
	}
}
 f08:	cf 91       	pop	r28
 f0a:	ef 90       	pop	r14
 f0c:	df 90       	pop	r13
 f0e:	cf 90       	pop	r12
 f10:	08 95       	ret

Disassembly of section .text.LCD_voidGoToXY:

00000802 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 X_Pos, u8 Y_Pos)
{
 802:	cf 93       	push	r28
	u8 Address=0;
	/*Location at First line*/
	if(X_Pos==0)
 804:	81 11       	cpse	r24, r1
 806:	03 c0       	rjmp	.+6      	; 0x80e <LCD_voidGoToXY+0xc>
	{
		Address = Y_Pos + 0x80;
 808:	c0 e8       	ldi	r28, 0x80	; 128
 80a:	c6 0f       	add	r28, r22
 80c:	10 c0       	rjmp	.+32     	; 0x82e <LCD_voidGoToXY+0x2c>
	}
	/*Location at Second line*/
	else if(X_Pos==1)
 80e:	81 30       	cpi	r24, 0x01	; 1
 810:	19 f4       	brne	.+6      	; 0x818 <LCD_voidGoToXY+0x16>
	{
		Address = Y_Pos + 0xC0;
 812:	c0 ec       	ldi	r28, 0xC0	; 192
 814:	c6 0f       	add	r28, r22
 816:	0b c0       	rjmp	.+22     	; 0x82e <LCD_voidGoToXY+0x2c>
	}
	/*Location at third line*/
	else if(X_Pos==2)
 818:	82 30       	cpi	r24, 0x02	; 2
 81a:	19 f4       	brne	.+6      	; 0x822 <LCD_voidGoToXY+0x20>
	{
		Address = Y_Pos + 0x94;
 81c:	c4 e9       	ldi	r28, 0x94	; 148
 81e:	c6 0f       	add	r28, r22
 820:	06 c0       	rjmp	.+12     	; 0x82e <LCD_voidGoToXY+0x2c>
	}
	/*Location at fourth line*/
	else if(X_Pos==3)
 822:	83 30       	cpi	r24, 0x03	; 3
 824:	19 f4       	brne	.+6      	; 0x82c <LCD_voidGoToXY+0x2a>
	{
		Address = Y_Pos + 0xd4;
 826:	c4 ed       	ldi	r28, 0xD4	; 212
 828:	c6 0f       	add	r28, r22
 82a:	01 c0       	rjmp	.+2      	; 0x82e <LCD_voidGoToXY+0x2c>
	}
}

void LCD_voidGoToXY(u8 X_Pos, u8 Y_Pos)
{
	u8 Address=0;
 82c:	c0 e0       	ldi	r28, 0x00	; 0
	}
	
	///Set DDRAM Address Command////
	
	/*Set RS pin to low for command*/
	DIO_voidSetPinValue(CTRL_PORT,RS,PIN_LOW);
 82e:	40 e0       	ldi	r20, 0x00	; 0
 830:	63 e0       	ldi	r22, 0x03	; 3
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	
	/*Send Address to Data pins*/
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Address,4));
 838:	c4 fb       	bst	r28, 4
 83a:	44 27       	eor	r20, r20
 83c:	40 f9       	bld	r20, 0
 83e:	60 e0       	ldi	r22, 0x00	; 0
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Address,5));
 846:	c5 fb       	bst	r28, 5
 848:	44 27       	eor	r20, r20
 84a:	40 f9       	bld	r20, 0
 84c:	61 e0       	ldi	r22, 0x01	; 1
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Address,6));
 854:	c6 fb       	bst	r28, 6
 856:	44 27       	eor	r20, r20
 858:	40 f9       	bld	r20, 0
 85a:	62 e0       	ldi	r22, 0x02	; 2
 85c:	81 e0       	ldi	r24, 0x01	; 1
 85e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	/*Set D7 high*/
	DIO_voidSetPinValue(DATA_PORT,D7,PIN_HIGH);
 862:	41 e0       	ldi	r20, 0x01	; 1
 864:	64 e0       	ldi	r22, 0x04	; 4
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	
	/*Enable Trigger high then after 2ms low*/
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 86c:	41 e0       	ldi	r20, 0x01	; 1
 86e:	62 e0       	ldi	r22, 0x02	; 2
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 876:	89 ef       	ldi	r24, 0xF9	; 249
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	01 97       	sbiw	r24, 0x01	; 1
 87c:	f1 f7       	brne	.-4      	; 0x87a <__stack+0x1b>
 87e:	00 c0       	rjmp	.+0      	; 0x880 <__stack+0x21>
 880:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 882:	40 e0       	ldi	r20, 0x00	; 0
 884:	62 e0       	ldi	r22, 0x02	; 2
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 88c:	89 ef       	ldi	r24, 0xF9	; 249
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	01 97       	sbiw	r24, 0x01	; 1
 892:	f1 f7       	brne	.-4      	; 0x890 <__stack+0x31>
 894:	00 c0       	rjmp	.+0      	; 0x896 <__stack+0x37>
 896:	00 00       	nop
	_delay_ms(1);
	
	DIO_voidSetPinValue(DATA_PORT,D4,GET_BIT(Address,0));
 898:	4c 2f       	mov	r20, r28
 89a:	41 70       	andi	r20, 0x01	; 1
 89c:	60 e0       	ldi	r22, 0x00	; 0
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D5,GET_BIT(Address,1));
 8a4:	c1 fb       	bst	r28, 1
 8a6:	44 27       	eor	r20, r20
 8a8:	40 f9       	bld	r20, 0
 8aa:	61 e0       	ldi	r22, 0x01	; 1
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D6,GET_BIT(Address,2));
 8b2:	c2 fb       	bst	r28, 2
 8b4:	44 27       	eor	r20, r20
 8b6:	40 f9       	bld	r20, 0
 8b8:	62 e0       	ldi	r22, 0x02	; 2
 8ba:	81 e0       	ldi	r24, 0x01	; 1
 8bc:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DATA_PORT,D7,GET_BIT(Address,3));
 8c0:	c3 fb       	bst	r28, 3
 8c2:	44 27       	eor	r20, r20
 8c4:	40 f9       	bld	r20, 0
 8c6:	64 e0       	ldi	r22, 0x04	; 4
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
 8ce:	41 e0       	ldi	r20, 0x01	; 1
 8d0:	62 e0       	ldi	r22, 0x02	; 2
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 8d8:	89 ef       	ldi	r24, 0xF9	; 249
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	01 97       	sbiw	r24, 0x01	; 1
 8de:	f1 f7       	brne	.-4      	; 0x8dc <__stack+0x7d>
 8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <__stack+0x83>
 8e2:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
 8e4:	40 e0       	ldi	r20, 0x00	; 0
 8e6:	62 e0       	ldi	r22, 0x02	; 2
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <DIO_voidSetPinValue>
 8ee:	89 ef       	ldi	r24, 0xF9	; 249
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	01 97       	sbiw	r24, 0x01	; 1
 8f4:	f1 f7       	brne	.-4      	; 0x8f2 <__stack+0x93>
 8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <__stack+0x99>
 8f8:	00 00       	nop
	_delay_ms(1);
}
 8fa:	cf 91       	pop	r28
 8fc:	08 95       	ret

Disassembly of section .text.LCD_voidWriteNumber:

00000e60 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u8 Number)
{
 e60:	1f 93       	push	r17
 e62:	cf 93       	push	r28
 e64:	df 93       	push	r29
 e66:	00 d0       	rcall	.+0      	; 0xe68 <LCD_voidWriteNumber+0x8>
 e68:	00 d0       	rcall	.+0      	; 0xe6a <LCD_voidWriteNumber+0xa>
 e6a:	cd b7       	in	r28, 0x3d	; 61
 e6c:	de b7       	in	r29, 0x3e	; 62
	u16 temp;
	u8 Idx,Arr[SIZE_ARRAY_NUMBERS],Counter=0;
 e6e:	10 e0       	ldi	r17, 0x00	; 0
	
	while(Number!=0)
 e70:	1a c0       	rjmp	.+52     	; 0xea6 <LCD_voidWriteNumber+0x46>
	{
		temp = Number%10;
 e72:	2d ec       	ldi	r18, 0xCD	; 205
 e74:	82 9f       	mul	r24, r18
 e76:	21 2d       	mov	r18, r1
 e78:	11 24       	eor	r1, r1
 e7a:	92 2f       	mov	r25, r18
 e7c:	96 95       	lsr	r25
 e7e:	96 95       	lsr	r25
 e80:	96 95       	lsr	r25
 e82:	99 0f       	add	r25, r25
 e84:	39 2f       	mov	r19, r25
 e86:	33 0f       	add	r19, r19
 e88:	33 0f       	add	r19, r19
 e8a:	93 0f       	add	r25, r19
 e8c:	89 1b       	sub	r24, r25
		Arr[Counter] = temp;
 e8e:	e1 e0       	ldi	r30, 0x01	; 1
 e90:	f0 e0       	ldi	r31, 0x00	; 0
 e92:	ec 0f       	add	r30, r28
 e94:	fd 1f       	adc	r31, r29
 e96:	e1 0f       	add	r30, r17
 e98:	f1 1d       	adc	r31, r1
 e9a:	80 83       	st	Z, r24
		Number/=10;
 e9c:	82 2f       	mov	r24, r18
 e9e:	86 95       	lsr	r24
 ea0:	86 95       	lsr	r24
 ea2:	86 95       	lsr	r24
		Counter++;
 ea4:	1f 5f       	subi	r17, 0xFF	; 255
void LCD_voidWriteNumber(u8 Number)
{
	u16 temp;
	u8 Idx,Arr[SIZE_ARRAY_NUMBERS],Counter=0;
	
	while(Number!=0)
 ea6:	81 11       	cpse	r24, r1
 ea8:	e4 cf       	rjmp	.-56     	; 0xe72 <LCD_voidWriteNumber+0x12>
 eaa:	0e c0       	rjmp	.+28     	; 0xec8 <LCD_voidWriteNumber+0x68>
		Number/=10;
		Counter++;
	}
			for(Idx=Counter; Idx>0;Idx--)
			{
				LCD_voidSendData(Arr[Idx-1] + 48);//+ 48 for  represented integer for characters.
 eac:	e1 2f       	mov	r30, r17
 eae:	f0 e0       	ldi	r31, 0x00	; 0
 eb0:	31 97       	sbiw	r30, 0x01	; 1
 eb2:	81 e0       	ldi	r24, 0x01	; 1
 eb4:	90 e0       	ldi	r25, 0x00	; 0
 eb6:	8c 0f       	add	r24, r28
 eb8:	9d 1f       	adc	r25, r29
 eba:	e8 0f       	add	r30, r24
 ebc:	f9 1f       	adc	r31, r25
 ebe:	80 81       	ld	r24, Z
 ec0:	80 5d       	subi	r24, 0xD0	; 208
 ec2:	0e 94 d2 05 	call	0xba4	; 0xba4 <LCD_voidSendData>
		temp = Number%10;
		Arr[Counter] = temp;
		Number/=10;
		Counter++;
	}
			for(Idx=Counter; Idx>0;Idx--)
 ec6:	11 50       	subi	r17, 0x01	; 1
 ec8:	11 11       	cpse	r17, r1
 eca:	f0 cf       	rjmp	.-32     	; 0xeac <LCD_voidWriteNumber+0x4c>
			{
				LCD_voidSendData(Arr[Idx-1] + 48);//+ 48 for  represented integer for characters.
			}
}
 ecc:	0f 90       	pop	r0
 ece:	0f 90       	pop	r0
 ed0:	0f 90       	pop	r0
 ed2:	0f 90       	pop	r0
 ed4:	df 91       	pop	r29
 ed6:	cf 91       	pop	r28
 ed8:	1f 91       	pop	r17
 eda:	08 95       	ret

Disassembly of section .text.main:

000000bc <main>:
#include "LCD_interface.h"
#include "KPD_interface.h"
#include <util/delay.h>
int main()
{
	LCD_voidInit();
  bc:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_voidInit>
	KPD_u8Init();
  c0:	0e 94 9c 06 	call	0xd38	; 0xd38 <KPD_u8Init>
	
	u16 Key,operation=0,operation2=0;
	u8 flag1=0,flag2=0;
	u16 num1=0,num2=0,num3=0;
	u16 result=0,temp=0;
	LCD_voidGoToXY(1,5);
  c4:	65 e0       	ldi	r22, 0x05	; 5
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 01 04 	call	0x802	; 0x802 <LCD_voidGoToXY>
	LCD_voidSendString("Calculator");
  cc:	60 eb       	ldi	r22, 0xB0	; 176
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 6e 07 	call	0xedc	; 0xedc <LCD_voidSendString>
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	83 ed       	ldi	r24, 0xD3	; 211
  da:	90 e3       	ldi	r25, 0x30	; 48
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x20>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x2a>
  e6:	00 00       	nop
	_delay_ms(2000);
	LCD_voidSendCommand(1);
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 65 05 	call	0xaca	; 0xaca <LCD_voidSendCommand>
	KPD_u8Init();
	
	u16 Key,operation=0,operation2=0;
	u8 flag1=0,flag2=0;
	u16 num1=0,num2=0,num3=0;
	u16 result=0,temp=0;
  ee:	81 2c       	mov	r8, r1
  f0:	91 2c       	mov	r9, r1
  f2:	61 2c       	mov	r6, r1
  f4:	71 2c       	mov	r7, r1
	LCD_voidInit();
	KPD_u8Init();
	
	u16 Key,operation=0,operation2=0;
	u8 flag1=0,flag2=0;
	u16 num1=0,num2=0,num3=0;
  f6:	c1 2c       	mov	r12, r1
  f8:	d1 2c       	mov	r13, r1
  fa:	21 2c       	mov	r2, r1
  fc:	31 2c       	mov	r3, r1
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	d0 e0       	ldi	r29, 0x00	; 0
{
	LCD_voidInit();
	KPD_u8Init();
	
	u16 Key,operation=0,operation2=0;
	u8 flag1=0,flag2=0;
 102:	00 e0       	ldi	r16, 0x00	; 0
 104:	10 e0       	ldi	r17, 0x00	; 0
int main()
{
	LCD_voidInit();
	KPD_u8Init();
	
	u16 Key,operation=0,operation2=0;
 106:	a1 2c       	mov	r10, r1
 108:	b1 2c       	mov	r11, r1
 10a:	e1 2c       	mov	r14, r1
 10c:	f1 2c       	mov	r15, r1
 10e:	0c c0       	rjmp	.+24     	; 0x128 <main+0x6c>
						case '+':LCD_voidSendData(operation);break;
						case '*':LCD_voidSendData(operation);break;
						case '-':LCD_voidSendData(operation);break;
						case '/':LCD_voidSendData(operation);break;
					}
					num2=num1;
 110:	1e 01       	movw	r2, r28
			
			else if (Key!='=' && !(Key >= 0 && Key <=9))
			{
				if (flag1==0)			//first operation
				{
					operation = Key;
 112:	72 01       	movw	r14, r4
						case '*':LCD_voidSendData(operation);break;
						case '-':LCD_voidSendData(operation);break;
						case '/':LCD_voidSendData(operation);break;
					}
					num2=num1;
					num1=0;
 114:	c0 e0       	ldi	r28, 0x00	; 0
 116:	d0 e0       	ldi	r29, 0x00	; 0
					flag1=1;
 118:	11 e0       	ldi	r17, 0x01	; 1
 11a:	06 c0       	rjmp	.+12     	; 0x128 <main+0x6c>
						case '+':LCD_voidSendData(operation2);break;
						case '*':LCD_voidSendData(operation2);break;
						case '-':LCD_voidSendData(operation2);break;
						case '/':LCD_voidSendData(operation2);break;
					}
					num3=num1;
 11c:	6e 01       	movw	r12, r28
					num1=0;
					flag1=0;
					flag2=1;
 11e:	01 2f       	mov	r16, r17
					flag1=1;
				}
				
				else if (flag1==1)		//second operation
				{
					operation2 =Key;
 120:	52 01       	movw	r10, r4
						case '*':LCD_voidSendData(operation2);break;
						case '-':LCD_voidSendData(operation2);break;
						case '/':LCD_voidSendData(operation2);break;
					}
					num3=num1;
					num1=0;
 122:	c0 e0       	ldi	r28, 0x00	; 0
 124:	d0 e0       	ldi	r29, 0x00	; 0
					flag1=0;
 126:	10 e0       	ldi	r17, 0x00	; 0
	
	while (1)
	{
		do 
		{
			Key = KPD_u8GetPressedKey();
 128:	0e 94 3f 06 	call	0xc7e	; 0xc7e <KPD_u8GetPressedKey>
 12c:	48 2e       	mov	r4, r24
 12e:	51 2c       	mov	r5, r1
		} while (Key== 0xff);
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	42 16       	cp	r4, r18
 134:	51 04       	cpc	r5, r1
 136:	c1 f3       	breq	.-16     	; 0x128 <main+0x6c>
		
			
			if ((Key >= 0 && Key <= 9))
 138:	9a e0       	ldi	r25, 0x0A	; 10
 13a:	49 16       	cp	r4, r25
 13c:	51 04       	cpc	r5, r1
 13e:	80 f4       	brcc	.+32     	; 0x160 <main+0xa4>
			{
				LCD_voidWriteNumber(Key);
 140:	0e 94 30 07 	call	0xe60	; 0xe60 <LCD_voidWriteNumber>
				num1  = (num1*10) + Key;
 144:	ce 01       	movw	r24, r28
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	cc 0f       	add	r28, r28
 14c:	dd 1f       	adc	r29, r29
 14e:	cc 0f       	add	r28, r28
 150:	dd 1f       	adc	r29, r29
 152:	cc 0f       	add	r28, r28
 154:	dd 1f       	adc	r29, r29
 156:	c8 0f       	add	r28, r24
 158:	d9 1f       	adc	r29, r25
 15a:	c4 0d       	add	r28, r4
 15c:	d5 1d       	adc	r29, r5
 15e:	e4 cf       	rjmp	.-56     	; 0x128 <main+0x6c>
			}
			
			else if (Key!='=' && !(Key >= 0 && Key <=9))
 160:	2d e3       	ldi	r18, 0x3D	; 61
 162:	42 16       	cp	r4, r18
 164:	51 04       	cpc	r5, r1
 166:	09 f4       	brne	.+2      	; 0x16a <main+0xae>
 168:	74 c0       	rjmp	.+232    	; 0x252 <main+0x196>
 16a:	9a e0       	ldi	r25, 0x0A	; 10
 16c:	49 16       	cp	r4, r25
 16e:	51 04       	cpc	r5, r1
 170:	08 f4       	brcc	.+2      	; 0x174 <main+0xb8>
 172:	6f c0       	rjmp	.+222    	; 0x252 <main+0x196>
			{
				if (flag1==0)			//first operation
 174:	11 11       	cpse	r17, r1
 176:	33 c0       	rjmp	.+102    	; 0x1de <main+0x122>
				{
					operation = Key;
					switch(operation)
 178:	2b e2       	ldi	r18, 0x2B	; 43
 17a:	42 16       	cp	r4, r18
 17c:	51 04       	cpc	r5, r1
 17e:	79 f0       	breq	.+30     	; 0x19e <main+0xe2>
 180:	28 f4       	brcc	.+10     	; 0x18c <main+0xd0>
 182:	2a e2       	ldi	r18, 0x2A	; 42
 184:	42 16       	cp	r4, r18
 186:	51 04       	cpc	r5, r1
 188:	91 f0       	breq	.+36     	; 0x1ae <main+0xf2>
 18a:	c2 cf       	rjmp	.-124    	; 0x110 <main+0x54>
 18c:	9d e2       	ldi	r25, 0x2D	; 45
 18e:	49 16       	cp	r4, r25
 190:	51 04       	cpc	r5, r1
 192:	a9 f0       	breq	.+42     	; 0x1be <main+0x102>
 194:	2f e2       	ldi	r18, 0x2F	; 47
 196:	42 16       	cp	r4, r18
 198:	51 04       	cpc	r5, r1
 19a:	c9 f0       	breq	.+50     	; 0x1ce <main+0x112>
 19c:	b9 cf       	rjmp	.-142    	; 0x110 <main+0x54>
					{
						case '+':LCD_voidSendData(operation);break;
 19e:	0e 94 d2 05 	call	0xba4	; 0xba4 <LCD_voidSendData>
						case '*':LCD_voidSendData(operation);break;
						case '-':LCD_voidSendData(operation);break;
						case '/':LCD_voidSendData(operation);break;
					}
					num2=num1;
 1a2:	1e 01       	movw	r2, r28
			
			else if (Key!='=' && !(Key >= 0 && Key <=9))
			{
				if (flag1==0)			//first operation
				{
					operation = Key;
 1a4:	72 01       	movw	r14, r4
						case '*':LCD_voidSendData(operation);break;
						case '-':LCD_voidSendData(operation);break;
						case '/':LCD_voidSendData(operation);break;
					}
					num2=num1;
					num1=0;
 1a6:	c0 e0       	ldi	r28, 0x00	; 0
 1a8:	d0 e0       	ldi	r29, 0x00	; 0
					flag1=1;
 1aa:	11 e0       	ldi	r17, 0x01	; 1
				if (flag1==0)			//first operation
				{
					operation = Key;
					switch(operation)
					{
						case '+':LCD_voidSendData(operation);break;
 1ac:	bd cf       	rjmp	.-134    	; 0x128 <main+0x6c>
						case '*':LCD_voidSendData(operation);break;
 1ae:	0e 94 d2 05 	call	0xba4	; 0xba4 <LCD_voidSendData>
						case '-':LCD_voidSendData(operation);break;
						case '/':LCD_voidSendData(operation);break;
					}
					num2=num1;
 1b2:	1e 01       	movw	r2, r28
			
			else if (Key!='=' && !(Key >= 0 && Key <=9))
			{
				if (flag1==0)			//first operation
				{
					operation = Key;
 1b4:	72 01       	movw	r14, r4
						case '*':LCD_voidSendData(operation);break;
						case '-':LCD_voidSendData(operation);break;
						case '/':LCD_voidSendData(operation);break;
					}
					num2=num1;
					num1=0;
 1b6:	c0 e0       	ldi	r28, 0x00	; 0
 1b8:	d0 e0       	ldi	r29, 0x00	; 0
					flag1=1;
 1ba:	11 e0       	ldi	r17, 0x01	; 1
				{
					operation = Key;
					switch(operation)
					{
						case '+':LCD_voidSendData(operation);break;
						case '*':LCD_voidSendData(operation);break;
 1bc:	b5 cf       	rjmp	.-150    	; 0x128 <main+0x6c>
						case '-':LCD_voidSendData(operation);break;
 1be:	0e 94 d2 05 	call	0xba4	; 0xba4 <LCD_voidSendData>
						case '/':LCD_voidSendData(operation);break;
					}
					num2=num1;
 1c2:	1e 01       	movw	r2, r28
			
			else if (Key!='=' && !(Key >= 0 && Key <=9))
			{
				if (flag1==0)			//first operation
				{
					operation = Key;
 1c4:	72 01       	movw	r14, r4
						case '*':LCD_voidSendData(operation);break;
						case '-':LCD_voidSendData(operation);break;
						case '/':LCD_voidSendData(operation);break;
					}
					num2=num1;
					num1=0;
 1c6:	c0 e0       	ldi	r28, 0x00	; 0
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
					flag1=1;
 1ca:	11 e0       	ldi	r17, 0x01	; 1
					operation = Key;
					switch(operation)
					{
						case '+':LCD_voidSendData(operation);break;
						case '*':LCD_voidSendData(operation);break;
						case '-':LCD_voidSendData(operation);break;
 1cc:	ad cf       	rjmp	.-166    	; 0x128 <main+0x6c>
						case '/':LCD_voidSendData(operation);break;
 1ce:	0e 94 d2 05 	call	0xba4	; 0xba4 <LCD_voidSendData>
					}
					num2=num1;
 1d2:	1e 01       	movw	r2, r28
			
			else if (Key!='=' && !(Key >= 0 && Key <=9))
			{
				if (flag1==0)			//first operation
				{
					operation = Key;
 1d4:	72 01       	movw	r14, r4
						case '*':LCD_voidSendData(operation);break;
						case '-':LCD_voidSendData(operation);break;
						case '/':LCD_voidSendData(operation);break;
					}
					num2=num1;
					num1=0;
 1d6:	c0 e0       	ldi	r28, 0x00	; 0
 1d8:	d0 e0       	ldi	r29, 0x00	; 0
					flag1=1;
 1da:	11 e0       	ldi	r17, 0x01	; 1
					switch(operation)
					{
						case '+':LCD_voidSendData(operation);break;
						case '*':LCD_voidSendData(operation);break;
						case '-':LCD_voidSendData(operation);break;
						case '/':LCD_voidSendData(operation);break;
 1dc:	a5 cf       	rjmp	.-182    	; 0x128 <main+0x6c>
					num2=num1;
					num1=0;
					flag1=1;
				}
				
				else if (flag1==1)		//second operation
 1de:	11 30       	cpi	r17, 0x01	; 1
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <main+0x128>
 1e2:	a2 cf       	rjmp	.-188    	; 0x128 <main+0x6c>
				{
					operation2 =Key;
					switch(operation2)
 1e4:	9b e2       	ldi	r25, 0x2B	; 43
 1e6:	49 16       	cp	r4, r25
 1e8:	51 04       	cpc	r5, r1
 1ea:	79 f0       	breq	.+30     	; 0x20a <main+0x14e>
 1ec:	28 f4       	brcc	.+10     	; 0x1f8 <main+0x13c>
 1ee:	9a e2       	ldi	r25, 0x2A	; 42
 1f0:	49 16       	cp	r4, r25
 1f2:	51 04       	cpc	r5, r1
 1f4:	99 f0       	breq	.+38     	; 0x21c <main+0x160>
 1f6:	92 cf       	rjmp	.-220    	; 0x11c <main+0x60>
 1f8:	2d e2       	ldi	r18, 0x2D	; 45
 1fa:	42 16       	cp	r4, r18
 1fc:	51 04       	cpc	r5, r1
 1fe:	b9 f0       	breq	.+46     	; 0x22e <main+0x172>
 200:	9f e2       	ldi	r25, 0x2F	; 47
 202:	49 16       	cp	r4, r25
 204:	51 04       	cpc	r5, r1
 206:	e1 f0       	breq	.+56     	; 0x240 <main+0x184>
 208:	89 cf       	rjmp	.-238    	; 0x11c <main+0x60>
					{
						case '+':LCD_voidSendData(operation2);break;
 20a:	0e 94 d2 05 	call	0xba4	; 0xba4 <LCD_voidSendData>
						case '*':LCD_voidSendData(operation2);break;
						case '-':LCD_voidSendData(operation2);break;
						case '/':LCD_voidSendData(operation2);break;
					}
					num3=num1;
 20e:	6e 01       	movw	r12, r28
					num1=0;
					flag1=0;
					flag2=1;
 210:	01 2f       	mov	r16, r17
					flag1=1;
				}
				
				else if (flag1==1)		//second operation
				{
					operation2 =Key;
 212:	52 01       	movw	r10, r4
						case '*':LCD_voidSendData(operation2);break;
						case '-':LCD_voidSendData(operation2);break;
						case '/':LCD_voidSendData(operation2);break;
					}
					num3=num1;
					num1=0;
 214:	c0 e0       	ldi	r28, 0x00	; 0
 216:	d0 e0       	ldi	r29, 0x00	; 0
					flag1=0;
 218:	10 e0       	ldi	r17, 0x00	; 0
				else if (flag1==1)		//second operation
				{
					operation2 =Key;
					switch(operation2)
					{
						case '+':LCD_voidSendData(operation2);break;
 21a:	86 cf       	rjmp	.-244    	; 0x128 <main+0x6c>
						case '*':LCD_voidSendData(operation2);break;
 21c:	0e 94 d2 05 	call	0xba4	; 0xba4 <LCD_voidSendData>
						case '-':LCD_voidSendData(operation2);break;
						case '/':LCD_voidSendData(operation2);break;
					}
					num3=num1;
 220:	6e 01       	movw	r12, r28
					num1=0;
					flag1=0;
					flag2=1;
 222:	01 2f       	mov	r16, r17
					flag1=1;
				}
				
				else if (flag1==1)		//second operation
				{
					operation2 =Key;
 224:	52 01       	movw	r10, r4
						case '*':LCD_voidSendData(operation2);break;
						case '-':LCD_voidSendData(operation2);break;
						case '/':LCD_voidSendData(operation2);break;
					}
					num3=num1;
					num1=0;
 226:	c0 e0       	ldi	r28, 0x00	; 0
 228:	d0 e0       	ldi	r29, 0x00	; 0
					flag1=0;
 22a:	10 e0       	ldi	r17, 0x00	; 0
				{
					operation2 =Key;
					switch(operation2)
					{
						case '+':LCD_voidSendData(operation2);break;
						case '*':LCD_voidSendData(operation2);break;
 22c:	7d cf       	rjmp	.-262    	; 0x128 <main+0x6c>
						case '-':LCD_voidSendData(operation2);break;
 22e:	0e 94 d2 05 	call	0xba4	; 0xba4 <LCD_voidSendData>
						case '/':LCD_voidSendData(operation2);break;
					}
					num3=num1;
 232:	6e 01       	movw	r12, r28
					num1=0;
					flag1=0;
					flag2=1;
 234:	01 2f       	mov	r16, r17
					flag1=1;
				}
				
				else if (flag1==1)		//second operation
				{
					operation2 =Key;
 236:	52 01       	movw	r10, r4
						case '*':LCD_voidSendData(operation2);break;
						case '-':LCD_voidSendData(operation2);break;
						case '/':LCD_voidSendData(operation2);break;
					}
					num3=num1;
					num1=0;
 238:	c0 e0       	ldi	r28, 0x00	; 0
 23a:	d0 e0       	ldi	r29, 0x00	; 0
					flag1=0;
 23c:	10 e0       	ldi	r17, 0x00	; 0
					operation2 =Key;
					switch(operation2)
					{
						case '+':LCD_voidSendData(operation2);break;
						case '*':LCD_voidSendData(operation2);break;
						case '-':LCD_voidSendData(operation2);break;
 23e:	74 cf       	rjmp	.-280    	; 0x128 <main+0x6c>
						case '/':LCD_voidSendData(operation2);break;
 240:	0e 94 d2 05 	call	0xba4	; 0xba4 <LCD_voidSendData>
					}
					num3=num1;
 244:	6e 01       	movw	r12, r28
					num1=0;
					flag1=0;
					flag2=1;
 246:	01 2f       	mov	r16, r17
					flag1=1;
				}
				
				else if (flag1==1)		//second operation
				{
					operation2 =Key;
 248:	52 01       	movw	r10, r4
						case '*':LCD_voidSendData(operation2);break;
						case '-':LCD_voidSendData(operation2);break;
						case '/':LCD_voidSendData(operation2);break;
					}
					num3=num1;
					num1=0;
 24a:	c0 e0       	ldi	r28, 0x00	; 0
 24c:	d0 e0       	ldi	r29, 0x00	; 0
					flag1=0;
 24e:	10 e0       	ldi	r17, 0x00	; 0
					switch(operation2)
					{
						case '+':LCD_voidSendData(operation2);break;
						case '*':LCD_voidSendData(operation2);break;
						case '-':LCD_voidSendData(operation2);break;
						case '/':LCD_voidSendData(operation2);break;
 250:	6b cf       	rjmp	.-298    	; 0x128 <main+0x6c>
					flag1=0;
					flag2=1;
				}			
			}

		else if (Key== '=')
 252:	2d e3       	ldi	r18, 0x3D	; 61
 254:	42 16       	cp	r4, r18
 256:	51 04       	cpc	r5, r1
 258:	09 f0       	breq	.+2      	; 0x25c <main+0x1a0>
 25a:	66 cf       	rjmp	.-308    	; 0x128 <main+0x6c>
		{
			/*IF Enter One Operation*/
			if (flag1==1 && flag2==0)
 25c:	11 30       	cpi	r17, 0x01	; 1
 25e:	09 f0       	breq	.+2      	; 0x262 <main+0x1a6>
 260:	41 c0       	rjmp	.+130    	; 0x2e4 <main+0x228>
 262:	01 11       	cpse	r16, r1
 264:	3f c0       	rjmp	.+126    	; 0x2e4 <main+0x228>
			{
				LCD_voidSendData(Key);
 266:	0e 94 d2 05 	call	0xba4	; 0xba4 <LCD_voidSendData>
				switch(operation)
 26a:	8b e2       	ldi	r24, 0x2B	; 43
 26c:	e8 16       	cp	r14, r24
 26e:	f1 04       	cpc	r15, r1
 270:	79 f0       	breq	.+30     	; 0x290 <main+0x1d4>
 272:	28 f4       	brcc	.+10     	; 0x27e <main+0x1c2>
 274:	2a e2       	ldi	r18, 0x2A	; 42
 276:	e2 16       	cp	r14, r18
 278:	f1 04       	cpc	r15, r1
 27a:	71 f0       	breq	.+28     	; 0x298 <main+0x1dc>
 27c:	1e c0       	rjmp	.+60     	; 0x2ba <main+0x1fe>
 27e:	8d e2       	ldi	r24, 0x2D	; 45
 280:	e8 16       	cp	r14, r24
 282:	f1 04       	cpc	r15, r1
 284:	89 f0       	breq	.+34     	; 0x2a8 <main+0x1ec>
 286:	9f e2       	ldi	r25, 0x2F	; 47
 288:	e9 16       	cp	r14, r25
 28a:	f1 04       	cpc	r15, r1
 28c:	89 f0       	breq	.+34     	; 0x2b0 <main+0x1f4>
 28e:	15 c0       	rjmp	.+42     	; 0x2ba <main+0x1fe>
				{
					case '+':result = num1 + num2;break;
 290:	3e 01       	movw	r6, r28
 292:	62 0c       	add	r6, r2
 294:	73 1c       	adc	r7, r3
 296:	11 c0       	rjmp	.+34     	; 0x2ba <main+0x1fe>
					case '*':result = num1 * num2;break;
 298:	c2 9d       	mul	r28, r2
 29a:	30 01       	movw	r6, r0
 29c:	c3 9d       	mul	r28, r3
 29e:	70 0c       	add	r7, r0
 2a0:	d2 9d       	mul	r29, r2
 2a2:	70 0c       	add	r7, r0
 2a4:	11 24       	eor	r1, r1
 2a6:	09 c0       	rjmp	.+18     	; 0x2ba <main+0x1fe>
					case '-':result = num2 - num1;break;
 2a8:	31 01       	movw	r6, r2
 2aa:	6c 1a       	sub	r6, r28
 2ac:	7d 0a       	sbc	r7, r29
 2ae:	05 c0       	rjmp	.+10     	; 0x2ba <main+0x1fe>
					case '/':result = num2 / num1;break;
 2b0:	c1 01       	movw	r24, r2
 2b2:	be 01       	movw	r22, r28
 2b4:	0e 94 89 07 	call	0xf12	; 0xf12 <__udivmodhi4>
 2b8:	3b 01       	movw	r6, r22
				}
				LCD_voidWriteNumber(result);
 2ba:	86 2d       	mov	r24, r6
 2bc:	0e 94 30 07 	call	0xe60	; 0xe60 <LCD_voidWriteNumber>
 2c0:	2f ef       	ldi	r18, 0xFF	; 255
 2c2:	83 ed       	ldi	r24, 0xD3	; 211
 2c4:	90 e3       	ldi	r25, 0x30	; 48
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0x20a>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x214>
 2d0:	00 00       	nop
				_delay_ms(2000);
				num2=num1=0;
				flag1=flag2=0;
				LCD_voidSendCommand(1);
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 65 05 	call	0xaca	; 0xaca <LCD_voidSendCommand>
					case '/':result = num2 / num1;break;
				}
				LCD_voidWriteNumber(result);
				_delay_ms(2000);
				num2=num1=0;
				flag1=flag2=0;
 2d8:	10 2f       	mov	r17, r16
					case '-':result = num2 - num1;break;
					case '/':result = num2 / num1;break;
				}
				LCD_voidWriteNumber(result);
				_delay_ms(2000);
				num2=num1=0;
 2da:	21 2c       	mov	r2, r1
 2dc:	31 2c       	mov	r3, r1
 2de:	c0 e0       	ldi	r28, 0x00	; 0
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
				flag1=flag2=0;
				LCD_voidSendCommand(1);
 2e2:	22 cf       	rjmp	.-444    	; 0x128 <main+0x6c>
			}
			/*IF Enter Two Operation*/
			else if	(flag2==1 && flag1==0)
 2e4:	01 30       	cpi	r16, 0x01	; 1
 2e6:	09 f0       	breq	.+2      	; 0x2ea <main+0x22e>
 2e8:	1f cf       	rjmp	.-450    	; 0x128 <main+0x6c>
 2ea:	11 11       	cpse	r17, r1
 2ec:	1d cf       	rjmp	.-454    	; 0x128 <main+0x6c>
			{
				LCD_voidSendData(Key);
 2ee:	0e 94 d2 05 	call	0xba4	; 0xba4 <LCD_voidSendData>
				switch(operation2)
 2f2:	2b e2       	ldi	r18, 0x2B	; 43
 2f4:	a2 16       	cp	r10, r18
 2f6:	b1 04       	cpc	r11, r1
 2f8:	89 f0       	breq	.+34     	; 0x31c <main+0x260>
 2fa:	28 f4       	brcc	.+10     	; 0x306 <main+0x24a>
 2fc:	9a e2       	ldi	r25, 0x2A	; 42
 2fe:	a9 16       	cp	r10, r25
 300:	b1 04       	cpc	r11, r1
 302:	d1 f1       	breq	.+116    	; 0x378 <main+0x2bc>
 304:	d2 c0       	rjmp	.+420    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 306:	2d e2       	ldi	r18, 0x2D	; 45
 308:	a2 16       	cp	r10, r18
 30a:	b1 04       	cpc	r11, r1
 30c:	09 f4       	brne	.+2      	; 0x310 <main+0x254>
 30e:	74 c0       	rjmp	.+232    	; 0x3f8 <main+0x33c>
 310:	8f e2       	ldi	r24, 0x2F	; 47
 312:	a8 16       	cp	r10, r24
 314:	b1 04       	cpc	r11, r1
 316:	09 f4       	brne	.+2      	; 0x31a <main+0x25e>
 318:	9f c0       	rjmp	.+318    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 31a:	c7 c0       	rjmp	.+398    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
				{
					case '+':
					if (operation=='+')
 31c:	9b e2       	ldi	r25, 0x2B	; 43
 31e:	e9 16       	cp	r14, r25
 320:	f1 04       	cpc	r15, r1
 322:	31 f4       	brne	.+12     	; 0x330 <main+0x274>
					{
						temp = num1 + num2 + num3;break;
 324:	c2 0d       	add	r28, r2
 326:	d3 1d       	adc	r29, r3
 328:	46 01       	movw	r8, r12
 32a:	8c 0e       	add	r8, r28
 32c:	9d 1e       	adc	r9, r29
 32e:	bd c0       	rjmp	.+378    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
					}
					else if (operation=='-')
 330:	2d e2       	ldi	r18, 0x2D	; 45
 332:	e2 16       	cp	r14, r18
 334:	f1 04       	cpc	r15, r1
 336:	31 f4       	brne	.+12     	; 0x344 <main+0x288>
					{
						temp = (num1 + num2) - num3 ;break;
 338:	c2 0d       	add	r28, r2
 33a:	d3 1d       	adc	r29, r3
 33c:	4e 01       	movw	r8, r28
 33e:	8c 18       	sub	r8, r12
 340:	9d 08       	sbc	r9, r13
 342:	b3 c0       	rjmp	.+358    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
					}
					else if (operation=='/')
 344:	8f e2       	ldi	r24, 0x2F	; 47
 346:	e8 16       	cp	r14, r24
 348:	f1 04       	cpc	r15, r1
 34a:	41 f4       	brne	.+16     	; 0x35c <main+0x2a0>
					{
						temp = num1 + (num2/num3);break;
 34c:	c1 01       	movw	r24, r2
 34e:	b6 01       	movw	r22, r12
 350:	0e 94 89 07 	call	0xf12	; 0xf12 <__udivmodhi4>
 354:	4e 01       	movw	r8, r28
 356:	86 0e       	add	r8, r22
 358:	97 1e       	adc	r9, r23
 35a:	a7 c0       	rjmp	.+334    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
					}
					else if (operation=='*')
 35c:	9a e2       	ldi	r25, 0x2A	; 42
 35e:	e9 16       	cp	r14, r25
 360:	f1 04       	cpc	r15, r1
 362:	51 f4       	brne	.+20     	; 0x378 <main+0x2bc>
					{
						temp = num1 + (num2*num3);break;
 364:	2c 9c       	mul	r2, r12
 366:	40 01       	movw	r8, r0
 368:	2d 9c       	mul	r2, r13
 36a:	90 0c       	add	r9, r0
 36c:	3c 9c       	mul	r3, r12
 36e:	90 0c       	add	r9, r0
 370:	11 24       	eor	r1, r1
 372:	8c 0e       	add	r8, r28
 374:	9d 1e       	adc	r9, r29
 376:	99 c0       	rjmp	.+306    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
					}
					
					case '*':
					if (operation=='+')
 378:	2b e2       	ldi	r18, 0x2B	; 43
 37a:	e2 16       	cp	r14, r18
 37c:	f1 04       	cpc	r15, r1
 37e:	51 f4       	brne	.+20     	; 0x394 <main+0x2d8>
					{
						temp = (num3 * num1) + num2;break;
 380:	cc 9d       	mul	r28, r12
 382:	40 01       	movw	r8, r0
 384:	cd 9d       	mul	r28, r13
 386:	90 0c       	add	r9, r0
 388:	dc 9d       	mul	r29, r12
 38a:	90 0c       	add	r9, r0
 38c:	11 24       	eor	r1, r1
 38e:	82 0c       	add	r8, r2
 390:	93 1c       	adc	r9, r3
 392:	8b c0       	rjmp	.+278    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
					}
					else if (operation=='-')
 394:	8d e2       	ldi	r24, 0x2D	; 45
 396:	e8 16       	cp	r14, r24
 398:	f1 04       	cpc	r15, r1
 39a:	59 f4       	brne	.+22     	; 0x3b2 <main+0x2f6>
					{
						temp =num2 - (num1 * num3);break;
 39c:	cc 9d       	mul	r28, r12
 39e:	c0 01       	movw	r24, r0
 3a0:	cd 9d       	mul	r28, r13
 3a2:	90 0d       	add	r25, r0
 3a4:	dc 9d       	mul	r29, r12
 3a6:	90 0d       	add	r25, r0
 3a8:	11 24       	eor	r1, r1
 3aa:	41 01       	movw	r8, r2
 3ac:	88 1a       	sub	r8, r24
 3ae:	99 0a       	sbc	r9, r25
 3b0:	7c c0       	rjmp	.+248    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
					}
					else if (operation=='/')
 3b2:	9f e2       	ldi	r25, 0x2F	; 47
 3b4:	e9 16       	cp	r14, r25
 3b6:	f1 04       	cpc	r15, r1
 3b8:	61 f4       	brne	.+24     	; 0x3d2 <main+0x316>
					{
						temp =num2 / (num1 * num3) ;break;
 3ba:	cc 9d       	mul	r28, r12
 3bc:	b0 01       	movw	r22, r0
 3be:	cd 9d       	mul	r28, r13
 3c0:	70 0d       	add	r23, r0
 3c2:	dc 9d       	mul	r29, r12
 3c4:	70 0d       	add	r23, r0
 3c6:	11 24       	eor	r1, r1
 3c8:	c1 01       	movw	r24, r2
 3ca:	0e 94 89 07 	call	0xf12	; 0xf12 <__udivmodhi4>
 3ce:	4b 01       	movw	r8, r22
 3d0:	6c c0       	rjmp	.+216    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
					}
					else if (operation=='*')
 3d2:	2a e2       	ldi	r18, 0x2A	; 42
 3d4:	e2 16       	cp	r14, r18
 3d6:	f1 04       	cpc	r15, r1
 3d8:	79 f4       	brne	.+30     	; 0x3f8 <main+0x33c>
					{
						temp = num1 * num3 * num2;break;
 3da:	cc 9d       	mul	r28, r12
 3dc:	c0 01       	movw	r24, r0
 3de:	cd 9d       	mul	r28, r13
 3e0:	90 0d       	add	r25, r0
 3e2:	dc 9d       	mul	r29, r12
 3e4:	90 0d       	add	r25, r0
 3e6:	11 24       	eor	r1, r1
 3e8:	28 9e       	mul	r2, r24
 3ea:	40 01       	movw	r8, r0
 3ec:	29 9e       	mul	r2, r25
 3ee:	90 0c       	add	r9, r0
 3f0:	38 9e       	mul	r3, r24
 3f2:	90 0c       	add	r9, r0
 3f4:	11 24       	eor	r1, r1
 3f6:	59 c0       	rjmp	.+178    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
					}
					
					case '-':
					if (operation=='+')
 3f8:	8b e2       	ldi	r24, 0x2B	; 43
 3fa:	e8 16       	cp	r14, r24
 3fc:	f1 04       	cpc	r15, r1
 3fe:	39 f4       	brne	.+14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
					{
						temp = (num3 + num2) - num1;break;
 400:	c1 01       	movw	r24, r2
 402:	8c 0d       	add	r24, r12
 404:	9d 1d       	adc	r25, r13
 406:	4c 01       	movw	r8, r24
 408:	8c 1a       	sub	r8, r28
 40a:	9d 0a       	sbc	r9, r29
 40c:	4e c0       	rjmp	.+156    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
					}
					else if (operation=='-')
 40e:	9d e2       	ldi	r25, 0x2D	; 45
 410:	e9 16       	cp	r14, r25
 412:	f1 04       	cpc	r15, r1
 414:	39 f4       	brne	.+14     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
					{
						temp = num2 - num3 - num1 ;break;
 416:	c1 01       	movw	r24, r2
 418:	8c 19       	sub	r24, r12
 41a:	9d 09       	sbc	r25, r13
 41c:	4c 01       	movw	r8, r24
 41e:	8c 1a       	sub	r8, r28
 420:	9d 0a       	sbc	r9, r29
 422:	43 c0       	rjmp	.+134    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
					}
					else if (operation=='/')
 424:	2f e2       	ldi	r18, 0x2F	; 47
 426:	e2 16       	cp	r14, r18
 428:	f1 04       	cpc	r15, r1
 42a:	41 f4       	brne	.+16     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
					{
						temp = (num2 / num3) - num1;break;
 42c:	c1 01       	movw	r24, r2
 42e:	b6 01       	movw	r22, r12
 430:	0e 94 89 07 	call	0xf12	; 0xf12 <__udivmodhi4>
 434:	4b 01       	movw	r8, r22
 436:	8c 1a       	sub	r8, r28
 438:	9d 0a       	sbc	r9, r29
 43a:	37 c0       	rjmp	.+110    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
					}
					else if (operation=='*')
 43c:	8a e2       	ldi	r24, 0x2A	; 42
 43e:	e8 16       	cp	r14, r24
 440:	f1 04       	cpc	r15, r1
 442:	51 f4       	brne	.+20     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
					{
						temp = (num2*num3) - num1;break;
 444:	2c 9c       	mul	r2, r12
 446:	40 01       	movw	r8, r0
 448:	2d 9c       	mul	r2, r13
 44a:	90 0c       	add	r9, r0
 44c:	3c 9c       	mul	r3, r12
 44e:	90 0c       	add	r9, r0
 450:	11 24       	eor	r1, r1
 452:	8c 1a       	sub	r8, r28
 454:	9d 0a       	sbc	r9, r29
 456:	29 c0       	rjmp	.+82     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
					}
					
					case '/':
					if (operation=='+')
 458:	9b e2       	ldi	r25, 0x2B	; 43
 45a:	e9 16       	cp	r14, r25
 45c:	f1 04       	cpc	r15, r1
 45e:	41 f4       	brne	.+16     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
					{
						temp = (num3 / num1) + num2;break;
 460:	c6 01       	movw	r24, r12
 462:	be 01       	movw	r22, r28
 464:	0e 94 89 07 	call	0xf12	; 0xf12 <__udivmodhi4>
 468:	41 01       	movw	r8, r2
 46a:	86 0e       	add	r8, r22
 46c:	97 1e       	adc	r9, r23
 46e:	1d c0       	rjmp	.+58     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
					}
					/*else if (operation=='-')
					{
						temp = (num3 / num1) - num2 ;break;
					}*/
					else if (operation=='/')
 470:	2f e2       	ldi	r18, 0x2F	; 47
 472:	e2 16       	cp	r14, r18
 474:	f1 04       	cpc	r15, r1
 476:	51 f4       	brne	.+20     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
					{
						temp = num2 / num1 / num3;break;
 478:	c1 01       	movw	r24, r2
 47a:	be 01       	movw	r22, r28
 47c:	0e 94 89 07 	call	0xf12	; 0xf12 <__udivmodhi4>
 480:	cb 01       	movw	r24, r22
 482:	b6 01       	movw	r22, r12
 484:	0e 94 89 07 	call	0xf12	; 0xf12 <__udivmodhi4>
 488:	4b 01       	movw	r8, r22
 48a:	0f c0       	rjmp	.+30     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
					}
					else if (operation=='*')
 48c:	8a e2       	ldi	r24, 0x2A	; 42
 48e:	e8 16       	cp	r14, r24
 490:	f1 04       	cpc	r15, r1
 492:	59 f4       	brne	.+22     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
					{
						temp = (num2*num3) / num1;break;
 494:	2c 9c       	mul	r2, r12
 496:	c0 01       	movw	r24, r0
 498:	2d 9c       	mul	r2, r13
 49a:	90 0d       	add	r25, r0
 49c:	3c 9c       	mul	r3, r12
 49e:	90 0d       	add	r25, r0
 4a0:	11 24       	eor	r1, r1
 4a2:	be 01       	movw	r22, r28
 4a4:	0e 94 89 07 	call	0xf12	; 0xf12 <__udivmodhi4>
 4a8:	4b 01       	movw	r8, r22
					}
				}	
				
				LCD_voidWriteNumber(temp);
 4aa:	88 2d       	mov	r24, r8
 4ac:	0e 94 30 07 	call	0xe60	; 0xe60 <LCD_voidWriteNumber>
 4b0:	9f ef       	ldi	r25, 0xFF	; 255
 4b2:	23 ed       	ldi	r18, 0xD3	; 211
 4b4:	80 e3       	ldi	r24, 0x30	; 48
 4b6:	91 50       	subi	r25, 0x01	; 1
 4b8:	20 40       	sbci	r18, 0x00	; 0
 4ba:	80 40       	sbci	r24, 0x00	; 0
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4c0:	00 00       	nop
				_delay_ms(2000);
				num2=num1=num3=0;
				flag1=flag2=0;
				LCD_voidSendCommand(1);
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	0e 94 65 05 	call	0xaca	; 0xaca <LCD_voidSendCommand>
				}	
				
				LCD_voidWriteNumber(temp);
				_delay_ms(2000);
				num2=num1=num3=0;
				flag1=flag2=0;
 4c8:	01 2f       	mov	r16, r17
					}
				}	
				
				LCD_voidWriteNumber(temp);
				_delay_ms(2000);
				num2=num1=num3=0;
 4ca:	c1 2c       	mov	r12, r1
 4cc:	d1 2c       	mov	r13, r1
 4ce:	21 2c       	mov	r2, r1
 4d0:	31 2c       	mov	r3, r1
 4d2:	c0 e0       	ldi	r28, 0x00	; 0
 4d4:	d0 e0       	ldi	r29, 0x00	; 0
 4d6:	28 ce       	rjmp	.-944    	; 0x128 <main+0x6c>

Disassembly of section .text.libgcc.div:

00000f12 <__udivmodhi4>:
 f12:	aa 1b       	sub	r26, r26
 f14:	bb 1b       	sub	r27, r27
 f16:	51 e1       	ldi	r21, 0x11	; 17
 f18:	07 c0       	rjmp	.+14     	; 0xf28 <__udivmodhi4_ep>

00000f1a <__udivmodhi4_loop>:
 f1a:	aa 1f       	adc	r26, r26
 f1c:	bb 1f       	adc	r27, r27
 f1e:	a6 17       	cp	r26, r22
 f20:	b7 07       	cpc	r27, r23
 f22:	10 f0       	brcs	.+4      	; 0xf28 <__udivmodhi4_ep>
 f24:	a6 1b       	sub	r26, r22
 f26:	b7 0b       	sbc	r27, r23

00000f28 <__udivmodhi4_ep>:
 f28:	88 1f       	adc	r24, r24
 f2a:	99 1f       	adc	r25, r25
 f2c:	5a 95       	dec	r21
 f2e:	a9 f7       	brne	.-22     	; 0xf1a <__udivmodhi4_loop>
 f30:	80 95       	com	r24
 f32:	90 95       	com	r25
 f34:	bc 01       	movw	r22, r24
 f36:	cd 01       	movw	r24, r26
 f38:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000f58 <_fini>:
 f58:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000f5a <__funcs_on_exit>:
 f5a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000f5c <__simulator_exit>:
 f5c:	08 95       	ret

Disassembly of section .text.exit:

00000f3a <exit>:
 f3a:	ec 01       	movw	r28, r24
 f3c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__funcs_on_exit>
 f40:	0e 94 ac 07 	call	0xf58	; 0xf58 <_fini>
 f44:	ce 01       	movw	r24, r28
 f46:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__simulator_exit>
 f4a:	ce 01       	movw	r24, r28
 f4c:	0e 94 aa 07 	call	0xf54	; 0xf54 <_Exit>

Disassembly of section .text._Exit:

00000f54 <_Exit>:
 f54:	0e 94 56 00 	call	0xac	; 0xac <_exit>
